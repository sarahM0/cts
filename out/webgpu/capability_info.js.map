{"version":3,"sources":["../../src/webgpu/capability_info.ts"],"names":["GPUConst","keysOf","obj","Object","keys","numericKeysOf","map","n","Number","makeTable","members","defaults","table","result","k","v","entries","item","i","length","kBufferSizeAlignment","kBufferUsageInfo","BufferUsage","MAP_READ","MAP_WRITE","COPY_SRC","COPY_DST","INDEX","VERTEX","UNIFORM","STORAGE","INDIRECT","QUERY_RESOLVE","kBufferUsages","kRegularTextureFormatInfo","kTexFmtInfoHeader","kSizedDepthStencilFormatInfo","kUnsizedDepthStencilFormatInfo","undefined","kCompressedTextureFormatInfo","kRegularTextureFormats","kSizedDepthStencilFormats","kUnsizedDepthStencilFormats","kCompressedTextureFormats","kColorTextureFormatInfo","kColorTextureFormats","kEncodableTextureFormatInfo","kEncodableTextureFormats","kSizedTextureFormatInfo","kSizedTextureFormats","kDepthStencilFormatInfo","kDepthStencilFormats","kUncompressedTextureFormatInfo","kUncompressedTextureFormats","kAllTextureFormatInfo","kAllTextureFormats","x","kTextureDimensionInfo","kTextureDimensions","kTextureAspectInfo","kTextureAspects","kTextureUsageInfo","TextureUsage","SAMPLED","OUTPUT_ATTACHMENT","kTextureUsages","kTextureComponentTypeInfo","kTextureComponentTypes","kTextureViewDimensionInfo","storage","kTextureViewDimensions","kMaxBindingsPerBindGroup","kPerStageBindingLimits","class","max","kPerPipelineBindingLimits","maxDynamic","kBindableResource","uniformBuf","storageBuf","plainSamp","compareSamp","sampledTex","sampledTexMS","storageTex","errorBuf","errorSamp","errorTex","kBindableResources","kBindingKind","resource","perStageLimitClass","perPipelineLimitClass","sampler","kValidStagesAll","validStages","ShaderStage","FRAGMENT","COMPUTE","kValidStagesStorageWrite","kBufferBindingTypeInfo","usage","kBufferBindingTypes","kSamplerBindingTypeInfo","kSamplerBindingTypes","kTextureBindingTypeInfo","kTextureBindingTypes","kBindingTypeInfo","kBindingTypes","kShaderStages","kShaderStageCombinations","kTextureSampleCounts","kMaxColorAttachments"],"mappings":";AAAA;AACA;AAEA,SAASA,QAAT,QAAyB,gBAAzB;;;;;;AAMA,SAASC,MAAT,CAAkCC,GAAlC,EAA4E;AAC1E,SAAQC,MAAM,CAACC,IAAP,CAAYF,GAAZ,CAAR;AACD;;AAED,SAASG,aAAT,CAA0BH,GAA1B,EAAqD;AACnD,SAAQC,MAAM,CAACC,IAAP,CAAYF,GAAZ,EAAiBI,GAAjB,CAAqBC,CAAC,IAAIC,MAAM,CAACD,CAAD,CAAhC,CAAR;AACD;;AAED;AACA;AACA;AACA;AACA;AACA,SAASE,SAAT;;;;;AAKEC,OALF;AAMEC,QANF;AAOEC,KAPF;;;AAUE;AACA,QAAMC,MAAiD,GAAG,EAA1D;AACA,OAAK,MAAM,CAACC,CAAD,EAAIC,CAAJ,CAAX,IAAqBZ,MAAM,CAACa,OAAP,CAAmCJ,KAAnC,CAArB,EAAgE;AAC9D,UAAMK,IAA8B,GAAG,EAAvC;AACA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGR,OAAO,CAACS,MAA5B,EAAoC,EAAED,CAAtC,EAAyC;AACvCD,MAAAA,IAAI,CAACP,OAAO,CAACQ,CAAD,CAAR,CAAJ,WAAmBH,CAAC,CAACG,CAAD,CAApB,uCAA2BP,QAAQ,CAACO,CAAD,CAAnC;AACD;AACDL,IAAAA,MAAM,CAACC,CAAD,CAAN,GAAYG,IAAZ;AACD;;AAED,SAAOJ,MAAP;AACD;;AAED;;AAEA,OAAO,MAAMO,oBAAoB,GAAG,CAA7B;;AAEP,OAAO,MAAMC,gBAEZ;;AAAyB;AACxB,GAACrB,QAAQ,CAACsB,WAAT,CAAqBC,QAAtB,GAAsC,EADd;AAExB,GAACvB,QAAQ,CAACsB,WAAT,CAAqBE,SAAtB,GAAsC,EAFd;AAGxB,GAACxB,QAAQ,CAACsB,WAAT,CAAqBG,QAAtB,GAAsC,EAHd;AAIxB,GAACzB,QAAQ,CAACsB,WAAT,CAAqBI,QAAtB,GAAsC,EAJd;AAKxB,GAAC1B,QAAQ,CAACsB,WAAT,CAAqBK,KAAtB,GAAsC,EALd;AAMxB,GAAC3B,QAAQ,CAACsB,WAAT,CAAqBM,MAAtB,GAAsC,EANd;AAOxB,GAAC5B,QAAQ,CAACsB,WAAT,CAAqBO,OAAtB,GAAsC,EAPd;AAQxB,GAAC7B,QAAQ,CAACsB,WAAT,CAAqBQ,OAAtB,GAAsC,EARd;AASxB,GAAC9B,QAAQ,CAACsB,WAAT,CAAqBS,QAAtB,GAAsC,EATd;AAUxB,GAAC/B,QAAQ,CAACsB,WAAT,CAAqBU,aAAtB,GAAsC,EAVd,EAFnB;;AAcP,OAAO,MAAMC,aAAa,GAAG5B,aAAa,CAAiBgB,gBAAjB,CAAnC;;AAEP;;AAEA,OAAO,MAAMa,yBAAyB,GAAyBzB,SAAS;AAC9C,CAAC,YAAD,EAAe,OAAf,EAAwB,OAAxB,EAAiC,SAAjC,EAA4C,SAA5C,EAAuD,SAAvD,EAAkE,SAAlE,EAA6E,eAA7E,EAA8F,YAA9F,EAA4G,aAA5G,EAAwI,WAAxI,CAD8C;AAE9C,GAAkB,IAAlB,EAA0B,KAA1B,EAAqC,KAArC,GAA4D,IAA5D,EAAuE,IAAvE,GAAyG,CAAzG,EAAwH,CAAxH,CAF8C,EAEiH;AACvL;AACA,aAAwB,CAAS,IAAT,KAAgD,KAAhD,IAA2F,CAA3F,CAF+J;AAGvL,aAAwB,CAAQ,KAAR,KAAgD,KAAhD,IAA2F,CAA3F,CAH+J;AAIvL,YAAwB,CAAS,IAAT,KAAgD,KAAhD,IAA2F,CAA3F,CAJ+J;AAKvL,YAAwB,CAAS,IAAT,KAAgD,KAAhD,IAA2F,CAA3F,CAL+J;AAMvL;AACA,aAAwB,CAAS,IAAT,KAAgD,KAAhD,IAA2F,CAA3F,CAP+J;AAQvL,aAAwB,CAAS,IAAT,KAAgD,KAAhD,IAA2F,CAA3F,CAR+J;AASvL,cAAwB,CAAS,IAAT,KAAgD,KAAhD,IAA2F,CAA3F,CAT+J;AAUvL,cAAwB,CAAS,IAAT,KAAgD,KAAhD,IAA2F,CAA3F,CAV+J;AAWvL,cAAwB,CAAQ,KAAR,KAAgD,KAAhD,IAA2F,CAA3F,CAX+J;AAYvL,aAAwB,CAAS,IAAT,KAAgD,KAAhD,IAA2F,CAA3F,CAZ+J;AAavL,aAAwB,CAAS,IAAT,KAAgD,KAAhD,IAA2F,CAA3F,CAb+J;AAcvL;AACA,aAAwB,CAAS,IAAT,KAAiD,IAAjD,IAA2F,CAA3F,CAf+J;AAgBvL,aAAwB,CAAS,IAAT,KAAiD,IAAjD,IAA2F,CAA3F,CAhB+J;AAiBvL,cAAwB,CAAS,IAAT,KAAiD,IAAjD,IAA2F,CAA3F,CAjB+J;AAkBvL,cAAwB,CAAS,IAAT,KAAgD,KAAhD,IAA2F,CAA3F,CAlB+J;AAmBvL,cAAwB,CAAS,IAAT,KAAgD,KAAhD,IAA2F,CAA3F,CAnB+J;AAoBvL,eAAwB,CAAS,IAAT,KAAgD,KAAhD,IAA2F,CAA3F,CApB+J;AAqBvL,gBAAwB,CAAS,IAAT,KAAiD,IAAjD,IAA2F,CAA3F,CArB+J;AAsBvL,qBAAwB,CAAS,IAAT,KAAgD,KAAhD,IAA2F,CAA3F,CAtB+J;AAuBvL,gBAAwB,CAAQ,KAAR,KAAiD,IAAjD,IAA2F,CAA3F,CAvB+J;AAwBvL,eAAwB,CAAS,IAAT,KAAiD,IAAjD,IAA2F,CAA3F,CAxB+J;AAyBvL,eAAwB,CAAS,IAAT,KAAiD,IAAjD,IAA2F,CAA3F,CAzB+J;AA0BvL,gBAAwB,CAAS,IAAT,KAAgD,KAAhD,IAA2F,CAA3F,CA1B+J;AA2BvL,qBAAwB,CAAS,IAAT,KAAgD,KAAhD,IAA2F,CAA3F,CA3B+J;AA4BvL;AACA,kBAAwB,CAAS,IAAT,KAAgD,KAAhD,IAA2F,CAA3F,CA7B+J;AA8BvL,mBAAwB,CAAQ,KAAR,KAAgD,KAAhD,IAA2F,CAA3F,CA9B+J;AA+BvL,kBAAwB,CAAQ,KAAR,KAAgD,KAAhD,IAA2F,CAA3F,CA/B+J;AAgCvL;AACA,cAAwB,CAAS,IAAT,KAAiD,IAAjD,IAA2F,CAA3F,CAjC+J;AAkCvL,cAAwB,CAAS,IAAT,KAAiD,IAAjD,IAA2F,CAA3F,CAlC+J;AAmCvL,eAAwB,CAAS,IAAT,KAAiD,IAAjD,IAA2F,CAA3F,CAnC+J;AAoCvL,gBAAwB,CAAS,IAAT,KAAiD,IAAjD,IAA2F,CAA3F,CApC+J;AAqCvL,gBAAwB,CAAS,IAAT,KAAiD,IAAjD,IAA2F,CAA3F,CArC+J;AAsCvL,iBAAwB,CAAS,IAAT,KAAiD,IAAjD,IAA2F,CAA3F,CAtC+J;AAuCvL;AACA,gBAAwB,CAAS,IAAT,KAAiD,IAAjD,IAA0F,EAA1F,CAxC+J;AAyCvL,gBAAwB,CAAS,IAAT,KAAiD,IAAjD,IAA0F,EAA1F,CAzC+J;AA0CvL,iBAAwB,CAAS,IAAT,KAAiD,IAAjD,IAA0F,EAA1F,CA1C+J,EAFjH,CAAjE;;;AA+CP,MAAM0B,iBAAiB,GAAG,CAAC,YAAD,EAAe,OAAf,EAAwB,OAAxB,EAAiC,SAAjC,EAA4C,SAA5C,EAAuD,SAAvD,EAAkE,SAAlE,EAA6E,eAA7E,EAA8F,YAA9F,EAA4G,aAA5G,EAAwI,WAAxI,CAA1B;AACA,OAAO,MAAMC,4BAA4B,GAAyB3B,SAAS,CAAC0B,iBAAD;AACjD,CAAS,IAAT,EAAiB,KAAjB,IAAgD,KAAhD,KAAyG,CAAzG,EAAwH,CAAxH,CADiD,EAC8G;AACvL,kBAAwB,CAAS,IAAT,EAAiB,KAAjB,EAA2B,IAA3B,EAAqC,KAArC,GAA2D,KAA3D,EAAsE,KAAtE,EAA2F,CAA3F,CAD+J,EAD9G,CAApE;;AAIP,OAAO,MAAME,8BAA8B,GAAyB5B,SAAS,CAAC0B,iBAAD;AACnD,CAAS,IAAT,EAAiB,KAAjB,IAAgD,KAAhD,IAAmFG,SAAnF,EAAyG,CAAzG,EAAwH,CAAxH,CADmD,EAC4G;AACvL,iBAAwB,IAA2B,IAA3B,EAAqC,KAArC,GAA2D,KAA3D,EAAsE,KAAtE,CAD+J;AAEvL,0BAAwB,IAA2B,IAA3B,EAAsC,IAAtC,GAA2D,KAA3D,EAAsE,KAAtE,CAF+J,EAD5G,CAAtE;;AAKP,OAAO,MAAMC,4BAA4B,GAAyB9B,SAAS,CAAC0B,iBAAD;AACjD,CAAQ,KAAR,EAAkB,IAAlB,EAA0B,KAA1B,EAAqC,KAArC,EAAgD,KAAhD,EAA4D,IAA5D,EAAuE,IAAvE,GAAyG,CAAzG,EAAwH,CAAxH,CADiD,EAC8G;AACvL,oBAAwB,SAA2F,CAA3F,EAAyG,CAAzG,EAAwH,CAAxH,EAA2H,wBAA3H,CAD+J;AAEvL,yBAAwB,SAA2F,CAA3F,EAAyG,CAAzG,EAAwH,CAAxH,EAA2H,wBAA3H,CAF+J;AAGvL,oBAAwB,SAA0F,EAA1F,EAAyG,CAAzG,EAAwH,CAAxH,EAA2H,wBAA3H,CAH+J;AAIvL,yBAAwB,SAA0F,EAA1F,EAAyG,CAAzG,EAAwH,CAAxH,EAA2H,wBAA3H,CAJ+J;AAKvL,oBAAwB,SAA0F,EAA1F,EAAyG,CAAzG,EAAwH,CAAxH,EAA2H,wBAA3H,CAL+J;AAMvL,yBAAwB,SAA0F,EAA1F,EAAyG,CAAzG,EAAwH,CAAxH,EAA2H,wBAA3H,CAN+J;AAOvL,iBAAwB,SAA2F,CAA3F,EAAyG,CAAzG,EAAwH,CAAxH,EAA2H,wBAA3H,CAP+J;AAQvL,iBAAwB,SAA2F,CAA3F,EAAyG,CAAzG,EAAwH,CAAxH,EAA2H,wBAA3H,CAR+J;AASvL,kBAAwB,SAA0F,EAA1F,EAAyG,CAAzG,EAAwH,CAAxH,EAA2H,wBAA3H,CAT+J;AAUvL,kBAAwB,SAA0F,EAA1F,EAAyG,CAAzG,EAAwH,CAAxH,EAA2H,wBAA3H,CAV+J;AAWvL,qBAAwB,SAA0F,EAA1F,EAAyG,CAAzG,EAAwH,CAAxH,EAA2H,wBAA3H,CAX+J;AAYvL,oBAAwB,SAA0F,EAA1F,EAAyG,CAAzG,EAAwH,CAAxH,EAA2H,wBAA3H,CAZ+J;AAavL,oBAAwB,SAA0F,EAA1F,EAAyG,CAAzG,EAAwH,CAAxH,EAA2H,wBAA3H,CAb+J;AAcvL,yBAAwB,SAA0F,EAA1F,EAAyG,CAAzG,EAAwH,CAAxH,EAA2H,wBAA3H,CAd+J,EAD9G,CAApE;;;AAkBP,OAAO,MAAMK,sBAAsB,GAAGvC,MAAM,CAACiC,yBAAD,CAArC;AACP,OAAO,MAAMO,yBAAyB,GAAGxC,MAAM,CAACmC,4BAAD,CAAxC;AACP,OAAO,MAAMM,2BAA2B,GAAGzC,MAAM,CAACoC,8BAAD,CAA1C;AACP,OAAO,MAAMM,yBAAyB,GAAG1C,MAAM,CAACsC,4BAAD,CAAxC;;AAEP,OAAO,MAAMK,uBAAuB,GAAG;AACrC,KAAGV,yBADkC;AAErC,KAAGK,4BAFkC,EAAhC;;;AAKP,OAAO,MAAMM,oBAAoB,GAAG5C,MAAM,CAAC2C,uBAAD,CAAnC;;AAEP,OAAO,MAAME,2BAA2B,GAAG;AACzC,KAAGZ,yBADsC;AAEzC,KAAGE,4BAFsC,EAApC;;;AAKP,OAAO,MAAMW,wBAAwB,GAAG9C,MAAM,CAAC6C,2BAAD,CAAvC;;AAEP,OAAO,MAAME,uBAAuB,GAAG;AACrC,KAAGd,yBADkC;AAErC,KAAGE,4BAFkC;AAGrC,KAAGG,4BAHkC,EAAhC;;;AAMP,OAAO,MAAMU,oBAAoB,GAAGhD,MAAM,CAAC+C,uBAAD,CAAnC;;AAEP,OAAO,MAAME,uBAAuB,GAAG;AACrC,KAAGd,4BADkC;AAErC,KAAGC,8BAFkC,EAAhC;;;AAKP,OAAO,MAAMc,oBAAoB,GAAGlD,MAAM,CAACiD,uBAAD,CAAnC;;AAEP,OAAO,MAAME,8BAA8B,GAAG;AAC5C,KAAGlB,yBADyC;AAE5C,KAAGE,4BAFyC;AAG5C,KAAGC,8BAHyC,EAAvC;;;AAMP,OAAO,MAAMgB,2BAA2B,GAAGpD,MAAM,CAACmD,8BAAD,CAA1C;;AAEP,OAAO,MAAME,qBAAqB,GAAG;AACnC,KAAGF,8BADgC;AAEnC,KAAGb,4BAFgC,EAA9B;;AAIP,OAAO,MAAMgB,kBAAkB,GAAGtD,MAAM,CAACqD,qBAAD,CAAjC;AACP;AACA,CAAEE,CAAD,IAAiDA,CAAlD,EAAqDF,qBAArD;;AAEA,OAAO,MAAMG,qBAIZ;;;;AAAyB;AACxB,QAAM,EADkB;AAExB,QAAM,EAFkB;AAGxB,QAAM,EAHkB,EAJnB;;AASP,OAAO,MAAMC,kBAAkB,GAAGzD,MAAM,CAACwD,qBAAD,CAAjC;;AAEP,OAAO,MAAME,kBAIZ;;;;AAAyB;AACxB,SAAO,EADiB;AAExB,gBAAc,EAFU;AAGxB,kBAAgB,EAHQ,EAJnB;;AASP,OAAO,MAAMC,eAAe,GAAG3D,MAAM,CAAC0D,kBAAD,CAA9B;;AAEP,OAAO,MAAME,iBAEZ;;AAAG;AACF,GAAC7D,QAAQ,CAAC8D,YAAT,CAAsBrC,QAAvB,GAAkC,EADhC;AAEF,GAACzB,QAAQ,CAAC8D,YAAT,CAAsBpC,QAAvB,GAAkC,EAFhC;AAGF,GAAC1B,QAAQ,CAAC8D,YAAT,CAAsBC,OAAvB,GAAiC,EAH/B;AAIF,GAAC/D,QAAQ,CAAC8D,YAAT,CAAsBhC,OAAvB,GAAiC,EAJ/B;AAKF,GAAC9B,QAAQ,CAAC8D,YAAT,CAAsBE,iBAAvB,GAA2C,EALzC,EAFG;;AASP,OAAO,MAAMC,cAAc,GAAG5D,aAAa,CAAkBwD,iBAAlB,CAApC;;AAEP,OAAO,MAAMK,yBAIZ;;;;AAAyB;AACxB,WAAS,EADe;AAExB,UAAQ,EAFgB;AAGxB,UAAQ,EAHgB;AAIxB,sBAAoB,EAJI,EAJnB;;AAUP,OAAO,MAAMC,sBAAsB,GAAGlE,MAAM,CAACiE,yBAAD,CAArC;;AAEP;;AAEA,OAAO,MAAME,yBAKZ;;;;;AAAyB;AACxB,QAAc,EAAEC,OAAO,EAAE,IAAX,EADU;AAExB,QAAc,EAAEA,OAAO,EAAE,IAAX,EAFU;AAGxB,cAAc,EAAEA,OAAO,EAAE,IAAX,EAHU;AAIxB,UAAc,EAAEA,OAAO,EAAE,KAAX,EAJU;AAKxB,gBAAc,EAAEA,OAAO,EAAE,KAAX,EALU;AAMxB,QAAc,EAAEA,OAAO,EAAE,IAAX,EANU,EALnB;;AAaP,OAAO,MAAMC,sBAAsB,GAAGrE,MAAM,CAACmE,yBAAD,CAArC;;AAEP;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6BA;;AAEA,OAAO,MAAMG,wBAAwB,GAAG,EAAjC;;AAEP,OAAO,MAAMC,sBAMZ;;;;;;AAAyB;AACxB,gBAAc,EAAEC,KAAK,EAAE,YAAT,EAAuBC,GAAG,EAAE,EAA5B,EADU;AAExB,gBAAc,EAAED,KAAK,EAAE,YAAT,EAAuBC,GAAG,EAAG,CAA7B,EAFU;AAGxB,aAAc,EAAED,KAAK,EAAE,SAAT,EAAuBC,GAAG,EAAE,EAA5B,EAHU;AAIxB,gBAAc,EAAED,KAAK,EAAE,YAAT,EAAuBC,GAAG,EAAE,EAA5B,EAJU;AAKxB,gBAAc,EAAED,KAAK,EAAE,YAAT,EAAuBC,GAAG,EAAG,CAA7B,EALU,EANnB;;;AAcP,OAAO,MAAMC,yBAMZ;;;;;;AAAyB;AACxB,gBAAc,EAAEF,KAAK,EAAE,YAAT,EAAuBG,UAAU,EAAE,CAAnC,EADU;AAExB,gBAAc,EAAEH,KAAK,EAAE,YAAT,EAAuBG,UAAU,EAAE,CAAnC,EAFU;AAGxB,aAAc,EAAEH,KAAK,EAAE,SAAT,EAAuBG,UAAU,EAAE,CAAnC,EAHU;AAIxB,gBAAc,EAAEH,KAAK,EAAE,YAAT,EAAuBG,UAAU,EAAE,CAAnC,EAJU;AAKxB,gBAAc,EAAEH,KAAK,EAAE,YAAT,EAAuBG,UAAU,EAAE,CAAnC,EALU,EANnB;;;AAcP,MAAMC,iBAEL;;AAAyB;AACxBC,EAAAA,UAAU,EAAI,EADU;AAExBC,EAAAA,UAAU,EAAI,EAFU;AAGxBC,EAAAA,SAAS,EAAK,EAHU;AAIxBC,EAAAA,WAAW,EAAG,EAJU;AAKxBC,EAAAA,UAAU,EAAI,EALU;AAMxBC,EAAAA,YAAY,EAAE,EANU;AAOxBC,EAAAA,UAAU,EAAI,EAPU;AAQxBC,EAAAA,QAAQ,EAAM,EARU;AASxBC,EAAAA,SAAS,EAAK,EATU;AAUxBC,EAAAA,QAAQ,EAAM,EAVU,EAF1B;;AAcA,OAAO,MAAMC,kBAAkB,GAAGvF,MAAM,CAAC4E,iBAAD,CAAjC;;;;;;;;;AASP,MAAMY,YAEL;;AAAyB;AACxBX,EAAAA,UAAU,EAAI,EAAEY,QAAQ,EAAE,YAAZ,EAA4BC,kBAAkB,EAAEnB,sBAAsB,CAACM,UAAvE,EAAmFc,qBAAqB,EAAEjB,yBAAyB,CAACG,UAApI,EADU;AAExBC,EAAAA,UAAU,EAAI,EAAEW,QAAQ,EAAE,YAAZ,EAA4BC,kBAAkB,EAAEnB,sBAAsB,CAACO,UAAvE,EAAmFa,qBAAqB,EAAEjB,yBAAyB,CAACI,UAApI,EAFU;AAGxBC,EAAAA,SAAS,EAAK,EAAEU,QAAQ,EAAE,WAAZ,EAA4BC,kBAAkB,EAAEnB,sBAAsB,CAACqB,OAAvE,EAAmFD,qBAAqB,EAAEjB,yBAAyB,CAACkB,OAApI,EAHU;AAIxBZ,EAAAA,WAAW,EAAG,EAAES,QAAQ,EAAE,aAAZ,EAA4BC,kBAAkB,EAAEnB,sBAAsB,CAACqB,OAAvE,EAAmFD,qBAAqB,EAAEjB,yBAAyB,CAACkB,OAApI,EAJU;AAKxBX,EAAAA,UAAU,EAAI,EAAEQ,QAAQ,EAAE,YAAZ,EAA4BC,kBAAkB,EAAEnB,sBAAsB,CAACU,UAAvE,EAAmFU,qBAAqB,EAAEjB,yBAAyB,CAACO,UAApI,EALU;AAMxBC,EAAAA,YAAY,EAAE,EAAEO,QAAQ,EAAE,cAAZ,EAA4BC,kBAAkB,EAAEnB,sBAAsB,CAACU,UAAvE,EAAmFU,qBAAqB,EAAEjB,yBAAyB,CAACO,UAApI,EANU;AAOxBE,EAAAA,UAAU,EAAI,EAAEM,QAAQ,EAAE,YAAZ,EAA4BC,kBAAkB,EAAEnB,sBAAsB,CAACY,UAAvE,EAAmFQ,qBAAqB,EAAEjB,yBAAyB,CAACS,UAApI,EAPU,EAF1B;;;AAYA;;;;;;AAMA,MAAMU,eAAe,GAAG;AACtBC,EAAAA,WAAW;AACT/F,EAAAA,QAAQ,CAACgG,WAAT,CAAqBpE,MAArB,GAA8B5B,QAAQ,CAACgG,WAAT,CAAqBC,QAAnD,GAA8DjG,QAAQ,CAACgG,WAAT,CAAqBE,OAF/D,EAAxB;;AAIA,MAAMC,wBAAwB,GAAG;AAC/BJ,EAAAA,WAAW,EAAE/F,QAAQ,CAACgG,WAAT,CAAqBC,QAArB,GAAgCjG,QAAQ,CAACgG,WAAT,CAAqBE,OADnC,EAAjC;;;AAIA,OAAO,MAAME,sBAKZ;;;;;AAAyB;AACxB,oBAA2B,EAAEC,KAAK,EAAErG,QAAQ,CAACsB,WAAT,CAAqBO,OAA9B,EAAuC,GAAG4D,YAAY,CAACX,UAAvD,EAAoE,GAAGgB,eAAvE,EADH;AAExB,oBAA2B,EAAEO,KAAK,EAAErG,QAAQ,CAACsB,WAAT,CAAqBQ,OAA9B,EAAuC,GAAG2D,YAAY,CAACV,UAAvD,EAAoE,GAAGoB,wBAAvE,EAFH;AAGxB,6BAA2B,EAAEE,KAAK,EAAErG,QAAQ,CAACsB,WAAT,CAAqBQ,OAA9B,EAAuC,GAAG2D,YAAY,CAACV,UAAvD,EAAoE,GAAGe,eAAvE,EAHH,EALnB;;AAUP,OAAO,MAAMQ,mBAAmB,GAAGrG,MAAM,CAACmG,sBAAD,CAAlC;;AAEP,OAAO,MAAMG,uBAIZ;;;;AAAyB;AACxB,aAA6B,EAAE,GAAGd,YAAY,CAACT,SAAlB,EAA+B,GAAGc,eAAlC,EADL;AAExB,wBAA6B,EAAE,GAAGL,YAAY,CAACR,WAAlB,EAA+B,GAAGa,eAAlC,EAFL,EAJnB;;AAQP,OAAO,MAAMU,oBAAoB,GAAGvG,MAAM,CAACsG,uBAAD,CAAnC;;AAEP,OAAO,MAAME,uBAKZ;;;;;AAAyB;AACxB,qBAA6B,EAAEJ,KAAK,EAAErG,QAAQ,CAAC8D,YAAT,CAAsBC,OAA/B,EAAwC,GAAG0B,YAAY,CAACP,UAAxD,EAAuE,GAAGY,eAA1E,EADL;AAExB,0BAA6B,EAAEO,KAAK,EAAErG,QAAQ,CAAC8D,YAAT,CAAsBC,OAA/B,EAAwC,GAAG0B,YAAY,CAACN,YAAxD,EAAuE,GAAGW,eAA1E,EAFL;AAGxB,+BAA6B,EAAEO,KAAK,EAAErG,QAAQ,CAAC8D,YAAT,CAAsBhC,OAA/B,EAAwC,GAAG2D,YAAY,CAACL,UAAxD,EAAuE,GAAGe,wBAA1E,EAHL;AAIxB,8BAA6B,EAAEE,KAAK,EAAErG,QAAQ,CAAC8D,YAAT,CAAsBhC,OAA/B,EAAwC,GAAG2D,YAAY,CAACL,UAAxD,EAAuE,GAAGU,eAA1E,EAJL,EALnB;;AAWP,OAAO,MAAMY,oBAAoB,GAAGzG,MAAM,CAACwG,uBAAD,CAAnC;;AAEP;;AAEA,OAAO,MAAME,gBAEZ;;AAAG;AACF,KAAGP,sBADD;AAEF,KAAGG,uBAFD;AAGF,KAAGE,uBAHD,EAFG;;AAOP,OAAO,MAAMG,aAAa,GAAG3G,MAAM,CAAC0G,gBAAD,CAA5B;;AAEP,OAAO,MAAME,aAA6C,GAAG;AAC3D7G,QAAQ,CAACgG,WAAT,CAAqBpE,MADsC;AAE3D5B,QAAQ,CAACgG,WAAT,CAAqBC,QAFsC;AAG3DjG,QAAQ,CAACgG,WAAT,CAAqBE,OAHsC,CAAtD;;AAKP,OAAO,MAAMY,wBAAwD,GAAG,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,EAAa,CAAb,EAAgB,CAAhB,EAAmB,CAAnB,EAAsB,CAAtB,CAAjE;;AAEP;AACA;AACA,OAAO,MAAMC,oBAAoB,GAAG,CAAC,CAAD,EAAI,CAAJ,CAA7B;;AAEP;AACA,OAAO,MAAMC,oBAAoB,GAAG,CAA7B","sourcesContent":["/* eslint-disable no-sparse-arrays */\nimport { ResolveType, ZipKeysWithValues } from '../common/framework/util/types.js';\n\nimport { GPUConst } from './constants.js';\n\ntype valueof<K> = K[keyof K];\ntype GPUTextureUsage = valueof<typeof GPUTextureUsage>;\ntype GPUBufferUsage = valueof<typeof GPUBufferUsage>;\n\nfunction keysOf<T extends string>(obj: { [k in T]: unknown }): readonly T[] {\n  return (Object.keys(obj) as unknown[]) as T[];\n}\n\nfunction numericKeysOf<T>(obj: object): readonly T[] {\n  return (Object.keys(obj).map(n => Number(n)) as unknown[]) as T[];\n}\n\n/**\n * Creates an info lookup object from a more nicely-formatted table. See below for examples.\n *\n * Note: Using `as const` on the arguments to this function is necessary to infer the correct type.\n */\nfunction makeTable<\n  Members extends readonly string[],\n  Defaults extends readonly unknown[],\n  Table extends { readonly [k: string]: readonly unknown[] }\n>(\n  members: Members,\n  defaults: Defaults,\n  table: Table\n): {\n  readonly [k in keyof Table]: ResolveType<ZipKeysWithValues<Members, Table[k], Defaults>>;\n} {\n  const result: { [k: string]: { [m: string]: unknown } } = {};\n  for (const [k, v] of Object.entries<readonly unknown[]>(table)) {\n    const item: { [m: string]: unknown } = {};\n    for (let i = 0; i < members.length; ++i) {\n      item[members[i]] = v[i] ?? defaults[i];\n    }\n    result[k] = item;\n  }\n  /* eslint-disable-next-line @typescript-eslint/no-explicit-any */\n  return result as any;\n}\n\n// Buffers\n\nexport const kBufferSizeAlignment = 4;\n\nexport const kBufferUsageInfo: {\n  readonly [k in GPUBufferUsage]: {};\n} = /* prettier-ignore */ {\n  [GPUConst.BufferUsage.MAP_READ]:      {},\n  [GPUConst.BufferUsage.MAP_WRITE]:     {},\n  [GPUConst.BufferUsage.COPY_SRC]:      {},\n  [GPUConst.BufferUsage.COPY_DST]:      {},\n  [GPUConst.BufferUsage.INDEX]:         {},\n  [GPUConst.BufferUsage.VERTEX]:        {},\n  [GPUConst.BufferUsage.UNIFORM]:       {},\n  [GPUConst.BufferUsage.STORAGE]:       {},\n  [GPUConst.BufferUsage.INDIRECT]:      {},\n  [GPUConst.BufferUsage.QUERY_RESOLVE]: {},\n};\nexport const kBufferUsages = numericKeysOf<GPUBufferUsage>(kBufferUsageInfo);\n\n// Textures\n\nexport const kRegularTextureFormatInfo = /* prettier-ignore */ makeTable(\n                          ['renderable', 'color', 'depth', 'stencil', 'storage', 'copySrc', 'copyDst', 'bytesPerBlock', 'blockWidth', 'blockHeight',              'extension'] as const,\n                          [            ,    true,   false,     false,          ,      true,      true,                ,            1,             1,                         ] as const, {\n  // 8-bit formats\n  'r8unorm':              [        true,        ,        ,          ,     false,          ,          ,               1],\n  'r8snorm':              [       false,        ,        ,          ,     false,          ,          ,               1],\n  'r8uint':               [        true,        ,        ,          ,     false,          ,          ,               1],\n  'r8sint':               [        true,        ,        ,          ,     false,          ,          ,               1],\n  // 16-bit formats\n  'r16uint':              [        true,        ,        ,          ,     false,          ,          ,               2],\n  'r16sint':              [        true,        ,        ,          ,     false,          ,          ,               2],\n  'r16float':             [        true,        ,        ,          ,     false,          ,          ,               2],\n  'rg8unorm':             [        true,        ,        ,          ,     false,          ,          ,               2],\n  'rg8snorm':             [       false,        ,        ,          ,     false,          ,          ,               2],\n  'rg8uint':              [        true,        ,        ,          ,     false,          ,          ,               2],\n  'rg8sint':              [        true,        ,        ,          ,     false,          ,          ,               2],\n  // 32-bit formats\n  'r32uint':              [        true,        ,        ,          ,      true,          ,          ,               4],\n  'r32sint':              [        true,        ,        ,          ,      true,          ,          ,               4],\n  'r32float':             [        true,        ,        ,          ,      true,          ,          ,               4],\n  'rg16uint':             [        true,        ,        ,          ,     false,          ,          ,               4],\n  'rg16sint':             [        true,        ,        ,          ,     false,          ,          ,               4],\n  'rg16float':            [        true,        ,        ,          ,     false,          ,          ,               4],\n  'rgba8unorm':           [        true,        ,        ,          ,      true,          ,          ,               4],\n  'rgba8unorm-srgb':      [        true,        ,        ,          ,     false,          ,          ,               4],\n  'rgba8snorm':           [       false,        ,        ,          ,      true,          ,          ,               4],\n  'rgba8uint':            [        true,        ,        ,          ,      true,          ,          ,               4],\n  'rgba8sint':            [        true,        ,        ,          ,      true,          ,          ,               4],\n  'bgra8unorm':           [        true,        ,        ,          ,     false,          ,          ,               4],\n  'bgra8unorm-srgb':      [        true,        ,        ,          ,     false,          ,          ,               4],\n  // Packed 32-bit formats\n  'rgb10a2unorm':         [        true,        ,        ,          ,     false,          ,          ,               4],\n  'rg11b10ufloat':        [       false,        ,        ,          ,     false,          ,          ,               4],\n  'rgb9e5ufloat':         [       false,        ,        ,          ,     false,          ,          ,               4],\n  // 64-bit formats\n  'rg32uint':             [        true,        ,        ,          ,      true,          ,          ,               8],\n  'rg32sint':             [        true,        ,        ,          ,      true,          ,          ,               8],\n  'rg32float':            [        true,        ,        ,          ,      true,          ,          ,               8],\n  'rgba16uint':           [        true,        ,        ,          ,      true,          ,          ,               8],\n  'rgba16sint':           [        true,        ,        ,          ,      true,          ,          ,               8],\n  'rgba16float':          [        true,        ,        ,          ,      true,          ,          ,               8],\n  // 128-bit formats\n  'rgba32uint':           [        true,        ,        ,          ,      true,          ,          ,              16],\n  'rgba32sint':           [        true,        ,        ,          ,      true,          ,          ,              16],\n  'rgba32float':          [        true,        ,        ,          ,      true,          ,          ,              16],\n} as const);\n/* prettier-ignore */\nconst kTexFmtInfoHeader = ['renderable', 'color', 'depth', 'stencil', 'storage', 'copySrc', 'copyDst', 'bytesPerBlock', 'blockWidth', 'blockHeight',              'extension'] as const;\nexport const kSizedDepthStencilFormatInfo = /* prettier-ignore */ makeTable(kTexFmtInfoHeader,\n                          [        true,   false,        ,          ,     false,          ,          ,                ,            1,             1,                         ] as const, {\n  'depth32float':         [        true,   false,    true,     false,          ,     false,     false,               4],\n} as const);\nexport const kUnsizedDepthStencilFormatInfo = /* prettier-ignore */ makeTable(kTexFmtInfoHeader,\n                          [        true,   false,        ,          ,     false,          ,          ,       undefined,            1,             1,                         ] as const, {\n  'depth24plus':          [            ,        ,    true,     false,          ,     false,     false],\n  'depth24plus-stencil8': [            ,        ,    true,      true,          ,     false,     false],\n} as const);\nexport const kCompressedTextureFormatInfo = /* prettier-ignore */ makeTable(kTexFmtInfoHeader,\n                          [       false,    true,   false,     false,     false,      true,      true,                ,            4,             4,                         ] as const, {\n  'bc1-rgba-unorm':       [            ,        ,        ,          ,          ,          ,          ,               8,            4,             4, 'texture-compression-bc'],\n  'bc1-rgba-unorm-srgb':  [            ,        ,        ,          ,          ,          ,          ,               8,            4,             4, 'texture-compression-bc'],\n  'bc2-rgba-unorm':       [            ,        ,        ,          ,          ,          ,          ,              16,            4,             4, 'texture-compression-bc'],\n  'bc2-rgba-unorm-srgb':  [            ,        ,        ,          ,          ,          ,          ,              16,            4,             4, 'texture-compression-bc'],\n  'bc3-rgba-unorm':       [            ,        ,        ,          ,          ,          ,          ,              16,            4,             4, 'texture-compression-bc'],\n  'bc3-rgba-unorm-srgb':  [            ,        ,        ,          ,          ,          ,          ,              16,            4,             4, 'texture-compression-bc'],\n  'bc4-r-unorm':          [            ,        ,        ,          ,          ,          ,          ,               8,            4,             4, 'texture-compression-bc'],\n  'bc4-r-snorm':          [            ,        ,        ,          ,          ,          ,          ,               8,            4,             4, 'texture-compression-bc'],\n  'bc5-rg-unorm':         [            ,        ,        ,          ,          ,          ,          ,              16,            4,             4, 'texture-compression-bc'],\n  'bc5-rg-snorm':         [            ,        ,        ,          ,          ,          ,          ,              16,            4,             4, 'texture-compression-bc'],\n  'bc6h-rgb-ufloat':      [            ,        ,        ,          ,          ,          ,          ,              16,            4,             4, 'texture-compression-bc'],\n  'bc6h-rgb-float':       [            ,        ,        ,          ,          ,          ,          ,              16,            4,             4, 'texture-compression-bc'],\n  'bc7-rgba-unorm':       [            ,        ,        ,          ,          ,          ,          ,              16,            4,             4, 'texture-compression-bc'],\n  'bc7-rgba-unorm-srgb':  [            ,        ,        ,          ,          ,          ,          ,              16,            4,             4, 'texture-compression-bc'],\n} as const);\n\nexport const kRegularTextureFormats = keysOf(kRegularTextureFormatInfo);\nexport const kSizedDepthStencilFormats = keysOf(kSizedDepthStencilFormatInfo);\nexport const kUnsizedDepthStencilFormats = keysOf(kUnsizedDepthStencilFormatInfo);\nexport const kCompressedTextureFormats = keysOf(kCompressedTextureFormatInfo);\n\nexport const kColorTextureFormatInfo = {\n  ...kRegularTextureFormatInfo,\n  ...kCompressedTextureFormatInfo,\n} as const;\nexport type ColorTextureFormat = keyof typeof kColorTextureFormatInfo;\nexport const kColorTextureFormats = keysOf(kColorTextureFormatInfo);\n\nexport const kEncodableTextureFormatInfo = {\n  ...kRegularTextureFormatInfo,\n  ...kSizedDepthStencilFormatInfo,\n} as const;\nexport type EncodableTextureFormat = keyof typeof kEncodableTextureFormatInfo;\nexport const kEncodableTextureFormats = keysOf(kEncodableTextureFormatInfo);\n\nexport const kSizedTextureFormatInfo = {\n  ...kRegularTextureFormatInfo,\n  ...kSizedDepthStencilFormatInfo,\n  ...kCompressedTextureFormatInfo,\n} as const;\nexport type SizedTextureFormat = keyof typeof kSizedTextureFormatInfo;\nexport const kSizedTextureFormats = keysOf(kSizedTextureFormatInfo);\n\nexport const kDepthStencilFormatInfo = {\n  ...kSizedDepthStencilFormatInfo,\n  ...kUnsizedDepthStencilFormatInfo,\n} as const;\nexport type DepthStencilFormat = keyof typeof kDepthStencilFormatInfo;\nexport const kDepthStencilFormats = keysOf(kDepthStencilFormatInfo);\n\nexport const kUncompressedTextureFormatInfo = {\n  ...kRegularTextureFormatInfo,\n  ...kSizedDepthStencilFormatInfo,\n  ...kUnsizedDepthStencilFormatInfo,\n} as const;\nexport type UncompressedTextureFormat = keyof typeof kUncompressedTextureFormatInfo;\nexport const kUncompressedTextureFormats = keysOf(kUncompressedTextureFormatInfo);\n\nexport const kAllTextureFormatInfo = {\n  ...kUncompressedTextureFormatInfo,\n  ...kCompressedTextureFormatInfo,\n} as const;\nexport const kAllTextureFormats = keysOf(kAllTextureFormatInfo);\n// Assert every GPUTextureFormat is covered by one of the tables.\n((x: { readonly [k in GPUTextureFormat]: {} }) => x)(kAllTextureFormatInfo);\n\nexport const kTextureDimensionInfo: {\n  readonly [k in GPUTextureDimension]: {\n    // Add fields as needed\n  };\n} = /* prettier-ignore */ {\n  '1d': {},\n  '2d': {},\n  '3d': {},\n};\nexport const kTextureDimensions = keysOf(kTextureDimensionInfo);\n\nexport const kTextureAspectInfo: {\n  readonly [k in GPUTextureAspect]: {\n    // Add fields as needed\n  };\n} = /* prettier-ignore */ {\n  'all': {},\n  'depth-only': {},\n  'stencil-only': {},\n};\nexport const kTextureAspects = keysOf(kTextureAspectInfo);\n\nexport const kTextureUsageInfo: {\n  readonly [k in GPUTextureUsage]: {};\n} = {\n  [GPUConst.TextureUsage.COPY_SRC]: {},\n  [GPUConst.TextureUsage.COPY_DST]: {},\n  [GPUConst.TextureUsage.SAMPLED]: {},\n  [GPUConst.TextureUsage.STORAGE]: {},\n  [GPUConst.TextureUsage.OUTPUT_ATTACHMENT]: {},\n};\nexport const kTextureUsages = numericKeysOf<GPUTextureUsage>(kTextureUsageInfo);\n\nexport const kTextureComponentTypeInfo: {\n  readonly [k in GPUTextureComponentType]: {\n    // Add fields as needed\n  };\n} = /* prettier-ignore */ {\n  'float': {},\n  'sint': {},\n  'uint': {},\n  'depth-comparison': {},\n};\nexport const kTextureComponentTypes = keysOf(kTextureComponentTypeInfo);\n\n// Texture View\n\nexport const kTextureViewDimensionInfo: {\n  readonly [k in GPUTextureViewDimension]: {\n    readonly storage: boolean;\n    // Add fields as needed\n  };\n} = /* prettier-ignore */ {\n  '1d':         { storage: true  },\n  '2d':         { storage: true  },\n  '2d-array':   { storage: true  },\n  'cube':       { storage: false },\n  'cube-array': { storage: false },\n  '3d':         { storage: true  },\n};\nexport const kTextureViewDimensions = keysOf(kTextureViewDimensionInfo);\n\n// Typedefs for bindings\n\nexport type PerStageBindingLimitClass =\n  | 'uniformBuf'\n  | 'storageBuf'\n  | 'sampler'\n  | 'sampledTex'\n  | 'storageTex';\nexport type PerPipelineBindingLimitClass = PerStageBindingLimitClass;\n\ntype ValidBindableResource =\n  | 'uniformBuf'\n  | 'storageBuf'\n  | 'plainSamp'\n  | 'compareSamp'\n  | 'sampledTex'\n  | 'sampledTexMS'\n  | 'storageTex';\ntype ErrorBindableResource = 'errorBuf' | 'errorSamp' | 'errorTex';\nexport type BindableResource = ValidBindableResource | ErrorBindableResource;\n\ntype BufferBindingType = 'uniform-buffer' | 'storage-buffer' | 'readonly-storage-buffer';\ntype SamplerBindingType = 'sampler' | 'comparison-sampler';\ntype TextureBindingType =\n  | 'sampled-texture'\n  | 'multisampled-texture'\n  | 'writeonly-storage-texture'\n  | 'readonly-storage-texture';\n\n// Bindings\n\nexport const kMaxBindingsPerBindGroup = 16;\n\nexport const kPerStageBindingLimits: {\n  readonly [k in PerStageBindingLimitClass]: {\n    readonly class: k;\n    readonly max: number;\n    // Add fields as needed\n  };\n} = /* prettier-ignore */ {\n  'uniformBuf': { class: 'uniformBuf', max: 12, },\n  'storageBuf': { class: 'storageBuf', max:  4, },\n  'sampler':    { class: 'sampler',    max: 16, },\n  'sampledTex': { class: 'sampledTex', max: 16, },\n  'storageTex': { class: 'storageTex', max:  4, },\n};\n\nexport const kPerPipelineBindingLimits: {\n  readonly [k in PerPipelineBindingLimitClass]: {\n    readonly class: k;\n    readonly maxDynamic: number;\n    // Add fields as needed\n  };\n} = /* prettier-ignore */ {\n  'uniformBuf': { class: 'uniformBuf', maxDynamic: 8, },\n  'storageBuf': { class: 'storageBuf', maxDynamic: 4, },\n  'sampler':    { class: 'sampler',    maxDynamic: 0, },\n  'sampledTex': { class: 'sampledTex', maxDynamic: 0, },\n  'storageTex': { class: 'storageTex', maxDynamic: 0, },\n};\n\nconst kBindableResource: {\n  readonly [k in BindableResource]: {};\n} = /* prettier-ignore */ {\n  uniformBuf:   {},\n  storageBuf:   {},\n  plainSamp:    {},\n  compareSamp:  {},\n  sampledTex:   {},\n  sampledTexMS: {},\n  storageTex:   {},\n  errorBuf:     {},\n  errorSamp:    {},\n  errorTex:     {},\n};\nexport const kBindableResources = keysOf(kBindableResource);\n\ninterface BindingKindInfo {\n  readonly resource: ValidBindableResource;\n  readonly perStageLimitClass: typeof kPerStageBindingLimits[PerStageBindingLimitClass];\n  readonly perPipelineLimitClass: typeof kPerPipelineBindingLimits[PerPipelineBindingLimitClass];\n  // Add fields as needed\n}\n\nconst kBindingKind: {\n  readonly [k in ValidBindableResource]: BindingKindInfo;\n} = /* prettier-ignore */ {\n  uniformBuf:   { resource: 'uniformBuf',   perStageLimitClass: kPerStageBindingLimits.uniformBuf, perPipelineLimitClass: kPerPipelineBindingLimits.uniformBuf, },\n  storageBuf:   { resource: 'storageBuf',   perStageLimitClass: kPerStageBindingLimits.storageBuf, perPipelineLimitClass: kPerPipelineBindingLimits.storageBuf, },\n  plainSamp:    { resource: 'plainSamp',    perStageLimitClass: kPerStageBindingLimits.sampler,    perPipelineLimitClass: kPerPipelineBindingLimits.sampler,    },\n  compareSamp:  { resource: 'compareSamp',  perStageLimitClass: kPerStageBindingLimits.sampler,    perPipelineLimitClass: kPerPipelineBindingLimits.sampler,    },\n  sampledTex:   { resource: 'sampledTex',   perStageLimitClass: kPerStageBindingLimits.sampledTex, perPipelineLimitClass: kPerPipelineBindingLimits.sampledTex, },\n  sampledTexMS: { resource: 'sampledTexMS', perStageLimitClass: kPerStageBindingLimits.sampledTex, perPipelineLimitClass: kPerPipelineBindingLimits.sampledTex, },\n  storageTex:   { resource: 'storageTex',   perStageLimitClass: kPerStageBindingLimits.storageTex, perPipelineLimitClass: kPerPipelineBindingLimits.storageTex, },\n};\n\n// Binding type info\n\ninterface BindingTypeInfo extends BindingKindInfo {\n  readonly validStages: GPUShaderStageFlags;\n  // Add fields as needed\n}\nconst kValidStagesAll = {\n  validStages:\n    GPUConst.ShaderStage.VERTEX | GPUConst.ShaderStage.FRAGMENT | GPUConst.ShaderStage.COMPUTE,\n};\nconst kValidStagesStorageWrite = {\n  validStages: GPUConst.ShaderStage.FRAGMENT | GPUConst.ShaderStage.COMPUTE,\n};\n\nexport const kBufferBindingTypeInfo: {\n  readonly [k in BufferBindingType]: {\n    readonly usage: GPUBufferUsage;\n    // Add fields as needed\n  } & BindingTypeInfo;\n} = /* prettier-ignore */ {\n  'uniform-buffer':          { usage: GPUConst.BufferUsage.UNIFORM, ...kBindingKind.uniformBuf,  ...kValidStagesAll,          },\n  'storage-buffer':          { usage: GPUConst.BufferUsage.STORAGE, ...kBindingKind.storageBuf,  ...kValidStagesStorageWrite, },\n  'readonly-storage-buffer': { usage: GPUConst.BufferUsage.STORAGE, ...kBindingKind.storageBuf,  ...kValidStagesAll,          },\n};\nexport const kBufferBindingTypes = keysOf(kBufferBindingTypeInfo);\n\nexport const kSamplerBindingTypeInfo: {\n  readonly [k in SamplerBindingType]: {\n    // Add fields as needed\n  } & BindingTypeInfo;\n} = /* prettier-ignore */ {\n  'sampler':                   { ...kBindingKind.plainSamp,   ...kValidStagesAll,     },\n  'comparison-sampler':        { ...kBindingKind.compareSamp, ...kValidStagesAll,     },\n};\nexport const kSamplerBindingTypes = keysOf(kSamplerBindingTypeInfo);\n\nexport const kTextureBindingTypeInfo: {\n  readonly [k in TextureBindingType]: {\n    readonly usage: GPUTextureUsage;\n    // Add fields as needed\n  } & BindingTypeInfo;\n} = /* prettier-ignore */ {\n  'sampled-texture':           { usage: GPUConst.TextureUsage.SAMPLED, ...kBindingKind.sampledTex,    ...kValidStagesAll,          },\n  'multisampled-texture':      { usage: GPUConst.TextureUsage.SAMPLED, ...kBindingKind.sampledTexMS,  ...kValidStagesAll,          },\n  'writeonly-storage-texture': { usage: GPUConst.TextureUsage.STORAGE, ...kBindingKind.storageTex,    ...kValidStagesStorageWrite, },\n  'readonly-storage-texture':  { usage: GPUConst.TextureUsage.STORAGE, ...kBindingKind.storageTex,    ...kValidStagesAll,          },\n};\nexport const kTextureBindingTypes = keysOf(kTextureBindingTypeInfo);\n\n// All binding types (merged from above)\n\nexport const kBindingTypeInfo: {\n  readonly [k in GPUBindingType]: BindingTypeInfo;\n} = {\n  ...kBufferBindingTypeInfo,\n  ...kSamplerBindingTypeInfo,\n  ...kTextureBindingTypeInfo,\n};\nexport const kBindingTypes = keysOf(kBindingTypeInfo);\n\nexport const kShaderStages: readonly GPUShaderStageFlags[] = [\n  GPUConst.ShaderStage.VERTEX,\n  GPUConst.ShaderStage.FRAGMENT,\n  GPUConst.ShaderStage.COMPUTE,\n];\nexport const kShaderStageCombinations: readonly GPUShaderStageFlags[] = [0, 1, 2, 3, 4, 5, 6, 7];\n\n// TODO: Update with all possible sample counts when defined\n// TODO: Switch existing tests to use kTextureSampleCounts\nexport const kTextureSampleCounts = [1, 4] as const;\n\n// TODO: Update maximum color attachments when defined\nexport const kMaxColorAttachments = 4;\n"],"file":"capability_info.js"}