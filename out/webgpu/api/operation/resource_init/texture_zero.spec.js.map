{"version":3,"sources":["../../../../../src/webgpu/api/operation/resource_init/texture_zero.spec.ts"],"names":["description","params","poptions","pbool","makeTestGroup","assert","unreachable","kAllTextureFormatInfo","kEncodableTextureFormatInfo","kTextureAspects","kUncompressedTextureFormatInfo","kUncompressedTextureFormats","GPUConst","GPUTest","createTextureUploadBuffer","mipSize","SubresourceRange","kTexelRepresentationInfo","UninitializeMethod","kUninitializeMethods","Object","keys","ReadMethod","kMipLevelCounts","kUninitializedMipRangesToTest","begin","end","kSampleCounts","kUninitializedSliceRangesToTest","kCreationSizes","dimension","sliceCount","InitializedState","initializedStateAsFloat","Zero","Canary","initializedStateAsUint","initializedStateAsSint","initializedStateAsColor","state","format","value","indexOf","initializedStateAsDepth","initializedStateAsStencil","getRequiredTextureUsage","sampleCount","uninitializeMethod","readMethod","usage","TextureUsage","COPY_DST","Creation","StoreOpClear","OUTPUT_ATTACHMENT","CopyToBuffer","CopyToTexture","COPY_SRC","Sample","SAMPLED","Storage","STORAGE","DepthTest","StencilTest","ColorBlending","copyDst","renderable","TextureZeroInitTest","constructor","rec","p","stateToTexelComponents","R","G","B","A","Depth","Stencil","textureWidth","width","mipLevelCount","nonPowerOfTwo","textureHeight","height","iterateUninitializedSubresources","mipRange","sliceRange","iterateInitializedSubresources","uninitialized","Array","level","length","subresources","slice","each","count","generateTextureViewDescriptorsForRendering","aspect","subresourceRange","viewDescriptor","undefined","baseMipLevel","baseArrayLayer","arrayLayerCount","initializeWithStoreOp","texture","commandEncoder","device","createCommandEncoder","color","beginRenderPass","colorAttachments","attachment","createView","storeOp","loadValue","endPass","depthStencilAttachment","depthStoreOp","depthLoadValue","stencilStoreOp","stencilLoadValue","queue","submit","finish","initializeWithCopy","firstSubresource","next","largestWidth","largestHeight","rep","texelData","Uint8Array","pack","encode","buffer","bytesPerRow","rowsPerImage","copyBufferToTexture","mipLevel","origin","x","y","z","depth","destroy","initializeTexture","discardTexture","desc","paramsBuilder","combine","unless","info","stencil","storage","filter","canaryOnCreation","canInitialize","checkContentsByBufferCopy","checkContentsByTextureCopy","checkContentsByDepthTest","checkContentsByStencilTest","checkContentsBySampling","checkContentsImpl","t","skip","g","test","fn","extension","selectDeviceOrSkipTestCase","extensions","createTexture","size"],"mappings":";AAAA;AACA,GADA,OAAO,MAAMA,WAAW,GAAI;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA,CAPO,C,CASP;AACA;;;AAGA;AACEC,MADF;AAEEC,QAFF;AAGEC,KAHF;;AAKO,gDALP;;AAOA,SAASC,aAAT,QAA8B,4CAA9B;AACA,SAASC,MAAT,EAAiBC,WAAjB,QAAoC,2CAApC;AACA;AACEC,qBADF;AAEEC,2BAFF;AAGEC,eAHF;AAIEC,8BAJF;AAKEC,2BALF;;;AAQO,6BARP;AASA,SAASC,QAAT,QAAyB,uBAAzB;AACA,SAASC,OAAT,QAAwB,sBAAxB;AACA,SAASC,yBAAT,QAA0C,iCAA1C;AACA,SAAwBC,OAAxB,EAAiCC,gBAAjC,QAAyD,sCAAzD;AACA,SAA4BC,wBAA5B,QAA4D,qCAA5D;;AAEA,WAAYC,kBAAZ,C,WAAYA,kB,GAAAA,kB,0BAAAA,kB,qCAAAA,kB,KAAAA,kB;;;;AAIZ,MAAMC,oBAAoB,GAAGC,MAAM,CAACC,IAAP,CAAYH,kBAAZ,CAA7B;;AAEA,WAAkBI,UAAlB,C,WAAkBA,U,GAAAA,U,sBAAAA,U,kCAAAA,U,oCAAAA,U,4BAAAA,U,gCAAAA,U,oCAAAA,U,2BAAAA,U,KAAAA,U;;;;;;;;;;;;AAYlB,MAAMC,eAA4B,GAAG,CAAC,CAAD,EAAI,CAAJ,CAArC;;AAEA;AACA,MAAMC,6BAAoE,GAAG;AAC3E,KAAG,CAAC,EAAEC,KAAK,EAAE,CAAT,EAAYC,GAAG,EAAE,CAAjB,EAAD,CADwE,EAChD;AAC3B,KAAG;AACD,IAAED,KAAK,EAAE,CAAT,EAAYC,GAAG,EAAE,CAAjB,EADC;AAED,IAAED,KAAK,EAAE,CAAT,EAAYC,GAAG,EAAE,CAAjB,EAFC;AAGA;AALwE,CAA7E;;AAQA;AACA,MAAMC,aAAuB,GAAG,CAAC,CAAD,EAAI,CAAJ,CAAhC;;AAEA;AACA;;;AAGA;AACA,MAAMC,+BAAwE,GAAG;AAC/E,KAAG,CAAC,EAAEH,KAAK,EAAE,CAAT,EAAYC,GAAG,EAAE,CAAjB,EAAD,CAD4E,EACpD;AAC3B,KAAG;AACD,IAAED,KAAK,EAAE,CAAT,EAAYC,GAAG,EAAE,CAAjB,EADC;AAED,IAAED,KAAK,EAAE,CAAT,EAAYC,GAAG,EAAE,CAAjB,EAFC;AAGA;AAL4E,CAAjF;;AAQA;AACA,MAAMG,cAGJ;;;AAAG;AACH;AACA,EAAEC,SAAS,EAAE,IAAb,EAAmBC,UAAU,EAAE,CAA/B,EAFG,EAEiC;AACpC,EAAED,SAAS,EAAE,IAAb,EAAmBC,UAAU,EAAE,CAA/B,EAHG,CAGiC;AACpC;AAJG,CAHL;;AAUA;AACA;AACA;AACA;AACA,WAAkBC,gBAAlB,C,WAAkBA,gB,GAAAA,gB,CAAAA,gB,2BAAAA,gB,CAAAA,gB,0BAAAA,gB,KAAAA,gB;;;;;AAKlB,MAAMC,uBAAuB,GAAG;AAC9B,GAACD,gBAAgB,CAACE,IAAlB,GAAyB,CADK;AAE9B,GAACF,gBAAgB,CAACG,MAAlB,GAA2B,CAFG,EAAhC;;;AAKA,MAAMC,sBAAsB,GAAG;AAC7B,GAACJ,gBAAgB,CAACE,IAAlB,GAAyB,CADI;AAE7B,GAACF,gBAAgB,CAACG,MAAlB,GAA2B,CAFE,EAA/B;;;AAKA,MAAME,sBAAsB,GAAG;AAC7B,GAACL,gBAAgB,CAACE,IAAlB,GAAyB,CADI;AAE7B,GAACF,gBAAgB,CAACG,MAAlB,GAA2B,CAAC,CAFC,EAA/B;;;AAKA,SAASG,uBAAT;AACEC,KADF;AAEEC,MAFF;AAGoC;AAClC,MAAIC,KAAJ;AACA,MAAID,MAAM,CAACE,OAAP,CAAe,MAAf,MAA2B,CAAC,CAAhC,EAAmC;AACjCD,IAAAA,KAAK,GAAGL,sBAAsB,CAACG,KAAD,CAA9B;AACD,GAFD,MAEO,IAAIC,MAAM,CAACE,OAAP,CAAe,MAAf,MAA2B,CAAC,CAAhC,EAAmC;AACxCD,IAAAA,KAAK,GAAGJ,sBAAsB,CAACE,KAAD,CAA9B;AACD,GAFM,MAEA;AACLE,IAAAA,KAAK,GAAGR,uBAAuB,CAACM,KAAD,CAA/B;AACD;AACD,SAAO,CAACE,KAAD,EAAQA,KAAR,EAAeA,KAAf,EAAsBA,KAAtB,CAAP;AACD;;AAED,MAAME,uBAAuB,GAAG;AAC9B,GAACX,gBAAgB,CAACE,IAAlB,GAAyB,CADK;AAE9B,GAACF,gBAAgB,CAACG,MAAlB,GAA2B,GAFG,EAAhC;;;AAKA,MAAMS,yBAAyB,GAAG;AAChC,GAACZ,gBAAgB,CAACE,IAAlB,GAAyB,CADO;AAEhC,GAACF,gBAAgB,CAACG,MAAlB,GAA2B,EAFK,EAAlC;;;AAKA,SAASU,uBAAT;AACEL,MADF;AAEEM,WAFF;AAGEC,kBAHF;AAIEC,UAJF;AAKwB;AACtB,MAAIC,KAA2B,GAAGrC,QAAQ,CAACsC,YAAT,CAAsBC,QAAxD;;AAEA,UAAQJ,kBAAR;AACE,SAAK7B,kBAAkB,CAACkC,QAAxB;AACE;AACF,SAAKlC,kBAAkB,CAACmC,YAAxB;AACEJ,MAAAA,KAAK,IAAIrC,QAAQ,CAACsC,YAAT,CAAsBI,iBAA/B;AACA;AACF;AACEhD,MAAAA,WAAW,GAPf;;;AAUA,UAAQ0C,UAAR;AACE,SAAK1B,UAAU,CAACiC,YAAhB;AACA,SAAKjC,UAAU,CAACkC,aAAhB;AACEP,MAAAA,KAAK,IAAIrC,QAAQ,CAACsC,YAAT,CAAsBO,QAA/B;AACA;AACF,SAAKnC,UAAU,CAACoC,MAAhB;AACET,MAAAA,KAAK,IAAIrC,QAAQ,CAACsC,YAAT,CAAsBS,OAA/B;AACA;AACF,SAAKrC,UAAU,CAACsC,OAAhB;AACEX,MAAAA,KAAK,IAAIrC,QAAQ,CAACsC,YAAT,CAAsBW,OAA/B;AACA;AACF,SAAKvC,UAAU,CAACwC,SAAhB;AACA,SAAKxC,UAAU,CAACyC,WAAhB;AACA,SAAKzC,UAAU,CAAC0C,aAAhB;AACEf,MAAAA,KAAK,IAAIrC,QAAQ,CAACsC,YAAT,CAAsBI,iBAA/B;AACA;AACF;AACEhD,MAAAA,WAAW,GAjBf;;;AAoBA,MAAIwC,WAAW,GAAG,CAAlB,EAAqB;AACnB;AACA;AACAG,IAAAA,KAAK,IAAIrC,QAAQ,CAACsC,YAAT,CAAsBI,iBAA/B;AACD;;AAED,MAAI,CAAC5C,8BAA8B,CAAC8B,MAAD,CAA9B,CAAuCyB,OAA5C,EAAqD;AACnD;AACA;AACA5D,IAAAA,MAAM,CAACK,8BAA8B,CAAC8B,MAAD,CAA9B,CAAuC0B,UAAxC,CAAN;AACAjB,IAAAA,KAAK,IAAIrC,QAAQ,CAACsC,YAAT,CAAsBI,iBAA/B;AACD;;AAED,SAAOL,KAAP;AACD;;AAED,OAAO,MAAMkB,mBAAN,SAAkCtD,OAAlC,CAA0C;;;;AAI/CuD,EAAAA,WAAW,CAACC,GAAD,EAAwBpE,MAAxB,EAA4C;AACrD,UAAMoE,GAAN,EAAWpE,MAAX;AACA,SAAKqE,CAAL,GAASrE,MAAT;;AAEA,UAAMsE,sBAAsB,GAAIhC,KAAD,IAA6B;AAC1D,YAAM,CAACiC,CAAD,EAAIC,CAAJ,EAAOC,CAAP,EAAUC,CAAV,IAAerC,uBAAuB,CAACC,KAAD,EAAQ,KAAK+B,CAAL,CAAO9B,MAAf,CAA5C;AACA,aAAO;AACLgC,QAAAA,CADK;AAELC,QAAAA,CAFK;AAGLC,QAAAA,CAHK;AAILC,QAAAA,CAJK;AAKLC,QAAAA,KAAK,EAAEjC,uBAAuB,CAACJ,KAAD,CALzB;AAMLsC,QAAAA,OAAO,EAAEjC,yBAAyB,CAACL,KAAD,CAN7B,EAAP;;AAQD,KAVD;;AAYA,SAAKgC,sBAAL,GAA8B;AAC5B,OAACvC,gBAAgB,CAACE,IAAlB,GAAyBqC,sBAAsB,CAACvC,gBAAgB,CAACE,IAAlB,CADnB;AAE5B,OAACF,gBAAgB,CAACG,MAAlB,GAA2BoC,sBAAsB,CAACvC,gBAAgB,CAACG,MAAlB,CAFrB,EAA9B;;AAID;;AAED,MAAI2C,YAAJ,GAA2B;AACzB,QAAIC,KAAK,GAAG,KAAK,KAAKT,CAAL,CAAOU,aAAxB;AACA,QAAI,KAAKV,CAAL,CAAOW,aAAX,EAA0B;AACxBF,MAAAA,KAAK,GAAG,IAAIA,KAAJ,GAAY,CAApB;AACD;AACD,WAAOA,KAAP;AACD;;AAED,MAAIG,aAAJ,GAA4B;AAC1B,QAAIC,MAAM,GAAG,KAAK,KAAKb,CAAL,CAAOU,aAAzB;AACA,QAAI,KAAKV,CAAL,CAAOW,aAAX,EAA0B;AACxBE,MAAAA,MAAM,GAAG,IAAIA,MAAJ,GAAa,CAAtB;AACD;AACD,WAAOA,MAAP;AACD;;AAED;AACA,GAACC,gCAAD,GAAiE;AAC/D,SAAK,MAAMC,QAAX,IAAuB7D,6BAA6B,CAAC,KAAK8C,CAAL,CAAOU,aAAR,CAApD,EAA4E;AAC1E,WAAK,MAAMM,UAAX,IAAyB1D,+BAA+B,CAAC,KAAK0C,CAAL,CAAOvC,UAAR,CAAxD,EAA6E;AAC3E,cAAM,IAAIf,gBAAJ,CAAqB,EAAEqE,QAAF,EAAYC,UAAZ,EAArB,CAAN;AACD;AACF;AACF;;AAED;AACA;AACA;AACA,GAACC,8BAAD,GAA+D;AAC7D,UAAMC,aAA0B,GAAG,IAAIC,KAAJ,CAAU,KAAKnB,CAAL,CAAOU,aAAjB,CAAnC;AACA,SAAK,IAAIU,KAAK,GAAG,CAAjB,EAAoBA,KAAK,GAAGF,aAAa,CAACG,MAA1C,EAAkD,EAAED,KAApD,EAA2D;AACzDF,MAAAA,aAAa,CAACE,KAAD,CAAb,GAAuB,IAAID,KAAJ,CAAU,KAAKnB,CAAL,CAAOvC,UAAjB,CAAvB;AACD;AACD,SAAK,MAAM6D,YAAX,IAA2B,KAAKR,gCAAL,EAA3B,EAAoE;AAClE,WAAK,MAAM,EAAEM,KAAF,EAASG,KAAT,EAAX,IAA+BD,YAAY,CAACE,IAAb,EAA/B,EAAoD;AAClDN,QAAAA,aAAa,CAACE,KAAD,CAAb,CAAqBG,KAArB,IAA8B,IAA9B;AACD;AACF;AACD,SAAK,IAAIH,KAAK,GAAG,CAAjB,EAAoBA,KAAK,GAAGF,aAAa,CAACG,MAA1C,EAAkD,EAAED,KAApD,EAA2D;AACzD,WAAK,IAAIG,KAAK,GAAG,CAAjB,EAAoBA,KAAK,GAAGL,aAAa,CAACE,KAAD,CAAb,CAAqBC,MAAjD,EAAyD,EAAEE,KAA3D,EAAkE;AAChE,YAAI,CAACL,aAAa,CAACE,KAAD,CAAb,CAAqBG,KAArB,CAAL,EAAkC;AAChC,gBAAM,IAAI7E,gBAAJ,CAAqB;AACzBqE,YAAAA,QAAQ,EAAE,EAAE5D,KAAK,EAAEiE,KAAT,EAAgBK,KAAK,EAAE,CAAvB,EADe;AAEzBT,YAAAA,UAAU,EAAE,EAAE7D,KAAK,EAAEoE,KAAT,EAAgBE,KAAK,EAAE,CAAvB,EAFa,EAArB,CAAN;;AAID;AACF;AACF;AACF;;AAED,GAACC,0CAAD;AACEC,EAAAA,MADF;AAEEC,EAAAA,gBAFF;AAGuC;AACrC,UAAMC,cAAwC,GAAG;AAC/CrE,MAAAA,SAAS,EAAE,IADoC;AAE/CmE,MAAAA,MAF+C,EAAjD;;;AAKA,QAAIC,gBAAgB,KAAKE,SAAzB,EAAoC;AAClC,aAAOD,cAAP;AACD;;AAED,SAAK,MAAM,EAAET,KAAF,EAASG,KAAT,EAAX,IAA+BK,gBAAgB,CAACJ,IAAjB,EAA/B,EAAwD;AACtD,YAAM;AACJ,WAAGK,cADC;AAEJE,QAAAA,YAAY,EAAEX,KAFV;AAGJV,QAAAA,aAAa,EAAE,CAHX;AAIJsB,QAAAA,cAAc,EAAET,KAJZ;AAKJU,QAAAA,eAAe,EAAE,CALb,EAAN;;AAOD;AACF;;AAEOC,EAAAA,qBAAR;AACEjE,EAAAA,KADF;AAEEkE,EAAAA,OAFF;AAGEP,EAAAA,gBAHF;AAIQ;AACN,UAAMQ,cAAc,GAAG,KAAKC,MAAL,CAAYC,oBAAZ,EAAvB;AACA,SAAK,MAAMT,cAAX,IAA6B,KAAKH,0CAAL;AAC3B,SAAK1B,CAAL,CAAO2B,MADoB;AAE3BC,IAAAA,gBAF2B,CAA7B;AAGG;AACD,UAAIxF,8BAA8B,CAAC,KAAK4D,CAAL,CAAO9B,MAAR,CAA9B,CAA8CqE,KAAlD,EAAyD;AACvDH,QAAAA,cAAc;AACXI,QAAAA,eADH,CACmB;AACfC,UAAAA,gBAAgB,EAAE;AAChB;AACEC,YAAAA,UAAU,EAAEP,OAAO,CAACQ,UAAR,CAAmBd,cAAnB,CADd;AAEEe,YAAAA,OAAO,EAAE,OAFX;AAGEC,YAAAA,SAAS,EAAE7E,uBAAuB,CAACC,KAAD,EAAQ,KAAK+B,CAAL,CAAO9B,MAAf,CAHpC,EADgB,CADH,EADnB;;;;AAUG4E,QAAAA,OAVH;AAWD,OAZD,MAYO;AACLV,QAAAA,cAAc;AACXI,QAAAA,eADH,CACmB;AACfC,UAAAA,gBAAgB,EAAE,EADH;AAEfM,UAAAA,sBAAsB,EAAE;AACtBL,YAAAA,UAAU,EAAEP,OAAO,CAACQ,UAAR,CAAmBd,cAAnB,CADU;AAEtBmB,YAAAA,YAAY,EAAE,OAFQ;AAGtBC,YAAAA,cAAc,EAAE5E,uBAAuB,CAACJ,KAAD,CAHjB;AAItBiF,YAAAA,cAAc,EAAE,OAJM;AAKtBC,YAAAA,gBAAgB,EAAE7E,yBAAyB,CAACL,KAAD,CALrB,EAFT,EADnB;;;AAWG6E,QAAAA,OAXH;AAYD;AACF;AACD,SAAKM,KAAL,CAAWC,MAAX,CAAkB,CAACjB,cAAc,CAACkB,MAAf,EAAD,CAAlB;AACD;;AAEOC,EAAAA,kBAAR;AACEpB,EAAAA,OADF;AAEElE,EAAAA,KAFF;AAGE2D,EAAAA,gBAHF;AAIQ;AACN7F,IAAAA,MAAM,CAAC,KAAKiE,CAAL,CAAO9B,MAAP,IAAiBhC,2BAAlB,CAAN;AACA,UAAMgC,MAAM,GAAG,KAAK8B,CAAL,CAAO9B,MAAtB;;AAEA,QAAI,KAAK8B,CAAL,CAAOxC,SAAP,KAAqB,IAArB,IAA6B,KAAKwC,CAAL,CAAOxC,SAAP,KAAqB,IAAtD,EAA4D;AAC1D;AACA;AACAxB,MAAAA,WAAW;AACZ;;AAED,UAAMwH,gBAAgB,GAAG5B,gBAAgB,CAACJ,IAAjB,GAAwBiC,IAAxB,GAA+BtF,KAAxD;AACApC,IAAAA,MAAM,CAAC,OAAOyH,gBAAP,KAA4B,WAA7B,CAAN;;AAEA,UAAM,CAACE,YAAD,EAAeC,aAAf,IAAgClH,OAAO;AAC3C,KAAC,KAAK+D,YAAN,EAAoB,KAAKI,aAAzB,CAD2C;AAE3C4C,IAAAA,gBAAgB,CAACpC,KAF0B,CAA7C;;;AAKA,UAAMwC,GAAG,GAAGjH,wBAAwB,CAACuB,MAAD,CAApC;AACA,UAAM2F,SAAS,GAAG,IAAIC,UAAJ,CAAeF,GAAG,CAACG,IAAJ,CAASH,GAAG,CAACI,MAAJ,CAAW,KAAK/D,sBAAL,CAA4BhC,KAA5B,CAAX,CAAT,CAAf,CAAlB;AACA,UAAM,EAAEgG,MAAF,EAAUC,WAAV,EAAuBC,YAAvB,KAAwC3H,yBAAyB;AACrEqH,IAAAA,SADqE;AAErE,SAAKxB,MAFgE;AAGrEnE,IAAAA,MAHqE;AAIrE,SAAK8B,CAAL,CAAOxC,SAJ8D;AAKrE,KAACkG,YAAD,EAAeC,aAAf,EAA8B,CAA9B,CALqE,CAAvE;;;AAQA,UAAMvB,cAAc,GAAG,KAAKC,MAAL,CAAYC,oBAAZ,EAAvB;;AAEA,SAAK,MAAM,EAAElB,KAAF,EAASG,KAAT,EAAX,IAA+BK,gBAAgB,CAACJ,IAAjB,EAA/B,EAAwD;AACtD,YAAM,CAACf,KAAD,EAAQI,MAAR,IAAkBpE,OAAO,CAAC,CAAC,KAAK+D,YAAN,EAAoB,KAAKI,aAAzB,CAAD,EAA0CQ,KAA1C,CAA/B;;AAEAgB,MAAAA,cAAc,CAACgC,mBAAf;AACE;AACEH,QAAAA,MADF;AAEEC,QAAAA,WAFF;AAGEC,QAAAA,YAHF,EADF;;AAME,QAAEhC,OAAF,EAAWkC,QAAQ,EAAEjD,KAArB,EAA4BkD,MAAM,EAAE,EAAEC,CAAC,EAAE,CAAL,EAAQC,CAAC,EAAE,CAAX,EAAcC,CAAC,EAAElD,KAAjB,EAApC,EANF;AAOE,QAAEd,KAAF,EAASI,MAAT,EAAiB6D,KAAK,EAAE,CAAxB,EAPF;;AASD;AACD,SAAKtB,KAAL,CAAWC,MAAX,CAAkB,CAACjB,cAAc,CAACkB,MAAf,EAAD,CAAlB;AACAW,IAAAA,MAAM,CAACU,OAAP;AACD;;AAEDC,EAAAA,iBAAiB;AACfzC,EAAAA,OADe;AAEflE,EAAAA,KAFe;AAGf2D,EAAAA,gBAHe;AAIT;AACN,QAAI,KAAK5B,CAAL,CAAOxB,WAAP,GAAqB,CAArB,IAA0B,CAACpC,8BAA8B,CAAC,KAAK4D,CAAL,CAAO9B,MAAR,CAA9B,CAA8CyB,OAA7E,EAAsF;AACpF;AACA;AACA5D,MAAAA,MAAM,CAACK,8BAA8B,CAAC,KAAK4D,CAAL,CAAO9B,MAAR,CAA9B,CAA8C0B,UAA/C,CAAN;AACA,WAAKsC,qBAAL,CAA2BjE,KAA3B,EAAkCkE,OAAlC,EAA2CP,gBAA3C;AACD,KALD,MAKO;AACL,WAAK2B,kBAAL,CAAwBpB,OAAxB,EAAiClE,KAAjC,EAAwC2D,gBAAxC;AACD;AACF;;AAEDiD,EAAAA,cAAc,CAAC1C,OAAD,EAAsBP,gBAAtB,EAAgE;AAC5E,UAAMQ,cAAc,GAAG,KAAKC,MAAL,CAAYC,oBAAZ,EAAvB;;AAEA,SAAK,MAAMwC,IAAX,IAAmB,KAAKpD,0CAAL;AACjB,SAAK1B,CAAL,CAAO2B,MADU;AAEjBC,IAAAA,gBAFiB,CAAnB;AAGG;AACD,UAAIxF,8BAA8B,CAAC,KAAK4D,CAAL,CAAO9B,MAAR,CAA9B,CAA8CqE,KAAlD,EAAyD;AACvDH,QAAAA,cAAc;AACXI,QAAAA,eADH,CACmB;AACfC,UAAAA,gBAAgB,EAAE;AAChB;AACEC,YAAAA,UAAU,EAAEP,OAAO,CAACQ,UAAR,CAAmBmC,IAAnB,CADd;AAEElC,YAAAA,OAAO,EAAE,OAFX;AAGEC,YAAAA,SAAS,EAAE,MAHb,EADgB,CADH,EADnB;;;;AAUGC,QAAAA,OAVH;AAWD,OAZD,MAYO;AACLV,QAAAA,cAAc;AACXI,QAAAA,eADH,CACmB;AACfC,UAAAA,gBAAgB,EAAE,EADH;AAEfM,UAAAA,sBAAsB,EAAE;AACtBL,YAAAA,UAAU,EAAEP,OAAO,CAACQ,UAAR,CAAmBmC,IAAnB,CADU;AAEtB9B,YAAAA,YAAY,EAAE,OAFQ;AAGtBC,YAAAA,cAAc,EAAE,MAHM;AAItBC,YAAAA,cAAc,EAAE,OAJM;AAKtBC,YAAAA,gBAAgB,EAAE,MALI,EAFT,EADnB;;;AAWGL,QAAAA,OAXH;AAYD;AACF;AACD,SAAKM,KAAL,CAAWC,MAAX,CAAkB,CAACjB,cAAc,CAACkB,MAAf,EAAD,CAAlB;AACD,GAjP8C;;;AAoPjD,MAAMyB,aAAa,GAAGpJ,MAAM;AACzBqJ,OADmB;AAElBpJ,QAAQ,CAAC,YAAD,EAAe;AACrBoB,UAAU,CAACiC,YADU;AAErBjC,UAAU,CAACkC,aAFU;AAGrBlC,UAAU,CAACoC,MAHU;AAIrBpC,UAAU,CAACwC,SAJU;AAKrBxC,UAAU,CAACyC,WALU,CAAf,CAFU;;;AAUnBuF,OAVmB,CAUXpJ,QAAQ,CAAC,QAAD,EAAWS,2BAAX,CAVG;AAWnB2I,OAXmB,CAWXpJ,QAAQ,CAAC,QAAD,EAAWO,eAAX,CAXG;AAYnB8I,MAZmB,CAYZ,CAAC,EAAEvG,UAAF,EAAcR,MAAd,EAAsByD,MAAtB,EAAD,KAAoC;AAC1C,QAAMuD,IAAI,GAAG9I,8BAA8B,CAAC8B,MAAD,CAA3C;AACA;AACA;AACGQ,IAAAA,UAAU,KAAK1B,UAAU,CAACwC,SAA1B,KAAwC,CAAC0F,IAAI,CAACR,KAAN,IAAe/C,MAAM,KAAK,cAAlE,CAAD;AACCjD,IAAAA,UAAU,KAAK1B,UAAU,CAACyC,WAA1B,KAA0C,CAACyF,IAAI,CAACC,OAAN,IAAiBxD,MAAM,KAAK,YAAtE,CADD;AAECjD,IAAAA,UAAU,KAAK1B,UAAU,CAAC0C,aAA1B,IAA2C,CAACwF,IAAI,CAAC3C,KAFlD;AAGA;AACC7D,IAAAA,UAAU,KAAK1B,UAAU,CAACoC,MAA1B,KAAqC8F,IAAI,CAACR,KAAL,IAAcQ,IAAI,CAACC,OAAxD,CAJD;AAKCxD,IAAAA,MAAM,KAAK,YAAX,IAA2B,CAACuD,IAAI,CAACR,KALlC;AAMC/C,IAAAA,MAAM,KAAK,cAAX,IAA6B,CAACuD,IAAI,CAACC,OANpC;AAOCxD,IAAAA,MAAM,KAAK,KAAX,IAAoBuD,IAAI,CAACR,KAAzB,IAAkCQ,IAAI,CAACC,OAPxC;AAQA;AACA;AACC,KAACzG,UAAU,KAAK1B,UAAU,CAACiC,YAA1B,IAA0CP,UAAU,KAAK1B,UAAU,CAACkC,aAArE;AACEhB,IAAAA,MAAM,KAAK,aAAX,IAA4BA,MAAM,KAAK,sBADzC,CAXH;;AAcD,CA7BmB;AA8BnB8G,OA9BmB,CA8BXpJ,QAAQ,CAAC,eAAD,EAAkBqB,eAAlB,CA9BG;AA+BnB+H,OA/BmB,CA+BXpJ,QAAQ,CAAC,aAAD,EAAgByB,aAAhB,CA/BG;AAgCnB4H,MAhCmB;AAiClB,CAAC,EAAEvG,UAAF,EAAcF,WAAd,EAAD;AACE;AACAA,WAAW,GAAG,CAAd;AACCE,UAAU,KAAK1B,UAAU,CAACiC,YAA1B,IAA0CP,UAAU,KAAK1B,UAAU,CAACkC,aADrE,CAnCgB;;AAsCpB;AAtCoB,CAuCnB+F,MAvCmB,CAuCZ,CAAC,EAAEzG,WAAF,EAAekC,aAAf,EAAD,KAAoClC,WAAW,GAAG,CAAd,IAAmBkC,aAAa,GAAG,CAvC3D;AAwCnBsE,OAxCmB,CAwCXpJ,QAAQ,CAAC,oBAAD,EAAuBiB,oBAAvB,CAxCG;AAyCnBmI,OAzCmB,CAyCXzH,cAzCW;AA0CpB;AA1CoB,CA2CnB0H,MA3CmB,CA2CZ,CAAC,EAAEzG,WAAF,EAAef,UAAf,EAAD,KAAiCe,WAAW,GAAG,CAAd,IAAmBf,UAAU,GAAG,CA3CrD;AA4CnBwH,MA5CmB,CA4CZ,CAAC,EAAE/G,MAAF,EAAUM,WAAV,EAAuBC,kBAAvB,EAA2CC,UAA3C,EAAD,KAA6D;AACnE,QAAMC,KAAK,GAAGJ,uBAAuB,CAACL,MAAD,EAASM,WAAT,EAAsBC,kBAAtB,EAA0CC,UAA1C,CAArC;AACA,QAAMwG,IAAI,GAAG9I,8BAA8B,CAAC8B,MAAD,CAA3C;;AAEA;AACG,KAACS,KAAK,GAAGrC,QAAQ,CAACsC,YAAT,CAAsBI,iBAA/B,MAAsD,CAAtD,IAA2D,CAACkG,IAAI,CAACtF,UAAlE;AACC,KAACjB,KAAK,GAAGrC,QAAQ,CAACsC,YAAT,CAAsBW,OAA/B,MAA4C,CAA5C,IAAiD,CAAC2F,IAAI,CAACE,OAF1D;;AAID,CApDmB;AAqDnBJ,OArDmB,CAqDXnJ,KAAK,CAAC,eAAD,CArDM;AAsDnBmJ,OAtDmB,CAsDXnJ,KAAK,CAAC,kBAAD,CAtDM;AAuDnBwJ,MAvDmB,CAuDZ,CAAC,EAAEC,gBAAF,EAAoBpH,MAApB,EAAD,KAAkC;AACxC;AACA,QAAMqH,aAAa;AACjBrH,EAAAA,MAAM,IAAIhC,2BAAV,IAAyCD,qBAAqB,CAACiC,MAAD,CAArB,CAA8B0B,UADzE;;AAGA;AACA,SAAO,CAAC0F,gBAAD,IAAqBC,aAA5B;AACD,CA9DmB,CAAtB;;;;;;;;;;;;AA0EA,SAASC,yBAAT,EAAoCC,0BAApC,QAAsE,4BAAtE;AACA;AACEC,wBADF;AAEEC,0BAFF;AAGO,+BAHP;AAIA,SAASC,uBAAT,QAAwC,gCAAxC;;AAEA,MAAMC,iBAAuD,GAAG;AAC9DzG,EAAAA,MAAM,EAAEwG,uBADsD;AAE9D3G,EAAAA,YAAY,EAAEuG,yBAFgD;AAG9DtG,EAAAA,aAAa,EAAEuG,0BAH+C;AAI9DjG,EAAAA,SAAS,EAAEkG,wBAJmD;AAK9DjG,EAAAA,WAAW,EAAEkG,0BALiD;AAM9DjG,EAAAA,aAAa,EAAEoG,CAAC,IAAIA,CAAC,CAACC,IAAF,CAAO,iBAAP,CAN0C;AAO9DzG,EAAAA,OAAO,EAAEwG,CAAC,IAAIA,CAAC,CAACC,IAAF,CAAO,iBAAP,CAPgD,EAAhE;;;AAUA,OAAO,MAAMC,CAAC,GAAGlK,aAAa,CAAC+D,mBAAD,CAAvB;;AAEPmG,CAAC,CAACC,IAAF,CAAO,+BAAP;AACGtK,MADH,CACUoJ,aADV;AAEGmB,EAFH,CAEM,MAAMJ,CAAN,IAAW;AACb,QAAMK,SAAS,GAAG/J,8BAA8B,CAAC0J,CAAC,CAACnK,MAAF,CAASuC,MAAV,CAA9B,CAAgDiI,SAAlE;AACA,MAAIA,SAAS,KAAKrE,SAAlB,EAA6B;AAC3B,UAAMgE,CAAC,CAACM,0BAAF,CAA6B;AACjCC,MAAAA,UAAU,EAAE,CAACF,SAAD,CADqB,EAA7B,CAAN;;AAGD;;AAED,QAAMxH,KAAK,GAAGJ,uBAAuB;AACnCuH,EAAAA,CAAC,CAACnK,MAAF,CAASuC,MAD0B;AAEnC4H,EAAAA,CAAC,CAACnK,MAAF,CAAS6C,WAF0B;AAGnCsH,EAAAA,CAAC,CAACnK,MAAF,CAAS8C,kBAH0B;AAInCqH,EAAAA,CAAC,CAACnK,MAAF,CAAS+C,UAJ0B,CAArC;;;AAOA,QAAMyD,OAAO,GAAG2D,CAAC,CAACzD,MAAF,CAASiE,aAAT,CAAuB;AACrCC,IAAAA,IAAI,EAAE,CAACT,CAAC,CAACtF,YAAH,EAAiBsF,CAAC,CAAClF,aAAnB,EAAkCkF,CAAC,CAACnK,MAAF,CAAS8B,UAA3C,CAD+B;AAErCS,IAAAA,MAAM,EAAE4H,CAAC,CAACnK,MAAF,CAASuC,MAFoB;AAGrCV,IAAAA,SAAS,EAAEsI,CAAC,CAACnK,MAAF,CAAS6B,SAHiB;AAIrCmB,IAAAA,KAJqC;AAKrC+B,IAAAA,aAAa,EAAEoF,CAAC,CAACnK,MAAF,CAAS+E,aALa;AAMrClC,IAAAA,WAAW,EAAEsH,CAAC,CAACnK,MAAF,CAAS6C,WANe,EAAvB,CAAhB;;;AASA,MAAIsH,CAAC,CAACnK,MAAF,CAAS2J,gBAAb,EAA+B;AAC7B;AACA,SAAK,MAAM1D,gBAAX,IAA+BkE,CAAC,CAAC7E,8BAAF,EAA/B,EAAmE;AACjE6E,MAAAA,CAAC,CAAClB,iBAAF,CAAoBzC,OAApB,EAA6BzE,gBAAgB,CAACG,MAA9C,EAAsD+D,gBAAtD;AACD;AACF;;AAED,UAAQkE,CAAC,CAACnK,MAAF,CAAS8C,kBAAjB;AACE,SAAK7B,kBAAkB,CAACkC,QAAxB;AACE;AACF,SAAKlC,kBAAkB,CAACmC,YAAxB;AACE;AACA,WAAK,MAAM6C,gBAAX,IAA+BkE,CAAC,CAAChF,gCAAF,EAA/B,EAAqE;AACnEgF,QAAAA,CAAC,CAAClB,iBAAF,CAAoBzC,OAApB,EAA6BzE,gBAAgB,CAACG,MAA9C,EAAsD+D,gBAAtD;AACD;AACD;AACA,WAAK,MAAMA,gBAAX,IAA+BkE,CAAC,CAAChF,gCAAF,EAA/B,EAAqE;AACnEgF,QAAAA,CAAC,CAACjB,cAAF,CAAiB1C,OAAjB,EAA0BP,gBAA1B;AACD;AACD;AACF;AACE5F,MAAAA,WAAW,GAdf;;;AAiBA;AACA,OAAK,MAAM4F,gBAAX,IAA+BkE,CAAC,CAAChF,gCAAF,EAA/B,EAAqE;AACnE+E,IAAAA,iBAAiB,CAACC,CAAC,CAACnK,MAAF,CAAS+C,UAAV,CAAjB;AACEoH,IAAAA,CADF;AAEEA,IAAAA,CAAC,CAACnK,MAFJ;AAGEwG,IAAAA,OAHF;AAIEzE,IAAAA,gBAAgB,CAACE,IAJnB;AAKEgE,IAAAA,gBALF;;AAOD;;AAED,MAAIkE,CAAC,CAACnK,MAAF,CAAS2J,gBAAb,EAA+B;AAC7B;AACA,SAAK,MAAM1D,gBAAX,IAA+BkE,CAAC,CAAC7E,8BAAF,EAA/B,EAAmE;AACjE4E,MAAAA,iBAAiB,CAACC,CAAC,CAACnK,MAAF,CAAS+C,UAAV,CAAjB;AACEoH,MAAAA,CADF;AAEEA,MAAAA,CAAC,CAACnK,MAFJ;AAGEwG,MAAAA,OAHF;AAIEzE,MAAAA,gBAAgB,CAACG,MAJnB;AAKE+D,MAAAA,gBALF;;AAOD;AACF;AACF,CAzEH","sourcesContent":["export const description = `\nTest uninitialized textures are initialized to zero when read.\n\nTODO:\n- 1d, 3d\n- test by sampling depth/stencil\n- test by copying out of stencil\n`;\n\n// TODO: This is a test file, it probably shouldn't export anything.\n// Everything that's exported should be moved to another file.\n\nimport { TestCaseRecorder } from '../../../../common/framework/logging/test_case_recorder.js';\nimport {\n  params,\n  poptions,\n  pbool,\n  ParamsBuilder,\n} from '../../../../common/framework/params_builder.js';\nimport { CaseParams } from '../../../../common/framework/params_utils.js';\nimport { makeTestGroup } from '../../../../common/framework/test_group.js';\nimport { assert, unreachable } from '../../../../common/framework/util/util.js';\nimport {\n  kAllTextureFormatInfo,\n  kEncodableTextureFormatInfo,\n  kTextureAspects,\n  kUncompressedTextureFormatInfo,\n  kUncompressedTextureFormats,\n  EncodableTextureFormat,\n  UncompressedTextureFormat,\n} from '../../../capability_info.js';\nimport { GPUConst } from '../../../constants.js';\nimport { GPUTest } from '../../../gpu_test.js';\nimport { createTextureUploadBuffer } from '../../../util/texture/layout.js';\nimport { BeginEndRange, mipSize, SubresourceRange } from '../../../util/texture/subresource.js';\nimport { PerTexelComponent, kTexelRepresentationInfo } from '../../../util/texture/texel_data.js';\n\nexport enum UninitializeMethod {\n  Creation = 'Creation', // The texture was just created. It is uninitialized.\n  StoreOpClear = 'StoreOpClear', // The texture was rendered to with GPUStoreOp \"clear\"\n}\nconst kUninitializeMethods = Object.keys(UninitializeMethod) as UninitializeMethod[];\n\nexport const enum ReadMethod {\n  Sample = 'Sample', // The texture is sampled from\n  CopyToBuffer = 'CopyToBuffer', // The texture is copied to a buffer\n  CopyToTexture = 'CopyToTexture', // The texture is copied to another texture\n  DepthTest = 'DepthTest', // The texture is read as a depth buffer\n  StencilTest = 'StencilTest', // The texture is read as a stencil buffer\n  ColorBlending = 'ColorBlending', // Read the texture by blending as a color attachment\n  Storage = 'Storage', // Read the texture as a storage texture\n}\n\n// Test with these mip level counts\ntype MipLevels = 1 | 5;\nconst kMipLevelCounts: MipLevels[] = [1, 5];\n\n// For each mip level count, define the mip ranges to leave uninitialized.\nconst kUninitializedMipRangesToTest: { [k in MipLevels]: BeginEndRange[] } = {\n  1: [{ begin: 0, end: 1 }], // Test the only mip\n  5: [\n    { begin: 0, end: 2 },\n    { begin: 3, end: 4 },\n  ], // Test a range and a single mip\n};\n\n// Test with these sample counts.\nconst kSampleCounts: number[] = [1, 4];\n\n// Test with these slice counts. This means the depth of a 3d texture or the number\n// or layers in a 2D or a 1D texture array.\ntype SliceCounts = 1 | 7;\n\n// For each slice count, define the slices to leave uninitialized.\nconst kUninitializedSliceRangesToTest: { [k in SliceCounts]: BeginEndRange[] } = {\n  1: [{ begin: 0, end: 1 }], // Test the only slice\n  7: [\n    { begin: 2, end: 4 },\n    { begin: 6, end: 7 },\n  ], // Test a range and a single slice\n};\n\n// Test with these combinations of texture dimension and sliceCount.\nconst kCreationSizes: Array<{\n  dimension: GPUTextureDimension;\n  sliceCount: SliceCounts;\n}> = [\n  // { dimension: '1d', sliceCount: 7 }, // TODO: 1d textures\n  { dimension: '2d', sliceCount: 1 }, // 2d textures\n  { dimension: '2d', sliceCount: 7 }, // 2d array textures\n  // { dimension: '3d', sliceCount: 7 }, // TODO: 3d textures\n];\n\n// Enums to abstract over color / depth / stencil values in textures. Depending on the texture format,\n// the data for each value may have a different representation. These enums are converted to a\n// representation such that their values can be compared. ex.) An integer is needed to upload to an\n// unsigned normalized format, but its value is read as a float in the shader.\nexport const enum InitializedState {\n  Canary, // Set on initialized subresources. It should stay the same. On discarded resources, we should observe zero.\n  Zero, // We check that uninitialized subresources are in this state when read back.\n}\n\nconst initializedStateAsFloat = {\n  [InitializedState.Zero]: 0,\n  [InitializedState.Canary]: 1,\n};\n\nconst initializedStateAsUint = {\n  [InitializedState.Zero]: 0,\n  [InitializedState.Canary]: 1,\n};\n\nconst initializedStateAsSint = {\n  [InitializedState.Zero]: 0,\n  [InitializedState.Canary]: -1,\n};\n\nfunction initializedStateAsColor(\n  state: InitializedState,\n  format: GPUTextureFormat\n): [number, number, number, number] {\n  let value;\n  if (format.indexOf('uint') !== -1) {\n    value = initializedStateAsUint[state];\n  } else if (format.indexOf('sint') !== -1) {\n    value = initializedStateAsSint[state];\n  } else {\n    value = initializedStateAsFloat[state];\n  }\n  return [value, value, value, value];\n}\n\nconst initializedStateAsDepth = {\n  [InitializedState.Zero]: 0,\n  [InitializedState.Canary]: 0.8,\n};\n\nconst initializedStateAsStencil = {\n  [InitializedState.Zero]: 0,\n  [InitializedState.Canary]: 42,\n};\n\nfunction getRequiredTextureUsage(\n  format: UncompressedTextureFormat,\n  sampleCount: number,\n  uninitializeMethod: UninitializeMethod,\n  readMethod: ReadMethod\n): GPUTextureUsageFlags {\n  let usage: GPUTextureUsageFlags = GPUConst.TextureUsage.COPY_DST;\n\n  switch (uninitializeMethod) {\n    case UninitializeMethod.Creation:\n      break;\n    case UninitializeMethod.StoreOpClear:\n      usage |= GPUConst.TextureUsage.OUTPUT_ATTACHMENT;\n      break;\n    default:\n      unreachable();\n  }\n\n  switch (readMethod) {\n    case ReadMethod.CopyToBuffer:\n    case ReadMethod.CopyToTexture:\n      usage |= GPUConst.TextureUsage.COPY_SRC;\n      break;\n    case ReadMethod.Sample:\n      usage |= GPUConst.TextureUsage.SAMPLED;\n      break;\n    case ReadMethod.Storage:\n      usage |= GPUConst.TextureUsage.STORAGE;\n      break;\n    case ReadMethod.DepthTest:\n    case ReadMethod.StencilTest:\n    case ReadMethod.ColorBlending:\n      usage |= GPUConst.TextureUsage.OUTPUT_ATTACHMENT;\n      break;\n    default:\n      unreachable();\n  }\n\n  if (sampleCount > 1) {\n    // Copies to multisampled textures are not allowed. We need OutputAttachment to initialize\n    // canary data in multisampled textures.\n    usage |= GPUConst.TextureUsage.OUTPUT_ATTACHMENT;\n  }\n\n  if (!kUncompressedTextureFormatInfo[format].copyDst) {\n    // Copies are not possible. We need OutputAttachment to initialize\n    // canary data.\n    assert(kUncompressedTextureFormatInfo[format].renderable);\n    usage |= GPUConst.TextureUsage.OUTPUT_ATTACHMENT;\n  }\n\n  return usage;\n}\n\nexport class TextureZeroInitTest extends GPUTest {\n  readonly stateToTexelComponents: { [k in InitializedState]: PerTexelComponent<number> };\n\n  private p: Params;\n  constructor(rec: TestCaseRecorder, params: CaseParams) {\n    super(rec, params);\n    this.p = params as Params;\n\n    const stateToTexelComponents = (state: InitializedState) => {\n      const [R, G, B, A] = initializedStateAsColor(state, this.p.format);\n      return {\n        R,\n        G,\n        B,\n        A,\n        Depth: initializedStateAsDepth[state],\n        Stencil: initializedStateAsStencil[state],\n      };\n    };\n\n    this.stateToTexelComponents = {\n      [InitializedState.Zero]: stateToTexelComponents(InitializedState.Zero),\n      [InitializedState.Canary]: stateToTexelComponents(InitializedState.Canary),\n    };\n  }\n\n  get textureWidth(): number {\n    let width = 1 << this.p.mipLevelCount;\n    if (this.p.nonPowerOfTwo) {\n      width = 2 * width - 1;\n    }\n    return width;\n  }\n\n  get textureHeight(): number {\n    let height = 1 << this.p.mipLevelCount;\n    if (this.p.nonPowerOfTwo) {\n      height = 2 * height - 1;\n    }\n    return height;\n  }\n\n  // Used to iterate subresources and check that their uninitialized contents are zero when accessed\n  *iterateUninitializedSubresources(): Generator<SubresourceRange> {\n    for (const mipRange of kUninitializedMipRangesToTest[this.p.mipLevelCount]) {\n      for (const sliceRange of kUninitializedSliceRangesToTest[this.p.sliceCount]) {\n        yield new SubresourceRange({ mipRange, sliceRange });\n      }\n    }\n  }\n\n  // Used to iterate and initialize other subresources not checked for zero-initialization.\n  // Zero-initialization of uninitialized subresources should not have side effects on already\n  // initialized subresources.\n  *iterateInitializedSubresources(): Generator<SubresourceRange> {\n    const uninitialized: boolean[][] = new Array(this.p.mipLevelCount);\n    for (let level = 0; level < uninitialized.length; ++level) {\n      uninitialized[level] = new Array(this.p.sliceCount);\n    }\n    for (const subresources of this.iterateUninitializedSubresources()) {\n      for (const { level, slice } of subresources.each()) {\n        uninitialized[level][slice] = true;\n      }\n    }\n    for (let level = 0; level < uninitialized.length; ++level) {\n      for (let slice = 0; slice < uninitialized[level].length; ++slice) {\n        if (!uninitialized[level][slice]) {\n          yield new SubresourceRange({\n            mipRange: { begin: level, count: 1 },\n            sliceRange: { begin: slice, count: 1 },\n          });\n        }\n      }\n    }\n  }\n\n  *generateTextureViewDescriptorsForRendering(\n    aspect: GPUTextureAspect,\n    subresourceRange?: SubresourceRange\n  ): Generator<GPUTextureViewDescriptor> {\n    const viewDescriptor: GPUTextureViewDescriptor = {\n      dimension: '2d',\n      aspect,\n    };\n\n    if (subresourceRange === undefined) {\n      return viewDescriptor;\n    }\n\n    for (const { level, slice } of subresourceRange.each()) {\n      yield {\n        ...viewDescriptor,\n        baseMipLevel: level,\n        mipLevelCount: 1,\n        baseArrayLayer: slice,\n        arrayLayerCount: 1,\n      };\n    }\n  }\n\n  private initializeWithStoreOp(\n    state: InitializedState,\n    texture: GPUTexture,\n    subresourceRange?: SubresourceRange\n  ): void {\n    const commandEncoder = this.device.createCommandEncoder();\n    for (const viewDescriptor of this.generateTextureViewDescriptorsForRendering(\n      this.p.aspect,\n      subresourceRange\n    )) {\n      if (kUncompressedTextureFormatInfo[this.p.format].color) {\n        commandEncoder\n          .beginRenderPass({\n            colorAttachments: [\n              {\n                attachment: texture.createView(viewDescriptor),\n                storeOp: 'store',\n                loadValue: initializedStateAsColor(state, this.p.format),\n              },\n            ],\n          })\n          .endPass();\n      } else {\n        commandEncoder\n          .beginRenderPass({\n            colorAttachments: [],\n            depthStencilAttachment: {\n              attachment: texture.createView(viewDescriptor),\n              depthStoreOp: 'store',\n              depthLoadValue: initializedStateAsDepth[state],\n              stencilStoreOp: 'store',\n              stencilLoadValue: initializedStateAsStencil[state],\n            },\n          })\n          .endPass();\n      }\n    }\n    this.queue.submit([commandEncoder.finish()]);\n  }\n\n  private initializeWithCopy(\n    texture: GPUTexture,\n    state: InitializedState,\n    subresourceRange: SubresourceRange\n  ): void {\n    assert(this.p.format in kEncodableTextureFormatInfo);\n    const format = this.p.format as EncodableTextureFormat;\n\n    if (this.p.dimension === '1d' || this.p.dimension === '3d') {\n      // TODO: https://github.com/gpuweb/gpuweb/issues/69\n      // Copies with 1D and 3D textures are not yet specified\n      unreachable();\n    }\n\n    const firstSubresource = subresourceRange.each().next().value;\n    assert(typeof firstSubresource !== 'undefined');\n\n    const [largestWidth, largestHeight] = mipSize(\n      [this.textureWidth, this.textureHeight],\n      firstSubresource.level\n    );\n\n    const rep = kTexelRepresentationInfo[format];\n    const texelData = new Uint8Array(rep.pack(rep.encode(this.stateToTexelComponents[state])));\n    const { buffer, bytesPerRow, rowsPerImage } = createTextureUploadBuffer(\n      texelData,\n      this.device,\n      format,\n      this.p.dimension,\n      [largestWidth, largestHeight, 1]\n    );\n\n    const commandEncoder = this.device.createCommandEncoder();\n\n    for (const { level, slice } of subresourceRange.each()) {\n      const [width, height] = mipSize([this.textureWidth, this.textureHeight], level);\n\n      commandEncoder.copyBufferToTexture(\n        {\n          buffer,\n          bytesPerRow,\n          rowsPerImage,\n        },\n        { texture, mipLevel: level, origin: { x: 0, y: 0, z: slice } },\n        { width, height, depth: 1 }\n      );\n    }\n    this.queue.submit([commandEncoder.finish()]);\n    buffer.destroy();\n  }\n\n  initializeTexture(\n    texture: GPUTexture,\n    state: InitializedState,\n    subresourceRange: SubresourceRange\n  ): void {\n    if (this.p.sampleCount > 1 || !kUncompressedTextureFormatInfo[this.p.format].copyDst) {\n      // Copies to multisampled textures not yet specified.\n      // Use a storeOp for now.\n      assert(kUncompressedTextureFormatInfo[this.p.format].renderable);\n      this.initializeWithStoreOp(state, texture, subresourceRange);\n    } else {\n      this.initializeWithCopy(texture, state, subresourceRange);\n    }\n  }\n\n  discardTexture(texture: GPUTexture, subresourceRange: SubresourceRange): void {\n    const commandEncoder = this.device.createCommandEncoder();\n\n    for (const desc of this.generateTextureViewDescriptorsForRendering(\n      this.p.aspect,\n      subresourceRange\n    )) {\n      if (kUncompressedTextureFormatInfo[this.p.format].color) {\n        commandEncoder\n          .beginRenderPass({\n            colorAttachments: [\n              {\n                attachment: texture.createView(desc),\n                storeOp: 'clear',\n                loadValue: 'load',\n              },\n            ],\n          })\n          .endPass();\n      } else {\n        commandEncoder\n          .beginRenderPass({\n            colorAttachments: [],\n            depthStencilAttachment: {\n              attachment: texture.createView(desc),\n              depthStoreOp: 'clear',\n              depthLoadValue: 'load',\n              stencilStoreOp: 'clear',\n              stencilLoadValue: 'load',\n            },\n          })\n          .endPass();\n      }\n    }\n    this.queue.submit([commandEncoder.finish()]);\n  }\n}\n\nconst paramsBuilder = params()\n  .combine(\n    poptions('readMethod', [\n      ReadMethod.CopyToBuffer,\n      ReadMethod.CopyToTexture,\n      ReadMethod.Sample,\n      ReadMethod.DepthTest,\n      ReadMethod.StencilTest,\n    ])\n  )\n  .combine(poptions('format', kUncompressedTextureFormats))\n  .combine(poptions('aspect', kTextureAspects))\n  .unless(({ readMethod, format, aspect }) => {\n    const info = kUncompressedTextureFormatInfo[format];\n    // console.log(readMethod, format, aspect, info.depth, info.stencil);\n    return (\n      (readMethod === ReadMethod.DepthTest && (!info.depth || aspect === 'stencil-only')) ||\n      (readMethod === ReadMethod.StencilTest && (!info.stencil || aspect === 'depth-only')) ||\n      (readMethod === ReadMethod.ColorBlending && !info.color) ||\n      // TODO: Test with depth/stencil sampling\n      (readMethod === ReadMethod.Sample && (info.depth || info.stencil)) ||\n      (aspect === 'depth-only' && !info.depth) ||\n      (aspect === 'stencil-only' && !info.stencil) ||\n      (aspect === 'all' && info.depth && info.stencil) ||\n      // Cannot copy from a packed depth format.\n      // TODO: Test copying out of the stencil aspect.\n      ((readMethod === ReadMethod.CopyToBuffer || readMethod === ReadMethod.CopyToTexture) &&\n        (format === 'depth24plus' || format === 'depth24plus-stencil8'))\n    );\n  })\n  .combine(poptions('mipLevelCount', kMipLevelCounts))\n  .combine(poptions('sampleCount', kSampleCounts))\n  .unless(\n    ({ readMethod, sampleCount }) =>\n      // We can only read from multisampled textures by sampling.\n      sampleCount > 1 &&\n      (readMethod === ReadMethod.CopyToBuffer || readMethod === ReadMethod.CopyToTexture)\n  )\n  // Multisampled textures may only have one mip\n  .unless(({ sampleCount, mipLevelCount }) => sampleCount > 1 && mipLevelCount > 1)\n  .combine(poptions('uninitializeMethod', kUninitializeMethods))\n  .combine(kCreationSizes)\n  // Multisampled 3D / 2D array textures not supported.\n  .unless(({ sampleCount, sliceCount }) => sampleCount > 1 && sliceCount > 1)\n  .unless(({ format, sampleCount, uninitializeMethod, readMethod }) => {\n    const usage = getRequiredTextureUsage(format, sampleCount, uninitializeMethod, readMethod);\n    const info = kUncompressedTextureFormatInfo[format];\n\n    return (\n      ((usage & GPUConst.TextureUsage.OUTPUT_ATTACHMENT) !== 0 && !info.renderable) ||\n      ((usage & GPUConst.TextureUsage.STORAGE) !== 0 && !info.storage)\n    );\n  })\n  .combine(pbool('nonPowerOfTwo'))\n  .combine(pbool('canaryOnCreation'))\n  .filter(({ canaryOnCreation, format }) => {\n    // We can only initialize the texture if it's encodable or renderable.\n    const canInitialize =\n      format in kEncodableTextureFormatInfo || kAllTextureFormatInfo[format].renderable;\n\n    // Filter out cases where we want canary values but can't initialize.\n    return !canaryOnCreation || canInitialize;\n  });\n\nexport type Params = typeof paramsBuilder extends ParamsBuilder<infer I> ? I : never;\n\nexport type CheckContents = (\n  t: TextureZeroInitTest,\n  params: Params,\n  texture: GPUTexture,\n  state: InitializedState,\n  subresourceRange: SubresourceRange\n) => void;\n\nimport { checkContentsByBufferCopy, checkContentsByTextureCopy } from './check_texture/by_copy.js';\nimport {\n  checkContentsByDepthTest,\n  checkContentsByStencilTest,\n} from './check_texture/by_ds_test.js';\nimport { checkContentsBySampling } from './check_texture/by_sampling.js';\n\nconst checkContentsImpl: { [k in ReadMethod]: CheckContents } = {\n  Sample: checkContentsBySampling,\n  CopyToBuffer: checkContentsByBufferCopy,\n  CopyToTexture: checkContentsByTextureCopy,\n  DepthTest: checkContentsByDepthTest,\n  StencilTest: checkContentsByStencilTest,\n  ColorBlending: t => t.skip('Not implemented'),\n  Storage: t => t.skip('Not implemented'),\n};\n\nexport const g = makeTestGroup(TextureZeroInitTest);\n\ng.test('uninitialized_texture_is_zero')\n  .params(paramsBuilder)\n  .fn(async t => {\n    const extension = kUncompressedTextureFormatInfo[t.params.format].extension;\n    if (extension !== undefined) {\n      await t.selectDeviceOrSkipTestCase({\n        extensions: [extension],\n      });\n    }\n\n    const usage = getRequiredTextureUsage(\n      t.params.format,\n      t.params.sampleCount,\n      t.params.uninitializeMethod,\n      t.params.readMethod\n    );\n\n    const texture = t.device.createTexture({\n      size: [t.textureWidth, t.textureHeight, t.params.sliceCount],\n      format: t.params.format,\n      dimension: t.params.dimension,\n      usage,\n      mipLevelCount: t.params.mipLevelCount,\n      sampleCount: t.params.sampleCount,\n    });\n\n    if (t.params.canaryOnCreation) {\n      // Initialize some subresources with canary values\n      for (const subresourceRange of t.iterateInitializedSubresources()) {\n        t.initializeTexture(texture, InitializedState.Canary, subresourceRange);\n      }\n    }\n\n    switch (t.params.uninitializeMethod) {\n      case UninitializeMethod.Creation:\n        break;\n      case UninitializeMethod.StoreOpClear:\n        // Initialize the rest of the resources.\n        for (const subresourceRange of t.iterateUninitializedSubresources()) {\n          t.initializeTexture(texture, InitializedState.Canary, subresourceRange);\n        }\n        // Then use a store op to discard their contents.\n        for (const subresourceRange of t.iterateUninitializedSubresources()) {\n          t.discardTexture(texture, subresourceRange);\n        }\n        break;\n      default:\n        unreachable();\n    }\n\n    // Check that all uninitialized resources are zero.\n    for (const subresourceRange of t.iterateUninitializedSubresources()) {\n      checkContentsImpl[t.params.readMethod](\n        t,\n        t.params,\n        texture,\n        InitializedState.Zero,\n        subresourceRange\n      );\n    }\n\n    if (t.params.canaryOnCreation) {\n      // Check the all other resources are unchanged.\n      for (const subresourceRange of t.iterateInitializedSubresources()) {\n        checkContentsImpl[t.params.readMethod](\n          t,\n          t.params,\n          texture,\n          InitializedState.Canary,\n          subresourceRange\n        );\n      }\n    }\n  });\n"],"file":"texture_zero.spec.js"}