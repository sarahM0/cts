{"version":3,"sources":["../../../../../../src/webgpu/api/operation/resource_init/check_texture/by_copy.ts"],"names":["assert","kEncodableTextureFormatInfo","checkContentsByBufferCopy","t","params","texture","state","subresourceRange","level","mipLevel","slice","each","dimension","format","expectSingleColor","size","textureWidth","textureHeight","layout","exp","stateToTexelComponents","checkContentsByTextureCopy","width","height","dst","device","createTexture","usage","GPUTextureUsage","COPY_DST","COPY_SRC","commandEncoder","createCommandEncoder","copyTextureToTexture","origin","x","y","z","depth","queue","submit","finish"],"mappings":"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","sourcesContent":["import { assert } from '../../../../../common/framework/util/util.js';\nimport {\n  EncodableTextureFormat,\n  kEncodableTextureFormatInfo,\n} from '../../../../capability_info.js';\nimport { CheckContents } from '../texture_zero.spec.js';\n\nexport const checkContentsByBufferCopy: CheckContents = (\n  t,\n  params,\n  texture,\n  state,\n  subresourceRange\n) => {\n  for (const { level: mipLevel, slice } of subresourceRange.each()) {\n    assert(params.dimension === '2d');\n    assert(params.format in kEncodableTextureFormatInfo);\n    const format = params.format as EncodableTextureFormat;\n\n    t.expectSingleColor(texture, format, {\n      size: [t.textureWidth, t.textureHeight, 1],\n      dimension: params.dimension,\n      slice,\n      layout: { mipLevel },\n      exp: t.stateToTexelComponents[state],\n    });\n  }\n};\n\nexport const checkContentsByTextureCopy: CheckContents = (\n  t,\n  params,\n  texture,\n  state,\n  subresourceRange\n) => {\n  for (const { level, slice } of subresourceRange.each()) {\n    assert(params.dimension === '2d');\n    assert(params.format in kEncodableTextureFormatInfo);\n    const format = params.format as EncodableTextureFormat;\n\n    const width = t.textureWidth >> level;\n    const height = t.textureHeight >> level;\n\n    const dst = t.device.createTexture({\n      size: [width, height, 1],\n      format: params.format,\n      usage: GPUTextureUsage.COPY_DST | GPUTextureUsage.COPY_SRC,\n    });\n\n    const commandEncoder = t.device.createCommandEncoder();\n    commandEncoder.copyTextureToTexture(\n      { texture, mipLevel: level, origin: { x: 0, y: 0, z: slice } },\n      { texture: dst, mipLevel: 0 },\n      { width, height, depth: 1 }\n    );\n    t.queue.submit([commandEncoder.finish()]);\n\n    t.expectSingleColor(dst, format, {\n      size: [width, height, 1],\n      exp: t.stateToTexelComponents[state],\n    });\n  }\n};\n"],"file":"by_copy.js"}