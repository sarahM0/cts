{"version":3,"sources":["../../../../../src/webgpu/api/operation/render_pipeline/alpha_to_coverage.spec.ts"],"names":["description","makeTestGroup","GPUTest","g"],"mappings":";AAAA;AACA,GADA,OAAO,MAAMA,WAAW,GAAI;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAbO,CAeP,SAASC,aAAT,QAA8B,4CAA9B;AACA,SAASC,OAAT,QAAwB,sBAAxB;;AAEA,OAAO,MAAMC,CAAC,GAAGF,aAAa,CAACC,OAAD,CAAvB","sourcesContent":["export const description = `\nTODO:\n- for sampleCount = 4, alphaToCoverageEnabled = true and various combinations of:\n    - rasterization masks\n    - increasing alpha values of the first color output including { < 0, = 0, = 1/16, = 2/16, ..., = 15/16, = 1, > 1 }\n    - alpha values of the second color output = { 0, 0.5, 1.0 }.\n- test that for a single pixel in { first, second } { color, depth, stencil } output the final sample mask is applied to it, moreover:\n    - if alpha is 0.0 or less then alpha to coverage mask is 0x0,\n    - if alpha is 1.0 or greater then alpha to coverage mask is 0xFFFFFFFF,\n    - that the number of bits in the alpha to coverage mask is non-decreasing,\n    - that the computation of alpha to coverage mask doesn't depend on any other color output than first,\n    - (not included in the spec): that once a sample is included in the alpha to coverage sample mask\n      it will be included for any alpha greater than or equal to the current value.\n`;\n\nimport { makeTestGroup } from '../../../../common/framework/test_group.js';\nimport { GPUTest } from '../../../gpu_test.js';\n\nexport const g = makeTestGroup(GPUTest);\n"],"file":"alpha_to_coverage.spec.js"}