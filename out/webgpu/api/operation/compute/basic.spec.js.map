{"version":3,"sources":["../../../../../src/webgpu/api/operation/compute/basic.spec.ts"],"names":["description","makeTestGroup","GPUTest","g","test","fn","t","data","Uint32Array","src","device","createBuffer","mappedAtCreation","size","usage","GPUBufferUsage","COPY_DST","STORAGE","getMappedRange","set","unmap","dst","COPY_SRC","pipeline","createComputePipeline","computeStage","module","createShaderModule","code","entryPoint","bg","createBindGroup","entries","binding","resource","buffer","offset","layout","getBindGroupLayout","encoder","createCommandEncoder","pass","beginComputePass","setPipeline","setBindGroup","dispatch","endPass","defaultQueue","submit","finish","expectContents","desc","unimplemented"],"mappings":";AAAA;AACA,GADA,OAAO,MAAMA,WAAW,GAAI;AAC5B;AACA,CAFO,CAIP,SAASC,aAAT,QAA8B,4CAA9B;AACA,SAASC,OAAT,QAAwB,sBAAxB;;AAEA,OAAO,MAAMC,CAAC,GAAGF,aAAa,CAACC,OAAD,CAAvB;;AAEPC,CAAC,CAACC,IAAF,CAAO,QAAP,EAAiBC,EAAjB,CAAoB,MAAMC,CAAN,IAAW;AAC7B,QAAMC,IAAI,GAAG,IAAIC,WAAJ,CAAgB,CAAC,UAAD,CAAhB,CAAb;;AAEA,QAAMC,GAAG,GAAGH,CAAC,CAACI,MAAF,CAASC,YAAT,CAAsB;AAChCC,IAAAA,gBAAgB,EAAE,IADc;AAEhCC,IAAAA,IAAI,EAAE,CAF0B;AAGhCC,IAAAA,KAAK,EAAEC,cAAc,CAACC,QAAf,GAA0BD,cAAc,CAACE,OAHhB,EAAtB,CAAZ;;AAKA,MAAIT,WAAJ,CAAgBC,GAAG,CAACS,cAAJ,EAAhB,EAAsCC,GAAtC,CAA0CZ,IAA1C;AACAE,EAAAA,GAAG,CAACW,KAAJ;;AAEA,QAAMC,GAAG,GAAGf,CAAC,CAACI,MAAF,CAASC,YAAT,CAAsB;AAChCE,IAAAA,IAAI,EAAE,CAD0B;AAEhCC,IAAAA,KAAK,EAAEC,cAAc,CAACO,QAAf,GAA0BP,cAAc,CAACE,OAFhB,EAAtB,CAAZ;;;AAKA,QAAMM,QAAQ,GAAGjB,CAAC,CAACI,MAAF,CAASc,qBAAT,CAA+B;AAC9CC,IAAAA,YAAY,EAAE;AACZC,MAAAA,MAAM,EAAEpB,CAAC,CAACI,MAAF,CAASiB,kBAAT,CAA4B;AAClCC,QAAAA,IAAI,EAAG;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAb0C,EAA5B,CADI;;AAgBZC,MAAAA,UAAU,EAAE,MAhBA,EADgC,EAA/B,CAAjB;;;;AAqBA,QAAMC,EAAE,GAAGxB,CAAC,CAACI,MAAF,CAASqB,eAAT,CAAyB;AAClCC,IAAAA,OAAO,EAAE;AACP,MAAEC,OAAO,EAAE,CAAX,EAAcC,QAAQ,EAAE,EAAEC,MAAM,EAAE1B,GAAV,EAAe2B,MAAM,EAAE,CAAvB,EAA0BvB,IAAI,EAAE,CAAhC,EAAxB,EADO;AAEP,MAAEoB,OAAO,EAAE,CAAX,EAAcC,QAAQ,EAAE,EAAEC,MAAM,EAAEd,GAAV,EAAee,MAAM,EAAE,CAAvB,EAA0BvB,IAAI,EAAE,CAAhC,EAAxB,EAFO,CADyB;;AAKlCwB,IAAAA,MAAM,EAAEd,QAAQ,CAACe,kBAAT,CAA4B,CAA5B,CAL0B,EAAzB,CAAX;;;AAQA,QAAMC,OAAO,GAAGjC,CAAC,CAACI,MAAF,CAAS8B,oBAAT,EAAhB;AACA,QAAMC,IAAI,GAAGF,OAAO,CAACG,gBAAR,EAAb;AACAD,EAAAA,IAAI,CAACE,WAAL,CAAiBpB,QAAjB;AACAkB,EAAAA,IAAI,CAACG,YAAL,CAAkB,CAAlB,EAAqBd,EAArB;AACAW,EAAAA,IAAI,CAACI,QAAL,CAAc,CAAd;AACAJ,EAAAA,IAAI,CAACK,OAAL;AACAxC,EAAAA,CAAC,CAACI,MAAF,CAASqC,YAAT,CAAsBC,MAAtB,CAA6B,CAACT,OAAO,CAACU,MAAR,EAAD,CAA7B;;AAEA3C,EAAAA,CAAC,CAAC4C,cAAF,CAAiB7B,GAAjB,EAAsBd,IAAtB;AACD,CAtDD;;AAwDAJ,CAAC,CAACC,IAAF,CAAO,gBAAP;AACG+C,IADH,CACS,iEADT;AAEGC,aAFH","sourcesContent":["export const description = `\nBasic command buffer compute tests.\n`;\n\nimport { makeTestGroup } from '../../../../common/framework/test_group.js';\nimport { GPUTest } from '../../../gpu_test.js';\n\nexport const g = makeTestGroup(GPUTest);\n\ng.test('memcpy').fn(async t => {\n  const data = new Uint32Array([0x01020304]);\n\n  const src = t.device.createBuffer({\n    mappedAtCreation: true,\n    size: 4,\n    usage: GPUBufferUsage.COPY_DST | GPUBufferUsage.STORAGE,\n  });\n  new Uint32Array(src.getMappedRange()).set(data);\n  src.unmap();\n\n  const dst = t.device.createBuffer({\n    size: 4,\n    usage: GPUBufferUsage.COPY_SRC | GPUBufferUsage.STORAGE,\n  });\n\n  const pipeline = t.device.createComputePipeline({\n    computeStage: {\n      module: t.device.createShaderModule({\n        code: `\n          [[block]] struct Data {\n              [[offset(0)]] value : u32;\n          };\n\n          [[group(0), binding(0)]] var<storage_buffer> src : Data;\n          [[group(0), binding(1)]] var<storage_buffer> dst : Data;\n\n          [[stage(compute)]] fn main() -> void {\n            dst.value = src.value;\n            return;\n          }\n        `,\n      }),\n      entryPoint: 'main',\n    },\n  });\n\n  const bg = t.device.createBindGroup({\n    entries: [\n      { binding: 0, resource: { buffer: src, offset: 0, size: 4 } },\n      { binding: 1, resource: { buffer: dst, offset: 0, size: 4 } },\n    ],\n    layout: pipeline.getBindGroupLayout(0),\n  });\n\n  const encoder = t.device.createCommandEncoder();\n  const pass = encoder.beginComputePass();\n  pass.setPipeline(pipeline);\n  pass.setBindGroup(0, bg);\n  pass.dispatch(1);\n  pass.endPass();\n  t.device.defaultQueue.submit([encoder.finish()]);\n\n  t.expectContents(dst, data);\n});\n\ng.test('large_dispatch')\n  .desc(`Test reasonably-sized large dispatches (see also stress tests).`)\n  .unimplemented();\n"],"file":"basic.spec.js"}