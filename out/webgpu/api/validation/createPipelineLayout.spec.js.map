{"version":3,"sources":["../../../../src/webgpu/api/validation/createPipelineLayout.spec.ts"],"names":["description","poptions","params","makeTestGroup","kBindingTypeInfo","ValidationTest","clone","descriptor","JSON","parse","stringify","g","test","desc","combine","fn","t","type","visibility","maxDynamic","perPipelineLimitClass","maxDynamicBufferBindings","binding","push","hasDynamicOffset","maxDynamicBufferBindGroupLayout","device","createBindGroupLayout","entries","goodDescriptor","goodPipelineLayoutDescriptor","bindGroupLayouts","createPipelineLayout","badDescriptor","badPipelineLayoutDescriptor","expectValidationError","bindGroupLayoutDescriptor","maxBindGroupLayouts","map"],"mappings":"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","sourcesContent":["export const description = `\ncreatePipelineLayout validation tests.\n\nTODO: review existing tests, write descriptions, and make sure tests are complete.\n`;\n\nimport { poptions, params } from '../../../common/framework/params_builder.js';\nimport { makeTestGroup } from '../../../common/framework/test_group.js';\nimport { kBindingTypeInfo } from '../../capability_info.js';\n\nimport { ValidationTest } from './validation_test.js';\n\nfunction clone<T extends GPUBindGroupLayoutDescriptor>(descriptor: T): T {\n  return JSON.parse(JSON.stringify(descriptor));\n}\n\nexport const g = makeTestGroup(ValidationTest);\n\ng.test('number_of_dynamic_buffers_exceeds_the_maximum_value')\n  .desc(\n    `TODO: describe\n\nTODO(#230): Update to enforce per-stage and per-pipeline-layout limits on BGLs as well.`\n  )\n  .params(\n    params()\n      .combine(poptions('visibility', [0, 2, 4, 6]))\n      .combine(\n        poptions('type', ['uniform-buffer', 'storage-buffer', 'readonly-storage-buffer'] as const)\n      )\n  )\n  .fn(async t => {\n    const { type, visibility } = t.params;\n    const { maxDynamic } = kBindingTypeInfo[type].perPipelineLimitClass;\n\n    const maxDynamicBufferBindings: GPUBindGroupLayoutEntry[] = [];\n    for (let binding = 0; binding < maxDynamic; binding++) {\n      maxDynamicBufferBindings.push({ binding, visibility, type, hasDynamicOffset: true });\n    }\n\n    const maxDynamicBufferBindGroupLayout = t.device.createBindGroupLayout({\n      entries: maxDynamicBufferBindings,\n    });\n\n    const goodDescriptor = {\n      entries: [{ binding: 0, visibility, type, hasDynamicOffset: false }],\n    };\n\n    const goodPipelineLayoutDescriptor = {\n      bindGroupLayouts: [\n        maxDynamicBufferBindGroupLayout,\n        t.device.createBindGroupLayout(goodDescriptor),\n      ],\n    };\n\n    // Control case\n    t.device.createPipelineLayout(goodPipelineLayoutDescriptor);\n\n    // Check dynamic buffers exceed maximum in pipeline layout.\n    const badDescriptor = clone(goodDescriptor);\n    badDescriptor.entries[0].hasDynamicOffset = true;\n\n    const badPipelineLayoutDescriptor = {\n      bindGroupLayouts: [\n        maxDynamicBufferBindGroupLayout,\n        t.device.createBindGroupLayout(badDescriptor),\n      ],\n    };\n\n    t.expectValidationError(() => {\n      t.device.createPipelineLayout(badPipelineLayoutDescriptor);\n    });\n  });\n\ng.test('number_of_bind_group_layouts_exceeds_the_maximum_value').fn(async t => {\n  const bindGroupLayoutDescriptor: GPUBindGroupLayoutDescriptor = {\n    entries: [],\n  };\n\n  // 4 is the maximum number of bind group layouts.\n  const maxBindGroupLayouts = [1, 2, 3, 4].map(() =>\n    t.device.createBindGroupLayout(bindGroupLayoutDescriptor)\n  );\n\n  const goodPipelineLayoutDescriptor = {\n    bindGroupLayouts: maxBindGroupLayouts,\n  };\n\n  // Control case\n  t.device.createPipelineLayout(goodPipelineLayoutDescriptor);\n\n  // Check bind group layouts exceed maximum in pipeline layout.\n  const badPipelineLayoutDescriptor = {\n    bindGroupLayouts: [\n      ...maxBindGroupLayouts,\n      t.device.createBindGroupLayout(bindGroupLayoutDescriptor),\n    ],\n  };\n\n  t.expectValidationError(() => {\n    t.device.createPipelineLayout(badPipelineLayoutDescriptor);\n  });\n});\n"],"file":"createPipelineLayout.spec.js"}