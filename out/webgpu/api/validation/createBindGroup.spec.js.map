{"version":3,"sources":["../../../../src/webgpu/api/validation/createBindGroup.spec.ts"],"names":["description","poptions","params","makeTestGroup","unreachable","kBindingTypes","kBindingTypeInfo","kBindableResources","kTextureUsages","kTextureBindingTypes","kTextureBindingTypeInfo","GPUConst","ValidationTest","clone","descriptor","JSON","parse","stringify","g","test","fn","t","bindGroupLayout","device","createBindGroupLayout","entries","binding","visibility","GPUShaderStage","COMPUTE","type","goodDescriptor","resource","buffer","getStorageBuffer","layout","createBindGroup","badDescriptor","expectValidationError","combine","bindingType","resourceType","info","storageTextureFormat","undefined","getBindingResource","resourceBindingMatches","unless","usage","TextureUsage","STORAGE","FRAGMENT","size","width","height","depth","format","sampleCount","createTexture","createView","shouldError","textureComponentType","GPUTextureUsage","SAMPLED","mismatchedTextureFormats","mismatchedTextureFormat","viewDimension","desc","offset","_success","createBuffer","GPUBufferUsage"],"mappings":"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","sourcesContent":["export const description = `\ncreateBindGroup validation tests.\n\nTODO: review existing tests, write descriptions, and make sure tests are complete.\n`;\n\nimport { poptions, params } from '../../../common/framework/params_builder.js';\nimport { makeTestGroup } from '../../../common/framework/test_group.js';\nimport { unreachable } from '../../../common/framework/util/util.js';\nimport {\n  kBindingTypes,\n  kBindingTypeInfo,\n  kBindableResources,\n  kTextureUsages,\n  kTextureBindingTypes,\n  kTextureBindingTypeInfo,\n} from '../../capability_info.js';\nimport { GPUConst } from '../../constants.js';\n\nimport { ValidationTest } from './validation_test.js';\n\nfunction clone<T extends GPUTextureDescriptor>(descriptor: T): T {\n  return JSON.parse(JSON.stringify(descriptor));\n}\n\nexport const g = makeTestGroup(ValidationTest);\n\ng.test('binding_count_mismatch').fn(async t => {\n  const bindGroupLayout = t.device.createBindGroupLayout({\n    entries: [{ binding: 0, visibility: GPUShaderStage.COMPUTE, type: 'storage-buffer' }],\n  });\n\n  const goodDescriptor = {\n    entries: [{ binding: 0, resource: { buffer: t.getStorageBuffer() } }],\n    layout: bindGroupLayout,\n  };\n\n  // Control case\n  t.device.createBindGroup(goodDescriptor);\n\n  // Another binding is not expected.\n  const badDescriptor = {\n    entries: [\n      { binding: 0, resource: { buffer: t.getStorageBuffer() } },\n      // Another binding is added.\n      { binding: 1, resource: { buffer: t.getStorageBuffer() } },\n    ],\n    layout: bindGroupLayout,\n  };\n\n  t.expectValidationError(() => {\n    t.device.createBindGroup(badDescriptor);\n  });\n});\n\ng.test('binding_must_be_present_in_layout').fn(async t => {\n  const bindGroupLayout = t.device.createBindGroupLayout({\n    entries: [{ binding: 0, visibility: GPUShaderStage.COMPUTE, type: 'storage-buffer' }],\n  });\n\n  const goodDescriptor = {\n    entries: [{ binding: 0, resource: { buffer: t.getStorageBuffer() } }],\n    layout: bindGroupLayout,\n  };\n\n  // Control case\n  t.device.createBindGroup(goodDescriptor);\n\n  // Binding index 0 must be present.\n  const badDescriptor = {\n    entries: [{ binding: 1, resource: { buffer: t.getStorageBuffer() } }],\n    layout: bindGroupLayout,\n  };\n\n  t.expectValidationError(() => {\n    t.device.createBindGroup(badDescriptor);\n  });\n});\n\ng.test('buffer_binding_must_contain_exactly_one_buffer_of_its_type')\n  .params(\n    params()\n      .combine(poptions('bindingType', kBindingTypes))\n      .combine(poptions('resourceType', kBindableResources))\n  )\n  .fn(t => {\n    const { bindingType, resourceType } = t.params;\n    const info = kBindingTypeInfo[bindingType];\n\n    const storageTextureFormat = info.resource === 'storageTex' ? 'rgba8unorm' : undefined;\n    const layout = t.device.createBindGroupLayout({\n      entries: [\n        { binding: 0, visibility: GPUShaderStage.COMPUTE, type: bindingType, storageTextureFormat },\n      ],\n    });\n\n    const resource = t.getBindingResource(resourceType);\n\n    const resourceBindingMatches = info.resource === resourceType;\n    t.expectValidationError(() => {\n      t.device.createBindGroup({ layout, entries: [{ binding: 0, resource }] });\n    }, !resourceBindingMatches);\n  });\n\ng.test('texture_binding_must_have_correct_usage')\n  .params(\n    params()\n      .combine(poptions('type', kTextureBindingTypes))\n      .combine(poptions('usage', kTextureUsages))\n      .unless(({ type, usage }) => {\n        const info = kTextureBindingTypeInfo[type];\n        // Can't create the texture for this (usage=STORAGE and sampleCount=4), so skip.\n        return usage === GPUConst.TextureUsage.STORAGE && info.resource === 'sampledTexMS';\n      })\n  )\n  .fn(async t => {\n    const { type, usage } = t.params;\n    const info = kTextureBindingTypeInfo[type];\n\n    const storageTextureFormat = info.resource === 'storageTex' ? 'rgba8unorm' : undefined;\n    const bindGroupLayout = t.device.createBindGroupLayout({\n      entries: [{ binding: 0, visibility: GPUShaderStage.FRAGMENT, type, storageTextureFormat }],\n    });\n\n    const descriptor = {\n      size: { width: 16, height: 16, depth: 1 },\n      format: 'rgba8unorm' as const,\n      usage,\n      sampleCount: info.resource === 'sampledTexMS' ? 4 : 1,\n    };\n    const resource = t.device.createTexture(descriptor).createView();\n\n    const shouldError = usage !== info.usage;\n    t.expectValidationError(() => {\n      t.device.createBindGroup({\n        entries: [{ binding: 0, resource }],\n        layout: bindGroupLayout,\n      });\n    }, shouldError);\n  });\n\ng.test('texture_must_have_correct_component_type')\n  .params(poptions('textureComponentType', ['float', 'sint', 'uint'] as const))\n  .fn(async t => {\n    const { textureComponentType } = t.params;\n\n    const bindGroupLayout = t.device.createBindGroupLayout({\n      entries: [\n        {\n          binding: 0,\n          visibility: GPUShaderStage.FRAGMENT,\n          type: 'sampled-texture',\n          textureComponentType,\n        },\n      ],\n    });\n\n    // TODO: Test more texture component types.\n    let format: GPUTextureFormat;\n    if (textureComponentType === 'float') {\n      format = 'r8unorm';\n    } else if (textureComponentType === 'sint') {\n      format = 'r8sint';\n    } else if (textureComponentType === 'uint') {\n      format = 'r8uint';\n    } else {\n      unreachable('Unexpected texture component type');\n    }\n\n    const goodDescriptor = {\n      size: { width: 16, height: 16, depth: 1 },\n      format,\n      usage: GPUTextureUsage.SAMPLED,\n    };\n\n    // Control case\n    t.device.createBindGroup({\n      entries: [\n        {\n          binding: 0,\n          resource: t.device.createTexture(goodDescriptor).createView(),\n        },\n      ],\n      layout: bindGroupLayout,\n    });\n\n    function* mismatchedTextureFormats(): Iterable<GPUTextureFormat> {\n      if (textureComponentType !== 'float') {\n        yield 'r8unorm';\n      }\n      if (textureComponentType !== 'sint') {\n        yield 'r8sint';\n      }\n      if (textureComponentType !== 'uint') {\n        yield 'r8uint';\n      }\n    }\n\n    // Mismatched texture binding formats are not valid.\n    for (const mismatchedTextureFormat of mismatchedTextureFormats()) {\n      const badDescriptor: GPUTextureDescriptor = clone(goodDescriptor);\n      badDescriptor.format = mismatchedTextureFormat;\n\n      t.expectValidationError(() => {\n        t.device.createBindGroup({\n          entries: [{ binding: 0, resource: t.device.createTexture(badDescriptor).createView() }],\n          layout: bindGroupLayout,\n        });\n      });\n    }\n  });\n\n// TODO: Write test for all dimensions.\ng.test('texture_must_have_correct_dimension').fn(async t => {\n  const bindGroupLayout = t.device.createBindGroupLayout({\n    entries: [\n      {\n        binding: 0,\n        visibility: GPUShaderStage.FRAGMENT,\n        type: 'sampled-texture',\n        viewDimension: '2d',\n      },\n    ],\n  });\n\n  const goodDescriptor = {\n    size: { width: 16, height: 16, depth: 1 },\n    format: 'rgba8unorm' as const,\n    usage: GPUTextureUsage.SAMPLED,\n  };\n\n  // Control case\n  t.device.createBindGroup({\n    entries: [{ binding: 0, resource: t.device.createTexture(goodDescriptor).createView() }],\n    layout: bindGroupLayout,\n  });\n\n  // Mismatched texture binding formats are not valid.\n  const badDescriptor = clone(goodDescriptor);\n  badDescriptor.size.depth = 2;\n\n  t.expectValidationError(() => {\n    t.device.createBindGroup({\n      entries: [{ binding: 0, resource: t.device.createTexture(badDescriptor).createView() }],\n      layout: bindGroupLayout,\n    });\n  });\n});\n\ng.test('buffer_offset_and_size_for_bind_groups_match')\n  .desc(\n    `TODO: describe\n\nTODO(#234): disallow zero-sized bindings`\n  )\n  .params([\n    { offset: 0, size: 512, _success: true }, // offset 0 is valid\n    { offset: 256, size: 256, _success: true }, // offset 256 (aligned) is valid\n\n    // Touching the end of the buffer\n    { offset: 0, size: 1024, _success: true },\n    { offset: 0, size: undefined, _success: true },\n    { offset: 256 * 3, size: 256, _success: true },\n    { offset: 256 * 3, size: undefined, _success: true },\n\n    // Zero-sized bindings\n    { offset: 0, size: 0, _success: true },\n    { offset: 256, size: 0, _success: true },\n    { offset: 1024, size: 0, _success: true },\n    { offset: 1024, size: undefined, _success: true },\n\n    // Unaligned buffer offset is invalid\n    { offset: 1, size: 256, _success: false },\n    { offset: 1, size: undefined, _success: false },\n    { offset: 128, size: 256, _success: false },\n    { offset: 255, size: 256, _success: false },\n\n    // Out-of-bounds\n    { offset: 256 * 5, size: 0, _success: false }, // offset is OOB\n    { offset: 0, size: 256 * 5, _success: false }, // size is OOB\n    { offset: 1024, size: 1, _success: false }, // offset+size is OOB\n  ])\n  .fn(async t => {\n    const { offset, size, _success } = t.params;\n\n    const bindGroupLayout = t.device.createBindGroupLayout({\n      entries: [{ binding: 0, visibility: GPUShaderStage.COMPUTE, type: 'storage-buffer' }],\n    });\n\n    const buffer = t.device.createBuffer({\n      size: 1024,\n      usage: GPUBufferUsage.STORAGE,\n    });\n\n    const descriptor = {\n      entries: [\n        {\n          binding: 0,\n          resource: { buffer, offset, size },\n        },\n      ],\n      layout: bindGroupLayout,\n    };\n\n    if (_success) {\n      // Control case\n      t.device.createBindGroup(descriptor);\n    } else {\n      // Buffer offset and/or size don't match in bind groups.\n      t.expectValidationError(() => {\n        t.device.createBindGroup(descriptor);\n      });\n    }\n  });\n"],"file":"createBindGroup.spec.js"}