{"version":3,"sources":["../../../../../src/webgpu/api/validation/queue/writeBuffer.spec.ts"],"names":["description","makeTestGroup","ValidationTest","g","test","desc","fn","t","queue","device","defaultQueue","runTest","arrayType","testBuffer","elementSize","BYTES_PER_ELEMENT","bufferSize","buffer","createBuffer","size","usage","GPUBufferUsage","COPY_DST","arraySm","arrayMd","arrayLg","array15","shouldThrow","writeBuffer","expectValidationError","undefined","arrayTypes","Uint8Array","Int8Array","Uint16Array","Int16Array","Uint32Array","Int32Array","Float32Array","Float64Array"],"mappings":"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","sourcesContent":["export const description = `\nTests writeBuffer validation.\n\n- buffer missing usage flag\n- bufferOffset {ok, unaligned, too large for buffer}\n- dataOffset {ok, too large for data}\n- buffer size {ok, too small for copy}\n- data size {ok, too small for copy}\n- size {aligned, unaligned}\n- size unspecified; default {ok, too large for buffer}\n\nNote: destroyed buffer is tested in destroyed/.\n\nTODO: implement usage flag validation.\nTODO: validate large write sizes that may overflow.\n`;\n\nimport { makeTestGroup } from '../../../../common/framework/test_group.js';\nimport { TypedArrayBufferView, TypedArrayBufferViewConstructor } from '../../../gpu_test.js';\nimport { ValidationTest } from '../validation_test.js';\n\nexport const g = makeTestGroup(ValidationTest);\n\ng.test('ranges')\n  .desc(\n    `\nTests that the data ranges given to GPUQueue.writeBuffer() are properly validated. Tests calling\nwriteBuffer with both TypedArrays and ArrayBuffers and checks that the data offset and size is\ninterpreted correctly for both.\n\n  - When passing a TypedArray the data offset and size is given in elements.\n  - When passing an ArrayBuffer the data offset and size is given in bytes.\n\nAlso verifies that the specified data range:\n\n  - Describes a valid range of the source buffer.\n  - Fits fully within the destination buffer.\n  - Has a byte size which is a multiple of 4.\n`\n  )\n  .fn(async t => {\n    const queue = t.device.defaultQueue;\n\n    function runTest(arrayType: TypedArrayBufferViewConstructor, testBuffer: boolean) {\n      const elementSize = arrayType.BYTES_PER_ELEMENT;\n      const bufferSize = 16 * elementSize;\n      const buffer = t.device.createBuffer({\n        size: bufferSize,\n        usage: GPUBufferUsage.COPY_DST,\n      });\n      const arraySm: TypedArrayBufferView | ArrayBuffer = testBuffer\n        ? new arrayType(8).buffer\n        : new arrayType(8);\n      const arrayMd: TypedArrayBufferView | ArrayBuffer = testBuffer\n        ? new arrayType(16).buffer\n        : new arrayType(16);\n      const arrayLg: TypedArrayBufferView | ArrayBuffer = testBuffer\n        ? new arrayType(32).buffer\n        : new arrayType(32);\n\n      if (elementSize < 4) {\n        const array15: TypedArrayBufferView | ArrayBuffer = testBuffer\n          ? new arrayType(15).buffer\n          : new arrayType(15);\n\n        // Writing the full buffer that isn't 4-byte aligned.\n        t.shouldThrow('OperationError', () => queue.writeBuffer(buffer, 0, array15));\n\n        // Writing from an offset that causes source to be 4-byte aligned.\n        queue.writeBuffer(buffer, 0, array15, 3);\n\n        // Writing from an offset that causes the source to not be 4-byte aligned.\n        t.shouldThrow('OperationError', () => queue.writeBuffer(buffer, 0, arrayMd, 3));\n\n        // Writing with a size that is not 4-byte aligned.\n        t.shouldThrow('OperationError', () => queue.writeBuffer(buffer, 0, arraySm, 0, 7));\n      }\n\n      // Writing the full buffer without offsets.\n      queue.writeBuffer(buffer, 0, arraySm);\n      queue.writeBuffer(buffer, 0, arrayMd);\n      t.expectValidationError(() => queue.writeBuffer(buffer, 0, arrayLg));\n\n      // Writing the full buffer with a 4-byte aligned offset.\n      queue.writeBuffer(buffer, 8, arraySm);\n      t.expectValidationError(() => queue.writeBuffer(buffer, 8, arrayMd));\n\n      // Writing the full buffer with a unaligned offset.\n      t.shouldThrow('OperationError', () => queue.writeBuffer(buffer, 3, arraySm));\n\n      // Writing remainder of buffer from offset.\n      queue.writeBuffer(buffer, 0, arraySm, 4);\n      queue.writeBuffer(buffer, 0, arrayMd, 4);\n      t.expectValidationError(() => queue.writeBuffer(buffer, 0, arrayLg, 4));\n\n      // Writing a larger buffer from an offset that allows it to fit in the destination.\n      queue.writeBuffer(buffer, 0, arrayLg, 16);\n\n      // Writing with both an offset and size.\n      queue.writeBuffer(buffer, 0, arraySm, 4, 4);\n\n      // Writing with a size that extends past the source buffer length.\n      t.shouldThrow('OperationError', () => queue.writeBuffer(buffer, 0, arraySm, 0, 16));\n      t.shouldThrow('OperationError', () => queue.writeBuffer(buffer, 0, arraySm, 4, 8));\n\n      // Writing with a size that is 4-byte aligned but an offset that is not.\n      queue.writeBuffer(buffer, 0, arraySm, 3, 4);\n\n      // Writing zero bytes at the end of the buffer\n      queue.writeBuffer(buffer, bufferSize, arraySm, 0, 0);\n\n      // Writing zero bytes from the end of the data\n      queue.writeBuffer(buffer, 0, arraySm, 8, 0);\n\n      // A data offset of undefined should be treated as 0\n      queue.writeBuffer(buffer, 0, arraySm, undefined, 8);\n      t.shouldThrow('OperationError', () => queue.writeBuffer(buffer, 0, arraySm, undefined, 12));\n    }\n\n    const arrayTypes = [\n      Uint8Array,\n      Uint8Array,\n      Int8Array,\n      Uint16Array,\n      Int16Array,\n      Uint32Array,\n      Int32Array,\n      Float32Array,\n      Float64Array,\n    ];\n\n    runTest(Uint8Array, true);\n\n    for (const arrayType of arrayTypes) {\n      runTest(arrayType, false);\n    }\n  });\n"],"file":"writeBuffer.spec.js"}