{"version":3,"sources":["../../../../../src/webgpu/api/validation/render_pass/resolve.spec.ts"],"names":["description","makeTestGroup","GPUConst","ValidationTest","kNumColorAttachments","g","test","desc","params","_valid","colorAttachmentSamples","resolveTargetSamples","resolveTargetUsage","TextureUsage","COPY_SRC","resolveTargetViewBaseMipLevel","resolveTargetHeight","resolveTargetWidth","resolveTargetViewMipCount","resolveTargetViewBaseArrayLayer","resolveTargetViewArrayLayerCount","otherAttachmentFormat","colorAttachmentFormat","resolveTargetFormat","colorAttachmentHeight","colorAttachmentWidth","fn","t","GPUTextureUsage","OUTPUT_ATTACHMENT","resolveSlot","renderPassColorAttachmentDescriptors","colorAttachmentSlot","resolveSourceColorAttachment","device","createTexture","format","size","width","height","depth","sampleCount","usage","resolveTarget","mipLevelCount","push","attachment","createView","loadValue","dimension","arrayLayerCount","baseMipLevel","baseArrayLayer","colorAttachment","encoder","createCommandEncoder","pass","beginRenderPass","colorAttachments","endPass","expectValidationError","finish"],"mappings":"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","sourcesContent":["export const description = `\nValidation tests for render pass resolve.\n`;\n\nimport { makeTestGroup } from '../../../../common/framework/test_group.js';\nimport { GPUConst } from '../../../constants.js';\nimport { ValidationTest } from '../validation_test.js';\n\nconst kNumColorAttachments = 4;\n\nexport const g = makeTestGroup(ValidationTest);\n\ng.test('resolve_attachment')\n  .desc(\n    `\nTest various validation behaviors when a resolveTarget is provided.\n\n- base case (valid).\n- resolve source is not multisampled.\n- resolve target is not single sampled.\n- resolve target missing OUTPUT_ATTACHMENT usage.\n- resolve target must have exactly one subresource:\n    - base mip level {0, >0}, mip level count {1, >1}.\n    - base array layer {0, >0}, array layer count {1, >1}.\n    - TODO: test zero subresources\n- resolve source and target have different formats.\n    - rgba8unorm -> {bgra8unorm, rgba8unorm-srgb}\n    - {bgra8unorm, rgba8unorm-srgb} -> rgba8unorm\n    - test with other color attachments having a different format\n- resolve source and target have different sizes.\n`\n  )\n  .params([\n    // control case should be valid\n    { _valid: true },\n    // a single sampled resolve source should cause a validation error.\n    { colorAttachmentSamples: 1, _valid: false },\n    // a multisampled resolve target should cause a validation error.\n    { resolveTargetSamples: 4, _valid: false },\n    // resolveTargetUsage without OUTPUT_ATTACHMENT usage should cause a validation error.\n    { resolveTargetUsage: GPUConst.TextureUsage.COPY_SRC, _valid: false },\n    // non-zero resolve target base mip level should be valid.\n    {\n      resolveTargetViewBaseMipLevel: 1,\n      resolveTargetHeight: 4,\n      resolveTargetWidth: 4,\n      _valid: true,\n    },\n    // a validation error should be created when mip count > 1\n    { resolveTargetViewMipCount: 2, _valid: false },\n    {\n      resolveTargetViewBaseMipLevel: 1,\n      resolveTargetViewMipCount: 2,\n      resolveTargetHeight: 4,\n      resolveTargetWidth: 4,\n      _valid: false,\n    },\n    // non-zero resolve target base array layer should be valid.\n    { resolveTargetViewBaseArrayLayer: 1, _valid: true },\n    // a validation error should be created when array layer count > 1\n    { resolveTargetViewArrayLayerCount: 2, _valid: false },\n    { resolveTargetViewBaseArrayLayer: 1, resolveTargetViewArrayLayerCount: 2, _valid: false },\n    // other color attachments resolving with a different format should be valid.\n    { otherAttachmentFormat: 'bgra8unorm', _valid: true },\n    // mismatched colorAttachment and resolveTarget formats should cause a validation error.\n    { colorAttachmentFormat: 'bgra8unorm', _valid: false },\n    { colorAttachmentFormat: 'rgba8unorm-srgb', _valid: false },\n    { resolveTargetFormat: 'bgra8unorm', _valid: false },\n    { resolveTargetFormat: 'rgba8unorm-srgb', _valid: false },\n    // mismatched colorAttachment and resolveTarget sizes should cause a validation error.\n    { colorAttachmentHeight: 4, _valid: false },\n    { colorAttachmentWidth: 4, _valid: false },\n    { resolveTargetHeight: 4, _valid: false },\n    { resolveTargetWidth: 4, _valid: false },\n  ] as const)\n  .fn(async t => {\n    const {\n      colorAttachmentFormat = 'rgba8unorm',\n      resolveTargetFormat = 'rgba8unorm',\n      otherAttachmentFormat = 'rgba8unorm',\n      colorAttachmentSamples = 4,\n      resolveTargetSamples = 1,\n      resolveTargetUsage = GPUTextureUsage.COPY_SRC | GPUTextureUsage.OUTPUT_ATTACHMENT,\n      resolveTargetViewMipCount = 1,\n      resolveTargetViewBaseMipLevel = 0,\n      resolveTargetViewArrayLayerCount = 1,\n      resolveTargetViewBaseArrayLayer = 0,\n      colorAttachmentHeight = 2,\n      colorAttachmentWidth = 2,\n      resolveTargetHeight = 2,\n      resolveTargetWidth = 2,\n      _valid,\n    } = t.params;\n\n    // Run the test in a nested loop such that the configured color attachment with resolve target\n    // is tested while occupying each individual colorAttachment slot.\n    for (let resolveSlot = 0; resolveSlot < kNumColorAttachments; resolveSlot++) {\n      const renderPassColorAttachmentDescriptors: GPURenderPassColorAttachmentDescriptor[] = [];\n      for (\n        let colorAttachmentSlot = 0;\n        colorAttachmentSlot < kNumColorAttachments;\n        colorAttachmentSlot++\n      ) {\n        // resolveSlot === colorAttachmentSlot denotes the color attachment slot that contains the color attachment with resolve\n        // target.\n        if (resolveSlot === colorAttachmentSlot) {\n          // Create the color attachment with resolve target with the configurable parameters.\n          const resolveSourceColorAttachment = t.device.createTexture({\n            format: colorAttachmentFormat,\n            size: { width: colorAttachmentWidth, height: colorAttachmentHeight, depth: 1 },\n            sampleCount: colorAttachmentSamples,\n            usage: GPUTextureUsage.COPY_SRC | GPUTextureUsage.OUTPUT_ATTACHMENT,\n          });\n\n          const resolveTarget = t.device.createTexture({\n            format: resolveTargetFormat,\n            size: {\n              width: resolveTargetWidth,\n              height: resolveTargetHeight,\n              depth: resolveTargetViewBaseArrayLayer + resolveTargetViewArrayLayerCount,\n            },\n            sampleCount: resolveTargetSamples,\n            mipLevelCount: resolveTargetViewBaseMipLevel + resolveTargetViewMipCount,\n            usage: resolveTargetUsage,\n          });\n\n          renderPassColorAttachmentDescriptors.push({\n            attachment: resolveSourceColorAttachment.createView(),\n            loadValue: 'load',\n            resolveTarget: resolveTarget.createView({\n              dimension: resolveTargetViewArrayLayerCount === 1 ? '2d' : '2d-array',\n              mipLevelCount: resolveTargetViewMipCount,\n              arrayLayerCount: resolveTargetViewArrayLayerCount,\n              baseMipLevel: resolveTargetViewBaseMipLevel,\n              baseArrayLayer: resolveTargetViewBaseArrayLayer,\n            }),\n          });\n        } else {\n          // Create a basic texture to fill other color attachment slots. This texture's dimensions\n          // and sample count must match the resolve source color attachment to be valid.\n          const colorAttachment = t.device.createTexture({\n            format: otherAttachmentFormat,\n            size: { width: colorAttachmentWidth, height: colorAttachmentHeight, depth: 1 },\n            sampleCount: colorAttachmentSamples,\n            usage: GPUTextureUsage.COPY_SRC | GPUTextureUsage.OUTPUT_ATTACHMENT,\n          });\n\n          const resolveTarget = t.device.createTexture({\n            format: otherAttachmentFormat,\n            size: {\n              width: colorAttachmentWidth,\n              height: colorAttachmentHeight,\n              depth: 1,\n            },\n            sampleCount: 1,\n            usage: GPUTextureUsage.COPY_SRC | GPUTextureUsage.OUTPUT_ATTACHMENT,\n          });\n\n          renderPassColorAttachmentDescriptors.push({\n            attachment: colorAttachment.createView(),\n            loadValue: 'load',\n            resolveTarget: resolveTarget.createView(),\n          });\n        }\n      }\n      const encoder = t.device.createCommandEncoder();\n      const pass = encoder.beginRenderPass({\n        colorAttachments: renderPassColorAttachmentDescriptors,\n      });\n      pass.endPass();\n\n      t.expectValidationError(() => {\n        encoder.finish();\n      }, !_valid);\n    }\n  });\n"],"file":"resolve.spec.js"}