{"version":3,"sources":["../../../../../../src/webgpu/api/validation/encoding/cmds/index_access.spec.ts"],"names":["description","params","poptions","pbool","makeTestGroup","ValidationTest","F","createIndexBuffer","indexArray","Uint32Array","indexBuffer","device","createBuffer","mappedAtCreation","size","byteLength","usage","GPUBufferUsage","INDEX","getMappedRange","set","unmap","createRenderPipeline","vertexStage","module","createShaderModule","code","entryPoint","fragmentStage","primitiveTopology","colorStates","format","vertexState","indexFormat","beginRenderPass","encoder","colorAttachment","createTexture","width","height","depth","GPUTextureUsage","OUTPUT_ATTACHMENT","colorAttachments","attachment","createView","loadValue","r","g","b","a","storeOp","drawIndexed","indexCount","instanceCount","firstIndex","baseVertex","firstInstance","pipeline","createCommandEncoder","pass","setPipeline","setIndexBuffer","endPass","defaultQueue","submit","finish","drawIndexedIndirect","bufferArray","indirectOffset","indirectBuffer","INDIRECT","test","combine","fn","t","indirect"],"mappings":"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","sourcesContent":["export const description = `\nindexed draws validation tests.\n\nTODO: review and make sure these notes are covered:\n> - indexed draws:\n>     - index access out of bounds (make sure this doesn't overlap with robust access)\n>         - bound index buffer **range** is {exact size, just under exact size} needed for draws with:\n>             - indexCount largeish\n>             - firstIndex {=, >} 0\n>     - x= {drawIndexed, drawIndexedIndirect}\n\nTODO: Since there are no errors here, these should be \"robustness\" operation tests (with multiple\nvalid results).\n`;\n\nimport { params, poptions, pbool } from '../../../../../common/framework/params_builder.js';\nimport { makeTestGroup } from '../../../../../common/framework/test_group.js';\nimport { ValidationTest } from '../../validation_test.js';\n\nclass F extends ValidationTest {\n  createIndexBuffer(): GPUBuffer {\n    const indexArray = new Uint32Array([0, 1, 2, 3, 1, 2]);\n\n    const indexBuffer = this.device.createBuffer({\n      mappedAtCreation: true,\n      size: indexArray.byteLength,\n      usage: GPUBufferUsage.INDEX,\n    });\n    new Uint32Array(indexBuffer.getMappedRange()).set(indexArray);\n    indexBuffer.unmap();\n\n    return indexBuffer;\n  }\n\n  createRenderPipeline(): GPURenderPipeline {\n    return this.device.createRenderPipeline({\n      vertexStage: {\n        module: this.device.createShaderModule({\n          code: `\n            [[builtin(position)]] var<out> Position : vec4<f32>;\n\n            [[stage(vertex)]] fn main() -> void {\n              Position = vec4<f32>(0.0, 0.0, 0.0, 1.0);\n              return;\n            }`,\n        }),\n        entryPoint: 'main',\n      },\n      fragmentStage: {\n        module: this.device.createShaderModule({\n          code: `\n            [[location(0)]] var<out> fragColor : vec4<f32>;\n            [[stage(fragment)]] fn main() -> void {\n              fragColor = vec4<f32>(0.0, 1.0, 0.0, 1.0);\n              return;\n            }`,\n        }),\n        entryPoint: 'main',\n      },\n      primitiveTopology: 'triangle-strip',\n      colorStates: [{ format: 'rgba8unorm' }],\n      vertexState: { indexFormat: 'uint32' },\n    });\n  }\n\n  beginRenderPass(encoder: GPUCommandEncoder) {\n    const colorAttachment = this.device.createTexture({\n      format: 'rgba8unorm',\n      size: { width: 1, height: 1, depth: 1 },\n      usage: GPUTextureUsage.OUTPUT_ATTACHMENT,\n    });\n\n    return encoder.beginRenderPass({\n      colorAttachments: [\n        {\n          attachment: colorAttachment.createView(),\n          loadValue: { r: 0.0, g: 0.0, b: 0.0, a: 1.0 },\n          storeOp: 'store',\n        },\n      ],\n    });\n  }\n\n  drawIndexed(\n    indexCount: number,\n    instanceCount: number,\n    firstIndex: number,\n    baseVertex: number,\n    firstInstance: number\n  ) {\n    const indexBuffer = this.createIndexBuffer();\n\n    const pipeline = this.createRenderPipeline();\n\n    const encoder = this.device.createCommandEncoder();\n    const pass = this.beginRenderPass(encoder);\n    pass.setPipeline(pipeline);\n    pass.setIndexBuffer(indexBuffer, 'uint32');\n    pass.drawIndexed(indexCount, instanceCount, firstIndex, baseVertex, firstInstance);\n    pass.endPass();\n\n    this.device.defaultQueue.submit([encoder.finish()]);\n  }\n\n  drawIndexedIndirect(bufferArray: Uint32Array, indirectOffset: number) {\n    const indirectBuffer = this.device.createBuffer({\n      mappedAtCreation: true,\n      size: bufferArray.byteLength,\n      usage: GPUBufferUsage.INDIRECT,\n    });\n    new Uint32Array(indirectBuffer.getMappedRange()).set(bufferArray);\n    indirectBuffer.unmap();\n\n    const indexBuffer = this.createIndexBuffer();\n\n    const pipeline = this.createRenderPipeline();\n\n    const encoder = this.device.createCommandEncoder();\n    const pass = this.beginRenderPass(encoder);\n    pass.setPipeline(pipeline);\n    pass.setIndexBuffer(indexBuffer, 'uint32');\n    pass.drawIndexedIndirect(indirectBuffer, indirectOffset);\n    pass.endPass();\n\n    this.device.defaultQueue.submit([encoder.finish()]);\n  }\n}\n\nexport const g = makeTestGroup(F);\n\ng.test('out_of_bounds')\n  .params(\n    params()\n      .combine(pbool('indirect')) // indirect drawIndexed\n      .combine([\n        { indexCount: 6, firstIndex: 1 }, // indexCount + firstIndex out of bound\n        { indexCount: 6, firstIndex: 6 }, // only firstIndex out of bound\n        { indexCount: 6, firstIndex: 10000 }, // firstIndex much larger than the bound\n        { indexCount: 7, firstIndex: 0 }, // only indexCount out of bound\n        { indexCount: 10000, firstIndex: 0 }, // indexCount much larger than the bound\n      ] as const)\n      .combine(poptions('instanceCount', [1, 10000])) // normal and large instanceCount\n  )\n  .fn(t => {\n    const { indirect, indexCount, firstIndex, instanceCount } = t.params;\n\n    if (indirect) {\n      t.drawIndexedIndirect(new Uint32Array([indexCount, instanceCount, firstIndex, 0, 0]), 0);\n    } else {\n      t.drawIndexed(indexCount, instanceCount, firstIndex, 0, 0);\n    }\n  });\n"],"file":"index_access.spec.js"}