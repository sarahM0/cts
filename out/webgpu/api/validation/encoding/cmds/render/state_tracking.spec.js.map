{"version":3,"sources":["../../../../../../../src/webgpu/api/validation/encoding/cmds/render/state_tracking.spec.ts"],"names":["description","makeTestGroup","range","ValidationTest","F","getVertexBuffer","device","createBuffer","size","usage","GPUBufferUsage","VERTEX","createRenderPipeline","bufferCount","vertexStage","module","createShaderModule","code","i","join","entryPoint","fragmentStage","primitiveTopology","colorStates","format","vertexState","vertexBuffers","arrayStride","attributes","offset","shaderLocation","beginRenderPass","commandEncoder","attachmentTexture","createTexture","width","height","depth","GPUTextureUsage","OUTPUT_ATTACHMENT","colorAttachments","attachment","createView","loadValue","r","g","b","a","test","fn","t","pipeline1","pipeline2","vertexBuffer1","vertexBuffer2","createCommandEncoder","renderPass","setPipeline","draw","endPass","expectValidationError","finish","setVertexBuffer"],"mappings":"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","sourcesContent":["export const description = `\nValidation tests for setVertexBuffer/setIndexBuffer state (not validation). See also operation tests.\n`;\n\nimport { makeTestGroup } from '../../../../../../common/framework/test_group.js';\nimport { range } from '../../../../../../common/framework/util/util.js';\nimport { ValidationTest } from '../../../validation_test.js';\n\nclass F extends ValidationTest {\n  getVertexBuffer(): GPUBuffer {\n    return this.device.createBuffer({\n      size: 256,\n      usage: GPUBufferUsage.VERTEX,\n    });\n  }\n\n  createRenderPipeline(bufferCount: number): GPURenderPipeline {\n    return this.device.createRenderPipeline({\n      vertexStage: {\n        module: this.device.createShaderModule({\n          code: `\n            ${range(\n              bufferCount,\n              i => `\\n[[location(${i})]] var<in> a_position${i} : vec3<f32>;`\n            ).join('')}\n            [[builtin(position)]] var<out> Position : vec4<f32>;\n            [[stage(vertex)]] fn main() -> void {\n              Position = vec4<f32>(0.0, 0.0, 0.0, 1.0);\n              return;\n            }`,\n        }),\n        entryPoint: 'main',\n      },\n      fragmentStage: {\n        module: this.device.createShaderModule({\n          code: `\n            [[location(0)]] var<out> fragColor : vec4<f32>;\n            [[stage(fragment)]] fn main() -> void {\n              fragColor = vec4<f32>(0.0, 1.0, 0.0, 1.0);\n              return;\n            }`,\n        }),\n        entryPoint: 'main',\n      },\n      primitiveTopology: 'triangle-list',\n      colorStates: [{ format: 'rgba8unorm' }],\n      vertexState: {\n        vertexBuffers: [\n          {\n            arrayStride: 3 * 4,\n            attributes: range(bufferCount, i => ({\n              format: 'float3',\n              offset: 0,\n              shaderLocation: i,\n            })),\n          },\n        ],\n      },\n    });\n  }\n\n  beginRenderPass(commandEncoder: GPUCommandEncoder): GPURenderPassEncoder {\n    const attachmentTexture = this.device.createTexture({\n      format: 'rgba8unorm',\n      size: { width: 16, height: 16, depth: 1 },\n      usage: GPUTextureUsage.OUTPUT_ATTACHMENT,\n    });\n\n    return commandEncoder.beginRenderPass({\n      colorAttachments: [\n        {\n          attachment: attachmentTexture.createView(),\n          loadValue: { r: 1.0, g: 0.0, b: 0.0, a: 1.0 },\n        },\n      ],\n    });\n  }\n}\n\nexport const g = makeTestGroup(F);\n\ng.test('vertex_buffers_inherit_from_previous_pipeline').fn(async t => {\n  const pipeline1 = t.createRenderPipeline(1);\n  const pipeline2 = t.createRenderPipeline(2);\n\n  const vertexBuffer1 = t.getVertexBuffer();\n  const vertexBuffer2 = t.getVertexBuffer();\n\n  {\n    // Check failure when vertex buffer is not set\n    const commandEncoder = t.device.createCommandEncoder();\n    const renderPass = t.beginRenderPass(commandEncoder);\n    renderPass.setPipeline(pipeline1);\n    renderPass.draw(3);\n    renderPass.endPass();\n\n    t.expectValidationError(() => {\n      commandEncoder.finish();\n    });\n  }\n  {\n    // Check success when vertex buffer is inherited from previous pipeline\n    const commandEncoder = t.device.createCommandEncoder();\n    const renderPass = t.beginRenderPass(commandEncoder);\n    renderPass.setPipeline(pipeline2);\n    renderPass.setVertexBuffer(0, vertexBuffer1);\n    renderPass.setVertexBuffer(1, vertexBuffer2);\n    renderPass.draw(3);\n    renderPass.setPipeline(pipeline1);\n    renderPass.draw(3);\n    renderPass.endPass();\n\n    commandEncoder.finish();\n  }\n});\n\ng.test('vertex_buffers_do_not_inherit_between_render_passes').fn(async t => {\n  const pipeline1 = t.createRenderPipeline(1);\n  const pipeline2 = t.createRenderPipeline(2);\n\n  const vertexBuffer1 = t.getVertexBuffer();\n  const vertexBuffer2 = t.getVertexBuffer();\n\n  {\n    // Check success when vertex buffer is set for each render pass\n    const commandEncoder = t.device.createCommandEncoder();\n    {\n      const renderPass = t.beginRenderPass(commandEncoder);\n      renderPass.setPipeline(pipeline2);\n      renderPass.setVertexBuffer(0, vertexBuffer1);\n      renderPass.setVertexBuffer(1, vertexBuffer2);\n      renderPass.draw(3);\n      renderPass.endPass();\n    }\n    {\n      const renderPass = t.beginRenderPass(commandEncoder);\n      renderPass.setPipeline(pipeline1);\n      renderPass.setVertexBuffer(0, vertexBuffer1);\n      renderPass.draw(3);\n      renderPass.endPass();\n    }\n    commandEncoder.finish();\n  }\n  {\n    // Check failure because vertex buffer is not inherited in second subpass\n    const commandEncoder = t.device.createCommandEncoder();\n    {\n      const renderPass = t.beginRenderPass(commandEncoder);\n      renderPass.setPipeline(pipeline2);\n      renderPass.setVertexBuffer(0, vertexBuffer1);\n      renderPass.setVertexBuffer(1, vertexBuffer2);\n      renderPass.draw(3);\n      renderPass.endPass();\n    }\n    {\n      const renderPass = t.beginRenderPass(commandEncoder);\n      renderPass.setPipeline(pipeline1);\n      renderPass.draw(3);\n      renderPass.endPass();\n    }\n\n    t.expectValidationError(() => {\n      commandEncoder.finish();\n    });\n  }\n});\n"],"file":"state_tracking.spec.js"}