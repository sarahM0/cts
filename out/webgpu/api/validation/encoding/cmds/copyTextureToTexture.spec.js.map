{"version":3,"sources":["../../../../../../src/webgpu/api/validation/encoding/cmds/copyTextureToTexture.spec.ts"],"names":["description","poptions","params","makeTestGroup","assert","kAllTextureFormatInfo","kAllTextureFormats","kCompressedTextureFormats","kDepthStencilFormats","kTextureUsages","align","ValidationTest","F","TestCopyTextureToTexture","source","destination","copySize","isSuccess","commandEncoder","device","createCommandEncoder","copyTextureToTexture","expectValidationError","finish","GetPhysicalSubresourceSize","textureSize","format","mipLevel","virtualWidthAtLevel","Math","max","width","virtualHeightAtLevel","height","physicalWidthAtLevel","blockWidth","physicalHeightAtLevel","blockHeight","depth","g","test","fn","t","validTexture","createTexture","size","usage","GPUTextureUsage","COPY_SRC","COPY_DST","errorTexture","getErrorTexture","texture","srcLevelCount","dstLevelCount","srcCopyLevel","dstCopyLevel","srcTexture","mipLevelCount","dstTexture","combine","srcUsage","dstUsage","srcSampleCount","dstSampleCount","sampleCount","x","y","z","expand","p","srcCopyOrigin","dstCopyOrigin","copyWidth","copyHeight","kWidth","kHeight","origin","srcFormat","dstFormat","extensions","srcFormatExtension","extension","undefined","push","dstFormatExtension","length","selectDeviceOrSkipTestCase","kTextureSize","copyBoxOffsets","srcTextureSize","dstTextureSize","kMipLevelCount","srcSizeAtLevel","dstSizeAtLevel","copyOrigin","min","kFormat","copyDepth","srcCopyOriginZ","dstCopyOriginZ","copyExtentDepth","kArrayLayerCount","testTexture","texelBlockWidth","texelBlockHeight","isSuccessForCompressedFormats"],"mappings":";AAAA;AACA,GADA,OAAO,MAAMA,WAAW,GAAI;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CApCO,CAsCP,SAASC,QAAT,EAAmBC,MAAnB,QAAiC,mDAAjC;AACA,SAASC,aAAT,QAA8B,+CAA9B;AACA,SAASC,MAAT,QAAuB,8CAAvB;AACA;AACEC,qBADF;AAEEC,kBAFF;AAGEC,yBAHF;AAIEC,oBAJF;AAKEC,cALF;AAMO,gCANP;AAOA,SAASC,KAAT,QAAsB,0BAAtB;AACA,SAASC,cAAT,QAA+B,0BAA/B;;AAEA,MAAMC,CAAN,SAAgBD,cAAhB,CAA+B;AAC7BE,EAAAA,wBAAwB;AACtBC,EAAAA,MADsB;AAEtBC,EAAAA,WAFsB;AAGtBC,EAAAA,QAHsB;AAItBC,EAAAA,SAJsB;AAKhB;AACN,UAAMC,cAAc,GAAG,KAAKC,MAAL,CAAYC,oBAAZ,EAAvB;AACAF,IAAAA,cAAc,CAACG,oBAAf,CAAoCP,MAApC,EAA4CC,WAA5C,EAAyDC,QAAzD;;AAEA,SAAKM,qBAAL,CAA2B,MAAM;AAC/BJ,MAAAA,cAAc,CAACK,MAAf;AACD,KAFD,EAEG,CAACN,SAFJ;AAGD;;AAEDO,EAAAA,0BAA0B;AACxBC,EAAAA,WADwB;AAExBC,EAAAA,MAFwB;AAGxBC,EAAAA,QAHwB;AAIP;AACjB,UAAMC,mBAAmB,GAAGC,IAAI,CAACC,GAAL,CAASL,WAAW,CAACM,KAAZ,IAAqBJ,QAA9B,EAAwC,CAAxC,CAA5B;AACA,UAAMK,oBAAoB,GAAGH,IAAI,CAACC,GAAL,CAASL,WAAW,CAACQ,MAAZ,IAAsBN,QAA/B,EAAyC,CAAzC,CAA7B;AACA,UAAMO,oBAAoB,GAAGxB,KAAK;AAChCkB,IAAAA,mBADgC;AAEhCvB,IAAAA,qBAAqB,CAACqB,MAAD,CAArB,CAA8BS,UAFE,CAAlC;;AAIA,UAAMC,qBAAqB,GAAG1B,KAAK;AACjCsB,IAAAA,oBADiC;AAEjC3B,IAAAA,qBAAqB,CAACqB,MAAD,CAArB,CAA8BW,WAFG,CAAnC;;AAIA,WAAO,EAAEN,KAAK,EAAEG,oBAAT,EAA+BD,MAAM,EAAEG,qBAAvC,EAA8DE,KAAK,EAAEb,WAAW,CAACa,KAAjF,EAAP;AACD,GA/B4B;;;AAkC/B,OAAO,MAAMC,CAAC,GAAGpC,aAAa,CAACS,CAAD,CAAvB;;AAEP2B,CAAC,CAACC,IAAF,CAAO,2BAAP,EAAoCC,EAApC,CAAuC,MAAMC,CAAN,IAAW;AAChD,QAAMC,YAAY,GAAGD,CAAC,CAACvB,MAAF,CAASyB,aAAT,CAAuB;AAC1CC,IAAAA,IAAI,EAAE,EAAEd,KAAK,EAAE,CAAT,EAAYE,MAAM,EAAE,CAApB,EAAuBK,KAAK,EAAE,CAA9B,EADoC;AAE1CZ,IAAAA,MAAM,EAAE,YAFkC;AAG1CoB,IAAAA,KAAK,EAAEC,eAAe,CAACC,QAAhB,GAA2BD,eAAe,CAACE,QAHR,EAAvB,CAArB;;;AAMA,QAAMC,YAAY,GAAGR,CAAC,CAACS,eAAF,EAArB;;AAEAT,EAAAA,CAAC,CAAC7B,wBAAF;AACE,IAAEuC,OAAO,EAAEF,YAAX,EADF;AAEE,IAAEE,OAAO,EAAET,YAAX,EAFF;AAGE,IAAEZ,KAAK,EAAE,CAAT,EAAYE,MAAM,EAAE,CAApB,EAAuBK,KAAK,EAAE,CAA9B,EAHF;AAIE,OAJF;;AAMAI,EAAAA,CAAC,CAAC7B,wBAAF;AACE,IAAEuC,OAAO,EAAET,YAAX,EADF;AAEE,IAAES,OAAO,EAAEF,YAAX,EAFF;AAGE,IAAEnB,KAAK,EAAE,CAAT,EAAYE,MAAM,EAAE,CAApB,EAAuBK,KAAK,EAAE,CAA9B,EAHF;AAIE,OAJF;;AAMD,CArBD;;AAuBAC,CAAC,CAACC,IAAF,CAAO,cAAP;AACGtC,MADH,CACU;AACN,EAAEmD,aAAa,EAAE,CAAjB,EAAoBC,aAAa,EAAE,CAAnC,EAAsCC,YAAY,EAAE,CAApD,EAAuDC,YAAY,EAAE,CAArE,EADM;AAEN,EAAEH,aAAa,EAAE,CAAjB,EAAoBC,aAAa,EAAE,CAAnC,EAAsCC,YAAY,EAAE,CAApD,EAAuDC,YAAY,EAAE,CAArE,EAFM;AAGN,EAAEH,aAAa,EAAE,CAAjB,EAAoBC,aAAa,EAAE,CAAnC,EAAsCC,YAAY,EAAE,CAApD,EAAuDC,YAAY,EAAE,CAArE,EAHM;AAIN,EAAEH,aAAa,EAAE,CAAjB,EAAoBC,aAAa,EAAE,CAAnC,EAAsCC,YAAY,EAAE,CAApD,EAAuDC,YAAY,EAAE,CAArE,EAJM;AAKN,EAAEH,aAAa,EAAE,CAAjB,EAAoBC,aAAa,EAAE,CAAnC,EAAsCC,YAAY,EAAE,CAApD,EAAuDC,YAAY,EAAE,CAArE,EALM;AAMN,EAAEH,aAAa,EAAE,CAAjB,EAAoBC,aAAa,EAAE,CAAnC,EAAsCC,YAAY,EAAE,CAApD,EAAuDC,YAAY,EAAE,CAArE,EANM;AAON,EAAEH,aAAa,EAAE,CAAjB,EAAoBC,aAAa,EAAE,CAAnC,EAAsCC,YAAY,EAAE,CAApD,EAAuDC,YAAY,EAAE,CAArE,EAPM;AAQN,EAAEH,aAAa,EAAE,CAAjB,EAAoBC,aAAa,EAAE,CAAnC,EAAsCC,YAAY,EAAE,CAApD,EAAuDC,YAAY,EAAE,CAArE,EARM,CADV;;AAWGf,EAXH,CAWM,MAAMC,CAAN,IAAW;AACb,QAAM,EAAEW,aAAF,EAAiBC,aAAjB,EAAgCC,YAAhC,EAA8CC,YAA9C,KAA+Dd,CAAC,CAACxC,MAAvE;;AAEA,QAAMuD,UAAU,GAAGf,CAAC,CAACvB,MAAF,CAASyB,aAAT,CAAuB;AACxCC,IAAAA,IAAI,EAAE,EAAEd,KAAK,EAAE,EAAT,EAAaE,MAAM,EAAE,EAArB,EAAyBK,KAAK,EAAE,CAAhC,EADkC;AAExCZ,IAAAA,MAAM,EAAE,YAFgC;AAGxCoB,IAAAA,KAAK,EAAEC,eAAe,CAACC,QAHiB;AAIxCU,IAAAA,aAAa,EAAEL,aAJyB,EAAvB,CAAnB;;AAMA,QAAMM,UAAU,GAAGjB,CAAC,CAACvB,MAAF,CAASyB,aAAT,CAAuB;AACxCC,IAAAA,IAAI,EAAE,EAAEd,KAAK,EAAE,EAAT,EAAaE,MAAM,EAAE,EAArB,EAAyBK,KAAK,EAAE,CAAhC,EADkC;AAExCZ,IAAAA,MAAM,EAAE,YAFgC;AAGxCoB,IAAAA,KAAK,EAAEC,eAAe,CAACE,QAHiB;AAIxCS,IAAAA,aAAa,EAAEJ,aAJyB,EAAvB,CAAnB;;;AAOA,QAAMrC,SAAS,GAAGsC,YAAY,GAAGF,aAAf,IAAgCG,YAAY,GAAGF,aAAjE;AACAZ,EAAAA,CAAC,CAAC7B,wBAAF;AACE,IAAEuC,OAAO,EAAEK,UAAX,EAAuB9B,QAAQ,EAAE4B,YAAjC,EADF;AAEE,IAAEH,OAAO,EAAEO,UAAX,EAAuBhC,QAAQ,EAAE6B,YAAjC,EAFF;AAGE,IAAEzB,KAAK,EAAE,CAAT,EAAYE,MAAM,EAAE,CAApB,EAAuBK,KAAK,EAAE,CAA9B,EAHF;AAIErB,EAAAA,SAJF;;AAMD,CAlCH;;AAoCAsB,CAAC,CAACC,IAAF,CAAO,eAAP;AACGtC,MADH;AAEIA,MAAM;AACH0D,OADH,CACW3D,QAAQ,CAAC,UAAD,EAAaQ,cAAb,CADnB;AAEGmD,OAFH,CAEW3D,QAAQ,CAAC,UAAD,EAAaQ,cAAb,CAFnB,CAFJ;;AAMGgC,EANH,CAMM,MAAMC,CAAN,IAAW;AACb,QAAM,EAAEmB,QAAF,EAAYC,QAAZ,KAAyBpB,CAAC,CAACxC,MAAjC;;AAEA,QAAMuD,UAAU,GAAGf,CAAC,CAACvB,MAAF,CAASyB,aAAT,CAAuB;AACxCC,IAAAA,IAAI,EAAE,EAAEd,KAAK,EAAE,CAAT,EAAYE,MAAM,EAAE,CAApB,EAAuBK,KAAK,EAAE,CAA9B,EADkC;AAExCZ,IAAAA,MAAM,EAAE,YAFgC;AAGxCoB,IAAAA,KAAK,EAAEe,QAHiC,EAAvB,CAAnB;;AAKA,QAAMF,UAAU,GAAGjB,CAAC,CAACvB,MAAF,CAASyB,aAAT,CAAuB;AACxCC,IAAAA,IAAI,EAAE,EAAEd,KAAK,EAAE,CAAT,EAAYE,MAAM,EAAE,CAApB,EAAuBK,KAAK,EAAE,CAA9B,EADkC;AAExCZ,IAAAA,MAAM,EAAE,YAFgC;AAGxCoB,IAAAA,KAAK,EAAEgB,QAHiC,EAAvB,CAAnB;;;AAMA,QAAM7C,SAAS;AACb4C,EAAAA,QAAQ,KAAKd,eAAe,CAACC,QAA7B,IAAyCc,QAAQ,KAAKf,eAAe,CAACE,QADxE;;AAGAP,EAAAA,CAAC,CAAC7B,wBAAF;AACE,IAAEuC,OAAO,EAAEK,UAAX,EADF;AAEE,IAAEL,OAAO,EAAEO,UAAX,EAFF;AAGE,IAAE5B,KAAK,EAAE,CAAT,EAAYE,MAAM,EAAE,CAApB,EAAuBK,KAAK,EAAE,CAA9B,EAHF;AAIErB,EAAAA,SAJF;;AAMD,CA7BH;;AA+BAsB,CAAC,CAACC,IAAF,CAAO,cAAP;AACGtC,MADH;AAEIA,MAAM;AACH0D,OADH,CACW3D,QAAQ,CAAC,gBAAD,EAAmB,CAAC,CAAD,EAAI,CAAJ,CAAnB,CADnB;AAEG2D,OAFH,CAEW3D,QAAQ,CAAC,gBAAD,EAAmB,CAAC,CAAD,EAAI,CAAJ,CAAnB,CAFnB,CAFJ;;AAMGwC,EANH,CAMM,MAAMC,CAAN,IAAW;AACb,QAAM,EAAEqB,cAAF,EAAkBC,cAAlB,KAAqCtB,CAAC,CAACxC,MAA7C;;AAEA,QAAMuD,UAAU,GAAGf,CAAC,CAACvB,MAAF,CAASyB,aAAT,CAAuB;AACxCC,IAAAA,IAAI,EAAE,EAAEd,KAAK,EAAE,CAAT,EAAYE,MAAM,EAAE,CAApB,EAAuBK,KAAK,EAAE,CAA9B,EADkC;AAExCZ,IAAAA,MAAM,EAAE,YAFgC;AAGxCoB,IAAAA,KAAK,EAAEC,eAAe,CAACC,QAHiB;AAIxCiB,IAAAA,WAAW,EAAEF,cAJ2B,EAAvB,CAAnB;;AAMA,QAAMJ,UAAU,GAAGjB,CAAC,CAACvB,MAAF,CAASyB,aAAT,CAAuB;AACxCC,IAAAA,IAAI,EAAE,EAAEd,KAAK,EAAE,CAAT,EAAYE,MAAM,EAAE,CAApB,EAAuBK,KAAK,EAAE,CAA9B,EADkC;AAExCZ,IAAAA,MAAM,EAAE,YAFgC;AAGxCoB,IAAAA,KAAK,EAAEC,eAAe,CAACE,QAHiB;AAIxCgB,IAAAA,WAAW,EAAED,cAJ2B,EAAvB,CAAnB;;;AAOA,QAAM/C,SAAS,GAAG8C,cAAc,KAAKC,cAArC;AACAtB,EAAAA,CAAC,CAAC7B,wBAAF;AACE,IAAEuC,OAAO,EAAEK,UAAX,EADF;AAEE,IAAEL,OAAO,EAAEO,UAAX,EAFF;AAGE,IAAE5B,KAAK,EAAE,CAAT,EAAYE,MAAM,EAAE,CAApB,EAAuBK,KAAK,EAAE,CAA9B,EAHF;AAIErB,EAAAA,SAJF;;AAMD,CA7BH;;AA+BAsB,CAAC,CAACC,IAAF,CAAO,gCAAP;AACGtC,MADH;AAEIA,MAAM;AACH0D,OADH;AAEI3D,QAAQ,CAAC,eAAD,EAAkB;AACxB,EAAEiE,CAAC,EAAE,CAAL,EAAQC,CAAC,EAAE,CAAX,EAAcC,CAAC,EAAE,CAAjB,EADwB;AAExB,EAAEF,CAAC,EAAE,CAAL,EAAQC,CAAC,EAAE,CAAX,EAAcC,CAAC,EAAE,CAAjB,EAFwB;AAGxB,EAAEF,CAAC,EAAE,CAAL,EAAQC,CAAC,EAAE,CAAX,EAAcC,CAAC,EAAE,CAAjB,EAHwB;AAIxB,EAAEF,CAAC,EAAE,CAAL,EAAQC,CAAC,EAAE,CAAX,EAAcC,CAAC,EAAE,CAAjB,EAJwB,CAAlB,CAFZ;;;AASGR,OATH;AAUI3D,QAAQ,CAAC,eAAD,EAAkB;AACxB,EAAEiE,CAAC,EAAE,CAAL,EAAQC,CAAC,EAAE,CAAX,EAAcC,CAAC,EAAE,CAAjB,EADwB;AAExB,EAAEF,CAAC,EAAE,CAAL,EAAQC,CAAC,EAAE,CAAX,EAAcC,CAAC,EAAE,CAAjB,EAFwB;AAGxB,EAAEF,CAAC,EAAE,CAAL,EAAQC,CAAC,EAAE,CAAX,EAAcC,CAAC,EAAE,CAAjB,EAHwB;AAIxB,EAAEF,CAAC,EAAE,CAAL,EAAQC,CAAC,EAAE,CAAX,EAAcC,CAAC,EAAE,CAAjB,EAJwB,CAAlB,CAVZ;;;AAiBGC,MAjBH,CAiBUC,CAAC,IAAIrE,QAAQ,CAAC,WAAD,EAAc,CAAC,KAAK4B,IAAI,CAACC,GAAL,CAASwC,CAAC,CAACC,aAAF,CAAgBL,CAAzB,EAA4BI,CAAC,CAACE,aAAF,CAAgBN,CAA5C,CAAN,EAAsD,EAAtD,CAAd,CAjBvB;AAkBGG,MAlBH,CAkBUC,CAAC,IAAIrE,QAAQ,CAAC,YAAD,EAAe,CAAC,KAAK4B,IAAI,CAACC,GAAL,CAASwC,CAAC,CAACC,aAAF,CAAgBJ,CAAzB,EAA4BG,CAAC,CAACE,aAAF,CAAgBL,CAA5C,CAAN,EAAsD,CAAtD,CAAf,CAlBvB,CAFJ;;AAsBG1B,EAtBH,CAsBM,MAAMC,CAAN,IAAW;AACb,QAAM,EAAE6B,aAAF,EAAiBC,aAAjB,EAAgCC,SAAhC,EAA2CC,UAA3C,KAA0DhC,CAAC,CAACxC,MAAlE;;AAEA,QAAMyE,MAAM,GAAG,EAAf;AACA,QAAMC,OAAO,GAAG,EAAhB;;AAEA;AACA;AACA,QAAMnB,UAAU,GAAGf,CAAC,CAACvB,MAAF,CAASyB,aAAT,CAAuB;AACxCC,IAAAA,IAAI,EAAE,EAAEd,KAAK,EAAE4C,MAAT,EAAiB1C,MAAM,EAAE2C,OAAzB,EAAkCtC,KAAK,EAAE,CAAzC,EADkC;AAExCZ,IAAAA,MAAM,EAAE,YAFgC;AAGxCoB,IAAAA,KAAK,EAAEC,eAAe,CAACC,QAHiB;AAIxCiB,IAAAA,WAAW,EAAE,CAJ2B,EAAvB,CAAnB;;AAMA,QAAMN,UAAU,GAAGjB,CAAC,CAACvB,MAAF,CAASyB,aAAT,CAAuB;AACxCC,IAAAA,IAAI,EAAE,EAAEd,KAAK,EAAE4C,MAAT,EAAiB1C,MAAM,EAAE2C,OAAzB,EAAkCtC,KAAK,EAAE,CAAzC,EADkC;AAExCZ,IAAAA,MAAM,EAAE,YAFgC;AAGxCoB,IAAAA,KAAK,EAAEC,eAAe,CAACE,QAHiB;AAIxCgB,IAAAA,WAAW,EAAE,CAJ2B,EAAvB,CAAnB;;;AAOA,QAAMhD,SAAS,GAAGwD,SAAS,KAAKE,MAAd,IAAwBD,UAAU,KAAKE,OAAzD;AACAlC,EAAAA,CAAC,CAAC7B,wBAAF;AACE,IAAEuC,OAAO,EAAEK,UAAX,EAAuBoB,MAAM,EAAEN,aAA/B,EADF;AAEE,IAAEnB,OAAO,EAAEO,UAAX,EAAuBkB,MAAM,EAAEL,aAA/B,EAFF;AAGE,IAAEzC,KAAK,EAAE0C,SAAT,EAAoBxC,MAAM,EAAEyC,UAA5B,EAAwCpC,KAAK,EAAE,CAA/C,EAHF;AAIErB,EAAAA,SAJF;;AAMD,CAlDH;;AAoDAsB,CAAC,CAACC,IAAF,CAAO,yBAAP;AACGtC,MADH;AAEIA,MAAM;AACH0D,OADH,CACW3D,QAAQ,CAAC,WAAD,EAAcK,kBAAd,CADnB;AAEGsD,OAFH,CAEW3D,QAAQ,CAAC,WAAD,EAAcK,kBAAd,CAFnB,CAFJ;;AAMGmC,EANH,CAMM,MAAMC,CAAN,IAAW;AACb,QAAM,EAAEoC,SAAF,EAAaC,SAAb,KAA2BrC,CAAC,CAACxC,MAAnC;AACA,QAAM8E,UAAmC,GAAG,EAA5C;;AAEA,QAAMC,kBAAkB,GAAG5E,qBAAqB,CAACyE,SAAD,CAArB,CAAiCI,SAA5D;AACA,MAAID,kBAAkB,KAAKE,SAA3B,EAAsC;AACpCH,IAAAA,UAAU,CAACI,IAAX,CAAgBH,kBAAhB;AACD;AACD,QAAMI,kBAAkB,GAAGhF,qBAAqB,CAAC0E,SAAD,CAArB,CAAiCG,SAA5D;AACA,MAAIG,kBAAkB,KAAKF,SAA3B,EAAsC;AACpCH,IAAAA,UAAU,CAACI,IAAX,CAAgBC,kBAAhB;AACD;;AAED,MAAIL,UAAU,CAACM,MAAf,EAAuB;AACrB,UAAM5C,CAAC,CAAC6C,0BAAF,CAA6B,EAAEP,UAAF,EAA7B,CAAN;AACD;;AAED,QAAMQ,YAAY,GAAG,EAAEzD,KAAK,EAAE,EAAT,EAAaE,MAAM,EAAE,EAArB,EAAyBK,KAAK,EAAE,CAAhC,EAArB;;AAEA,QAAMmB,UAAU,GAAGf,CAAC,CAACvB,MAAF,CAASyB,aAAT,CAAuB;AACxCC,IAAAA,IAAI,EAAE2C,YADkC;AAExC9D,IAAAA,MAAM,EAAEoD,SAFgC;AAGxChC,IAAAA,KAAK,EAAEC,eAAe,CAACC,QAHiB,EAAvB,CAAnB;;;AAMA,QAAMW,UAAU,GAAGjB,CAAC,CAACvB,MAAF,CAASyB,aAAT,CAAuB;AACxCC,IAAAA,IAAI,EAAE2C,YADkC;AAExC9D,IAAAA,MAAM,EAAEqD,SAFgC;AAGxCjC,IAAAA,KAAK,EAAEC,eAAe,CAACE,QAHiB,EAAvB,CAAnB;;;AAMA,QAAMhC,SAAS,GAAG6D,SAAS,KAAKC,SAAhC;AACArC,EAAAA,CAAC,CAAC7B,wBAAF;AACE,IAAEuC,OAAO,EAAEK,UAAX,EADF;AAEE,IAAEL,OAAO,EAAEO,UAAX,EAFF;AAGE6B,EAAAA,YAHF;AAIEvE,EAAAA,SAJF;;AAMD,CA5CH;;AA8CAsB,CAAC,CAACC,IAAF,CAAO,iCAAP;AACGtC,MADH;AAEIA,MAAM;AACH0D,OADH,CACW3D,QAAQ,CAAC,QAAD,EAAWO,oBAAX,CADnB;AAEGoD,OAFH;AAGI3D,QAAQ,CAAC,gBAAD,EAAmB;AACzB,EAAEiE,CAAC,EAAE,CAAL,EAAQC,CAAC,EAAE,CAAX,EAAcpC,KAAK,EAAE,CAArB,EAAwBE,MAAM,EAAE,CAAhC,EADyB;AAEzB,EAAEiC,CAAC,EAAE,CAAL,EAAQC,CAAC,EAAE,CAAX,EAAcpC,KAAK,EAAE,CAArB,EAAwBE,MAAM,EAAE,CAAhC,EAFyB;AAGzB,EAAEiC,CAAC,EAAE,CAAL,EAAQC,CAAC,EAAE,CAAX,EAAcpC,KAAK,EAAE,CAArB,EAAwBE,MAAM,EAAE,CAAhC,EAHyB;AAIzB,EAAEiC,CAAC,EAAE,CAAL,EAAQC,CAAC,EAAE,CAAX,EAAcpC,KAAK,EAAE,CAAC,CAAtB,EAAyBE,MAAM,EAAE,CAAjC,EAJyB;AAKzB,EAAEiC,CAAC,EAAE,CAAL,EAAQC,CAAC,EAAE,CAAX,EAAcpC,KAAK,EAAE,CAArB,EAAwBE,MAAM,EAAE,CAAC,CAAjC,EALyB,CAAnB,CAHZ;;;AAWG2B,OAXH;AAYI3D,QAAQ,CAAC,gBAAD,EAAmB;AACzB,EAAE8B,KAAK,EAAE,EAAT,EAAaE,MAAM,EAAE,EAArB,EAAyBK,KAAK,EAAE,CAAhC,EADyB;AAEzB,EAAEP,KAAK,EAAE,EAAT,EAAaE,MAAM,EAAE,EAArB,EAAyBK,KAAK,EAAE,CAAhC,EAFyB;AAGzB,EAAEP,KAAK,EAAE,EAAT,EAAaE,MAAM,EAAE,EAArB,EAAyBK,KAAK,EAAE,CAAhC,EAHyB,CAAnB,CAZZ;;;AAkBGsB,OAlBH;AAmBI3D,QAAQ,CAAC,gBAAD,EAAmB;AACzB,EAAE8B,KAAK,EAAE,EAAT,EAAaE,MAAM,EAAE,EAArB,EAAyBK,KAAK,EAAE,CAAhC,EADyB;AAEzB,EAAEP,KAAK,EAAE,EAAT,EAAaE,MAAM,EAAE,EAArB,EAAyBK,KAAK,EAAE,CAAhC,EAFyB;AAGzB,EAAEP,KAAK,EAAE,EAAT,EAAaE,MAAM,EAAE,EAArB,EAAyBK,KAAK,EAAE,CAAhC,EAHyB,CAAnB,CAnBZ;;;AAyBGsB,OAzBH,CAyBW3D,QAAQ,CAAC,cAAD,EAAiB,CAAC,CAAD,EAAI,CAAJ,CAAjB,CAzBnB;AA0BG2D,OA1BH,CA0BW3D,QAAQ,CAAC,cAAD,EAAiB,CAAC,CAAD,EAAI,CAAJ,CAAjB,CA1BnB,CAFJ;;AA8BGwC,EA9BH,CA8BM,MAAMC,CAAN,IAAW;AACb,QAAM;AACJhB,IAAAA,MADI;AAEJ+D,IAAAA,cAFI;AAGJC,IAAAA,cAHI;AAIJC,IAAAA,cAJI;AAKJpC,IAAAA,YALI;AAMJC,IAAAA,YANI;AAOFd,EAAAA,CAAC,CAACxC,MAPN;;AASA,QAAM0F,cAAc,GAAG,CAAvB;AACA,QAAMnC,UAAU,GAAGf,CAAC,CAACvB,MAAF,CAASyB,aAAT,CAAuB;AACxCC,IAAAA,IAAI,EAAE,EAAEd,KAAK,EAAE2D,cAAc,CAAC3D,KAAxB,EAA+BE,MAAM,EAAEyD,cAAc,CAACzD,MAAtD,EAA8DK,KAAK,EAAE,CAArE,EADkC;AAExCZ,IAAAA,MAFwC;AAGxCgC,IAAAA,aAAa,EAAEkC,cAHyB;AAIxC9C,IAAAA,KAAK,EAAEC,eAAe,CAACC,QAJiB,EAAvB,CAAnB;;AAMA,QAAMW,UAAU,GAAGjB,CAAC,CAACvB,MAAF,CAASyB,aAAT,CAAuB;AACxCC,IAAAA,IAAI,EAAE,EAAEd,KAAK,EAAE4D,cAAc,CAAC5D,KAAxB,EAA+BE,MAAM,EAAE0D,cAAc,CAAC1D,MAAtD,EAA8DK,KAAK,EAAE,CAArE,EADkC;AAExCZ,IAAAA,MAFwC;AAGxCgC,IAAAA,aAAa,EAAEkC,cAHyB;AAIxC9C,IAAAA,KAAK,EAAEC,eAAe,CAACE,QAJiB,EAAvB,CAAnB;;;AAOA,QAAM4C,cAAc,GAAGnD,CAAC,CAAClB,0BAAF,CAA6BkE,cAA7B,EAA6ChE,MAA7C,EAAqD6B,YAArD,CAAvB;AACA,QAAMuC,cAAc,GAAGpD,CAAC,CAAClB,0BAAF,CAA6BmE,cAA7B,EAA6CjE,MAA7C,EAAqD8B,YAArD,CAAvB;;AAEA,QAAMuC,UAAU,GAAG,EAAE7B,CAAC,EAAEuB,cAAc,CAACvB,CAApB,EAAuBC,CAAC,EAAEsB,cAAc,CAACtB,CAAzC,EAA4CC,CAAC,EAAE,CAA/C,EAAnB;;AAEA,QAAMK,SAAS;AACb5C,EAAAA,IAAI,CAACmE,GAAL,CAASH,cAAc,CAAC9D,KAAxB,EAA+B+D,cAAc,CAAC/D,KAA9C,IAAuD0D,cAAc,CAAC1D,KAAtE,GAA8EgE,UAAU,CAAC7B,CAD3F;AAEA,QAAMQ,UAAU;AACd7C,EAAAA,IAAI,CAACmE,GAAL,CAASH,cAAc,CAAC5D,MAAxB,EAAgC6D,cAAc,CAAC7D,MAA/C,IAAyDwD,cAAc,CAACxD,MAAxE,GAAiF8D,UAAU,CAAC5B,CAD9F;;AAGA;AACA,QAAMlD,SAAS;AACb8E,EAAAA,UAAU,CAAC7B,CAAX,KAAiB,CAAjB;AACA6B,EAAAA,UAAU,CAAC5B,CAAX,KAAiB,CADjB;AAEAM,EAAAA,SAAS,KAAKoB,cAAc,CAAC9D,KAF7B;AAGA2C,EAAAA,UAAU,KAAKmB,cAAc,CAAC5D,MAH9B;AAIAwC,EAAAA,SAAS,KAAKqB,cAAc,CAAC/D,KAJ7B;AAKA2C,EAAAA,UAAU,KAAKoB,cAAc,CAAC7D,MANhC;AAOAS,EAAAA,CAAC,CAAC7B,wBAAF;AACE,IAAEuC,OAAO,EAAEK,UAAX,EAAuBoB,MAAM,EAAE,EAAEX,CAAC,EAAE,CAAL,EAAQC,CAAC,EAAE,CAAX,EAAcC,CAAC,EAAE,CAAjB,EAA/B,EAAqDzC,QAAQ,EAAE4B,YAA/D,EADF;AAEE,IAAEH,OAAO,EAAEO,UAAX,EAAuBkB,MAAM,EAAEkB,UAA/B,EAA2CpE,QAAQ,EAAE6B,YAArD,EAFF;AAGE,IAAEzB,KAAK,EAAE0C,SAAT,EAAoBxC,MAAM,EAAEyC,UAA5B,EAAwCpC,KAAK,EAAE,CAA/C,EAHF;AAIErB,EAAAA,SAJF;;AAMAyB,EAAAA,CAAC,CAAC7B,wBAAF;AACE,IAAEuC,OAAO,EAAEK,UAAX,EAAuBoB,MAAM,EAAEkB,UAA/B,EAA2CpE,QAAQ,EAAE4B,YAArD,EADF;AAEE,IAAEH,OAAO,EAAEO,UAAX,EAAuBkB,MAAM,EAAE,EAAEX,CAAC,EAAE,CAAL,EAAQC,CAAC,EAAE,CAAX,EAAcC,CAAC,EAAE,CAAjB,EAA/B,EAAqDzC,QAAQ,EAAE6B,YAA/D,EAFF;AAGE,IAAEzB,KAAK,EAAE0C,SAAT,EAAoBxC,MAAM,EAAEyC,UAA5B,EAAwCpC,KAAK,EAAE,CAA/C,EAHF;AAIErB,EAAAA,SAJF;;AAMD,CApFH;;AAsFAsB,CAAC,CAACC,IAAF,CAAO,aAAP;AACGtC,MADH;AAEIA,MAAM;AACH0D,OADH;AAEI3D,QAAQ,CAAC,gBAAD,EAAmB;AACzB,EAAEiE,CAAC,EAAE,CAAL,EAAQC,CAAC,EAAE,CAAX,EAAcC,CAAC,EAAE,CAAjB,EAAoBrC,KAAK,EAAE,CAA3B,EAA8BE,MAAM,EAAE,CAAtC,EAAyCK,KAAK,EAAE,CAAC,CAAjD,EADyB;AAEzB,EAAE4B,CAAC,EAAE,CAAL,EAAQC,CAAC,EAAE,CAAX,EAAcC,CAAC,EAAE,CAAjB,EAAoBrC,KAAK,EAAE,CAA3B,EAA8BE,MAAM,EAAE,CAAtC,EAAyCK,KAAK,EAAE,CAAC,CAAjD,EAFyB;AAGzB,EAAE4B,CAAC,EAAE,CAAL,EAAQC,CAAC,EAAE,CAAX,EAAcC,CAAC,EAAE,CAAjB,EAAoBrC,KAAK,EAAE,CAAC,CAA5B,EAA+BE,MAAM,EAAE,CAAvC,EAA0CK,KAAK,EAAE,CAAC,CAAlD,EAHyB;AAIzB,EAAE4B,CAAC,EAAE,CAAL,EAAQC,CAAC,EAAE,CAAX,EAAcC,CAAC,EAAE,CAAjB,EAAoBrC,KAAK,EAAE,CAA3B,EAA8BE,MAAM,EAAE,CAAtC,EAAyCK,KAAK,EAAE,CAAC,CAAjD,EAJyB;AAKzB,EAAE4B,CAAC,EAAE,CAAL,EAAQC,CAAC,EAAE,CAAX,EAAcC,CAAC,EAAE,CAAjB,EAAoBrC,KAAK,EAAE,CAA3B,EAA8BE,MAAM,EAAE,CAAC,CAAvC,EAA0CK,KAAK,EAAE,CAAC,CAAlD,EALyB;AAMzB,EAAE4B,CAAC,EAAE,CAAL,EAAQC,CAAC,EAAE,CAAX,EAAcC,CAAC,EAAE,CAAjB,EAAoBrC,KAAK,EAAE,CAA3B,EAA8BE,MAAM,EAAE,CAAtC,EAAyCK,KAAK,EAAE,CAAC,CAAjD,EANyB;AAOzB,EAAE4B,CAAC,EAAE,CAAL,EAAQC,CAAC,EAAE,CAAX,EAAcC,CAAC,EAAE,CAAjB,EAAoBrC,KAAK,EAAE,CAA3B,EAA8BE,MAAM,EAAE,CAAtC,EAAyCK,KAAK,EAAE,CAAhD,EAPyB;AAQzB,EAAE4B,CAAC,EAAE,CAAL,EAAQC,CAAC,EAAE,CAAX,EAAcC,CAAC,EAAE,CAAjB,EAAoBrC,KAAK,EAAE,CAA3B,EAA8BE,MAAM,EAAE,CAAtC,EAAyCK,KAAK,EAAE,CAAC,CAAjD,EARyB;AASzB,EAAE4B,CAAC,EAAE,CAAL,EAAQC,CAAC,EAAE,CAAX,EAAcC,CAAC,EAAE,CAAjB,EAAoBrC,KAAK,EAAE,CAA3B,EAA8BE,MAAM,EAAE,CAAtC,EAAyCK,KAAK,EAAE,CAAC,CAAjD,EATyB;AAUzB,EAAE4B,CAAC,EAAE,CAAL,EAAQC,CAAC,EAAE,CAAX,EAAcC,CAAC,EAAE,CAAjB,EAAoBrC,KAAK,EAAE,CAA3B,EAA8BE,MAAM,EAAE,CAAtC,EAAyCK,KAAK,EAAE,CAAhD,EAVyB;AAWzB,EAAE4B,CAAC,EAAE,CAAL,EAAQC,CAAC,EAAE,CAAX,EAAcC,CAAC,EAAE,CAAjB,EAAoBrC,KAAK,EAAE,CAA3B,EAA8BE,MAAM,EAAE,CAAtC,EAAyCK,KAAK,EAAE,CAAhD,EAXyB;AAYzB,EAAE4B,CAAC,EAAE,CAAL,EAAQC,CAAC,EAAE,CAAX,EAAcC,CAAC,EAAE,CAAjB,EAAoBrC,KAAK,EAAE,CAA3B,EAA8BE,MAAM,EAAE,CAAtC,EAAyCK,KAAK,EAAE,CAAC,CAAjD,EAZyB;AAazB,EAAE4B,CAAC,EAAE,CAAL,EAAQC,CAAC,EAAE,CAAX,EAAcC,CAAC,EAAE,CAAjB,EAAoBrC,KAAK,EAAE,CAA3B,EAA8BE,MAAM,EAAE,CAAtC,EAAyCK,KAAK,EAAE,CAAC,CAAjD,EAbyB,CAAnB,CAFZ;;;AAkBGsB,OAlBH,CAkBW3D,QAAQ,CAAC,cAAD,EAAiB,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAAjB,CAlBnB;AAmBG2D,OAnBH,CAmBW3D,QAAQ,CAAC,cAAD,EAAiB,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAAjB,CAnBnB,CAFJ;;AAuBGwC,EAvBH,CAuBM,MAAMC,CAAN,IAAW;AACb,QAAM,EAAE+C,cAAF,EAAkBlC,YAAlB,EAAgCC,YAAhC,KAAiDd,CAAC,CAACxC,MAAzD;;AAEA,QAAMsF,YAAY,GAAG,EAAEzD,KAAK,EAAE,EAAT,EAAaE,MAAM,EAAE,CAArB,EAAwBK,KAAK,EAAE,CAA/B,EAArB;AACA,QAAMsD,cAAc,GAAG,CAAvB;AACA,QAAMK,OAAO,GAAG,YAAhB;;AAEA,QAAMxC,UAAU,GAAGf,CAAC,CAACvB,MAAF,CAASyB,aAAT,CAAuB;AACxCC,IAAAA,IAAI,EAAE2C,YADkC;AAExC9D,IAAAA,MAAM,EAAEuE,OAFgC;AAGxCvC,IAAAA,aAAa,EAAEkC,cAHyB;AAIxC9C,IAAAA,KAAK,EAAEC,eAAe,CAACC,QAJiB,EAAvB,CAAnB;;AAMA,QAAMW,UAAU,GAAGjB,CAAC,CAACvB,MAAF,CAASyB,aAAT,CAAuB;AACxCC,IAAAA,IAAI,EAAE2C,YADkC;AAExC9D,IAAAA,MAAM,EAAEuE,OAFgC;AAGxCvC,IAAAA,aAAa,EAAEkC,cAHyB;AAIxC9C,IAAAA,KAAK,EAAEC,eAAe,CAACE,QAJiB,EAAvB,CAAnB;;;AAOA,QAAM4C,cAAc,GAAGnD,CAAC,CAAClB,0BAAF,CAA6BgE,YAA7B,EAA2CS,OAA3C,EAAoD1C,YAApD,CAAvB;AACA,QAAMuC,cAAc,GAAGpD,CAAC,CAAClB,0BAAF,CAA6BgE,YAA7B,EAA2CS,OAA3C,EAAoDzC,YAApD,CAAvB;;AAEA,QAAMuC,UAAU,GAAG,EAAE7B,CAAC,EAAEuB,cAAc,CAACvB,CAApB,EAAuBC,CAAC,EAAEsB,cAAc,CAACtB,CAAzC,EAA4CC,CAAC,EAAEqB,cAAc,CAACrB,CAA9D,EAAnB;;AAEA,QAAMK,SAAS,GAAG5C,IAAI,CAACC,GAAL;AAChBD,EAAAA,IAAI,CAACmE,GAAL,CAASH,cAAc,CAAC9D,KAAxB,EAA+B+D,cAAc,CAAC/D,KAA9C,IAAuD0D,cAAc,CAAC1D,KAAtE,GAA8EgE,UAAU,CAAC7B,CADzE;AAEhB,GAFgB,CAAlB;;AAIA,QAAMQ,UAAU,GAAG7C,IAAI,CAACC,GAAL;AACjBD,EAAAA,IAAI,CAACmE,GAAL,CAASH,cAAc,CAAC5D,MAAxB,EAAgC6D,cAAc,CAAC7D,MAA/C,IAAyDwD,cAAc,CAACxD,MAAxE,GAAiF8D,UAAU,CAAC5B,CAD3E;AAEjB,GAFiB,CAAnB;;AAIA,QAAM+B,SAAS,GAAGV,YAAY,CAAClD,KAAb,GAAqBmD,cAAc,CAACnD,KAApC,GAA4CyD,UAAU,CAAC3B,CAAzE;;AAEA;AACE,UAAMnD,SAAS;AACbwD,IAAAA,SAAS,IAAIoB,cAAc,CAAC9D,KAA5B;AACA2C,IAAAA,UAAU,IAAImB,cAAc,CAAC5D,MAD7B;AAEA8D,IAAAA,UAAU,CAAC7B,CAAX,GAAeO,SAAf,IAA4BqB,cAAc,CAAC/D,KAF3C;AAGAgE,IAAAA,UAAU,CAAC5B,CAAX,GAAeO,UAAf,IAA6BoB,cAAc,CAAC7D,MAH5C;AAIA8D,IAAAA,UAAU,CAAC3B,CAAX,GAAe8B,SAAf,IAA4BV,YAAY,CAAClD,KAL3C;;AAOAI,IAAAA,CAAC,CAAC7B,wBAAF;AACE,MAAEuC,OAAO,EAAEK,UAAX,EAAuBoB,MAAM,EAAE,EAAEX,CAAC,EAAE,CAAL,EAAQC,CAAC,EAAE,CAAX,EAAcC,CAAC,EAAE,CAAjB,EAA/B,EAAqDzC,QAAQ,EAAE4B,YAA/D,EADF;AAEE,MAAEH,OAAO,EAAEO,UAAX,EAAuBkB,MAAM,EAAEkB,UAA/B,EAA2CpE,QAAQ,EAAE6B,YAArD,EAFF;AAGE,MAAEzB,KAAK,EAAE0C,SAAT,EAAoBxC,MAAM,EAAEyC,UAA5B,EAAwCpC,KAAK,EAAE4D,SAA/C,EAHF;AAIEjF,IAAAA,SAJF;;AAMD;;AAED;AACE,UAAMA,SAAS;AACb8E,IAAAA,UAAU,CAAC7B,CAAX,GAAeO,SAAf,IAA4BoB,cAAc,CAAC9D,KAA3C;AACAgE,IAAAA,UAAU,CAAC5B,CAAX,GAAeO,UAAf,IAA6BmB,cAAc,CAAC5D,MAD5C;AAEAwC,IAAAA,SAAS,IAAIqB,cAAc,CAAC/D,KAF5B;AAGA2C,IAAAA,UAAU,IAAIoB,cAAc,CAAC7D,MAH7B;AAIA8D,IAAAA,UAAU,CAAC3B,CAAX,GAAe8B,SAAf,IAA4BV,YAAY,CAAClD,KAL3C;;AAOAI,IAAAA,CAAC,CAAC7B,wBAAF;AACE,MAAEuC,OAAO,EAAEK,UAAX,EAAuBoB,MAAM,EAAEkB,UAA/B,EAA2CpE,QAAQ,EAAE4B,YAArD,EADF;AAEE,MAAEH,OAAO,EAAEO,UAAX,EAAuBkB,MAAM,EAAE,EAAEX,CAAC,EAAE,CAAL,EAAQC,CAAC,EAAE,CAAX,EAAcC,CAAC,EAAE,CAAjB,EAA/B,EAAqDzC,QAAQ,EAAE6B,YAA/D,EAFF;AAGE,MAAEzB,KAAK,EAAE0C,SAAT,EAAoBxC,MAAM,EAAEyC,UAA5B,EAAwCpC,KAAK,EAAE4D,SAA/C,EAHF;AAIEjF,IAAAA,SAJF;;AAMD;AACF,CAzFH;;AA2FAsB,CAAC,CAACC,IAAF,CAAO,0BAAP;AACGtC,MADH;AAEIA,MAAM;AACH0D,OADH,CACW3D,QAAQ,CAAC,gBAAD,EAAmB,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAAnB,CADnB;AAEG2D,OAFH,CAEW3D,QAAQ,CAAC,gBAAD,EAAmB,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAAnB,CAFnB;AAGG2D,OAHH,CAGW3D,QAAQ,CAAC,iBAAD,EAAoB,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAApB,CAHnB,CAFJ;;AAOGwC,EAPH,CAOM,MAAMC,CAAN,IAAW;AACb,QAAM,EAAEyD,cAAF,EAAkBC,cAAlB,EAAkCC,eAAlC,KAAsD3D,CAAC,CAACxC,MAA9D;;AAEA,QAAMoG,gBAAgB,GAAG,CAAzB;;AAEA,QAAMC,WAAW,GAAG7D,CAAC,CAACvB,MAAF,CAASyB,aAAT,CAAuB;AACzCC,IAAAA,IAAI,EAAE,EAAEd,KAAK,EAAE,EAAT,EAAaE,MAAM,EAAE,EAArB,EAAyBK,KAAK,EAAEgE,gBAAhC,EADmC;AAEzC5E,IAAAA,MAAM,EAAE,YAFiC;AAGzCoB,IAAAA,KAAK,EAAEC,eAAe,CAACC,QAAhB,GAA2BD,eAAe,CAACE,QAHT,EAAvB,CAApB;;;AAMA,QAAMhC,SAAS;AACbY,EAAAA,IAAI,CAACmE,GAAL,CAASG,cAAT,EAAyBC,cAAzB,IAA2CC,eAA3C;AACAxE,EAAAA,IAAI,CAACC,GAAL,CAASqE,cAAT,EAAyBC,cAAzB,CAFF;AAGA1D,EAAAA,CAAC,CAAC7B,wBAAF;AACE,IAAEuC,OAAO,EAAEmD,WAAX,EAAwB1B,MAAM,EAAE,EAAEX,CAAC,EAAE,CAAL,EAAQC,CAAC,EAAE,CAAX,EAAcC,CAAC,EAAE+B,cAAjB,EAAhC,EADF;AAEE,IAAE/C,OAAO,EAAEmD,WAAX,EAAwB1B,MAAM,EAAE,EAAEX,CAAC,EAAE,CAAL,EAAQC,CAAC,EAAE,CAAX,EAAcC,CAAC,EAAEgC,cAAjB,EAAhC,EAFF;AAGE,IAAErE,KAAK,EAAE,EAAT,EAAaE,MAAM,EAAE,EAArB,EAAyBK,KAAK,EAAE+D,eAAhC,EAHF;AAIEpF,EAAAA,SAJF;;AAMD,CA3BH;;AA6BAsB,CAAC,CAACC,IAAF,CAAO,6CAAP;AACGtC,MADH;AAEIA,MAAM;AACH0D,OADH,CACW3D,QAAQ,CAAC,QAAD,EAAWM,yBAAX,CADnB;AAEGqD,OAFH;AAGI3D,QAAQ,CAAC,gBAAD,EAAmB;AACzB,EAAEiE,CAAC,EAAE,CAAL,EAAQC,CAAC,EAAE,CAAX,EAAcC,CAAC,EAAE,CAAjB,EAAoBrC,KAAK,EAAE,CAA3B,EAA8BE,MAAM,EAAE,CAAtC,EAAyCK,KAAK,EAAE,CAAC,CAAjD,EADyB;AAEzB,EAAE4B,CAAC,EAAE,CAAL,EAAQC,CAAC,EAAE,CAAX,EAAcC,CAAC,EAAE,CAAjB,EAAoBrC,KAAK,EAAE,CAA3B,EAA8BE,MAAM,EAAE,CAAtC,EAAyCK,KAAK,EAAE,CAAC,CAAjD,EAFyB;AAGzB,EAAE4B,CAAC,EAAE,CAAL,EAAQC,CAAC,EAAE,CAAX,EAAcC,CAAC,EAAE,CAAjB,EAAoBrC,KAAK,EAAE,CAA3B,EAA8BE,MAAM,EAAE,CAAtC,EAAyCK,KAAK,EAAE,CAAC,CAAjD,EAHyB;AAIzB,EAAE4B,CAAC,EAAE,CAAL,EAAQC,CAAC,EAAE,CAAX,EAAcC,CAAC,EAAE,CAAjB,EAAoBrC,KAAK,EAAE,CAAC,CAA5B,EAA+BE,MAAM,EAAE,CAAvC,EAA0CK,KAAK,EAAE,CAAC,CAAlD,EAJyB;AAKzB,EAAE4B,CAAC,EAAE,CAAL,EAAQC,CAAC,EAAE,CAAX,EAAcC,CAAC,EAAE,CAAjB,EAAoBrC,KAAK,EAAE,CAAC,CAA5B,EAA+BE,MAAM,EAAE,CAAvC,EAA0CK,KAAK,EAAE,CAAC,CAAlD,EALyB;AAMzB,EAAE4B,CAAC,EAAE,CAAL,EAAQC,CAAC,EAAE,CAAX,EAAcC,CAAC,EAAE,CAAjB,EAAoBrC,KAAK,EAAE,CAA3B,EAA8BE,MAAM,EAAE,CAAtC,EAAyCK,KAAK,EAAE,CAAC,CAAjD,EANyB;AAOzB,EAAE4B,CAAC,EAAE,CAAL,EAAQC,CAAC,EAAE,CAAX,EAAcC,CAAC,EAAE,CAAjB,EAAoBrC,KAAK,EAAE,CAA3B,EAA8BE,MAAM,EAAE,CAAtC,EAAyCK,KAAK,EAAE,CAAC,CAAjD,EAPyB;AAQzB,EAAE4B,CAAC,EAAE,CAAL,EAAQC,CAAC,EAAE,CAAX,EAAcC,CAAC,EAAE,CAAjB,EAAoBrC,KAAK,EAAE,CAA3B,EAA8BE,MAAM,EAAE,CAAC,CAAvC,EAA0CK,KAAK,EAAE,CAAC,CAAlD,EARyB;AASzB,EAAE4B,CAAC,EAAE,CAAL,EAAQC,CAAC,EAAE,CAAX,EAAcC,CAAC,EAAE,CAAjB,EAAoBrC,KAAK,EAAE,CAA3B,EAA8BE,MAAM,EAAE,CAAC,CAAvC,EAA0CK,KAAK,EAAE,CAAC,CAAlD,EATyB;AAUzB,EAAE4B,CAAC,EAAE,CAAL,EAAQC,CAAC,EAAE,CAAX,EAAcC,CAAC,EAAE,CAAjB,EAAoBrC,KAAK,EAAE,CAA3B,EAA8BE,MAAM,EAAE,CAAtC,EAAyCK,KAAK,EAAE,CAAhD,EAVyB;AAWzB,EAAE4B,CAAC,EAAE,CAAL,EAAQC,CAAC,EAAE,CAAX,EAAcC,CAAC,EAAE,CAAjB,EAAoBrC,KAAK,EAAE,CAA3B,EAA8BE,MAAM,EAAE,CAAtC,EAAyCK,KAAK,EAAE,CAAC,CAAjD,EAXyB,CAAnB,CAHZ;;;AAiBGsB,OAjBH,CAiBW3D,QAAQ,CAAC,cAAD,EAAiB,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAAjB,CAjBnB;AAkBG2D,OAlBH,CAkBW3D,QAAQ,CAAC,cAAD,EAAiB,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAAjB,CAlBnB,CAFJ;;AAsBGwC,EAtBH,CAsBM,MAAMC,CAAN,IAAW;AACb,QAAM,EAAEhB,MAAF,EAAU+D,cAAV,EAA0BlC,YAA1B,EAAwCC,YAAxC,KAAyDd,CAAC,CAACxC,MAAjE;;AAEA,QAAMgF,SAAuC,GAAG7E,qBAAqB,CAACqB,MAAD,CAArB,CAA8BwD,SAA9E;AACA9E,EAAAA,MAAM,CAAC8E,SAAS,KAAKC,SAAf,CAAN;AACA,QAAMzC,CAAC,CAAC6C,0BAAF,CAA6B,EAAEP,UAAU,EAAE,CAACE,SAAD,CAAd,EAA7B,CAAN;;AAEA,QAAMM,YAAY,GAAG,EAAEzD,KAAK,EAAE,EAAT,EAAaE,MAAM,EAAE,EAArB,EAAyBK,KAAK,EAAE,CAAhC,EAArB;AACA,QAAMsD,cAAc,GAAG,CAAvB;;AAEA,QAAMnC,UAAU,GAAGf,CAAC,CAACvB,MAAF,CAASyB,aAAT,CAAuB;AACxCC,IAAAA,IAAI,EAAE2C,YADkC;AAExC9D,IAAAA,MAFwC;AAGxCgC,IAAAA,aAAa,EAAEkC,cAHyB;AAIxC9C,IAAAA,KAAK,EAAEC,eAAe,CAACC,QAJiB,EAAvB,CAAnB;;AAMA,QAAMW,UAAU,GAAGjB,CAAC,CAACvB,MAAF,CAASyB,aAAT,CAAuB;AACxCC,IAAAA,IAAI,EAAE2C,YADkC;AAExC9D,IAAAA,MAFwC;AAGxCgC,IAAAA,aAAa,EAAEkC,cAHyB;AAIxC9C,IAAAA,KAAK,EAAEC,eAAe,CAACE,QAJiB,EAAvB,CAAnB;;;AAOA,QAAM4C,cAAc,GAAGnD,CAAC,CAAClB,0BAAF,CAA6BgE,YAA7B,EAA2C9D,MAA3C,EAAmD6B,YAAnD,CAAvB;AACA,QAAMuC,cAAc,GAAGpD,CAAC,CAAClB,0BAAF,CAA6BgE,YAA7B,EAA2C9D,MAA3C,EAAmD8B,YAAnD,CAAvB;;AAEA,QAAMuC,UAAU,GAAG,EAAE7B,CAAC,EAAEuB,cAAc,CAACvB,CAApB,EAAuBC,CAAC,EAAEsB,cAAc,CAACtB,CAAzC,EAA4CC,CAAC,EAAEqB,cAAc,CAACrB,CAA9D,EAAnB;;AAEA,QAAMK,SAAS,GAAG5C,IAAI,CAACC,GAAL;AAChBD,EAAAA,IAAI,CAACmE,GAAL,CAASH,cAAc,CAAC9D,KAAxB,EAA+B+D,cAAc,CAAC/D,KAA9C,IAAuD0D,cAAc,CAAC1D,KAAtE,GAA8EgE,UAAU,CAAC7B,CADzE;AAEhB,GAFgB,CAAlB;;AAIA,QAAMQ,UAAU,GAAG7C,IAAI,CAACC,GAAL;AACjBD,EAAAA,IAAI,CAACmE,GAAL,CAASH,cAAc,CAAC5D,MAAxB,EAAgC6D,cAAc,CAAC7D,MAA/C,IAAyDwD,cAAc,CAACxD,MAAxE,GAAiF8D,UAAU,CAAC5B,CAD3E;AAEjB,GAFiB,CAAnB;;AAIA,QAAM+B,SAAS,GAAGV,YAAY,CAAClD,KAAb,GAAqBmD,cAAc,CAACnD,KAApC,GAA4CyD,UAAU,CAAC3B,CAAzE;;AAEA,QAAMoC,eAAe,GAAGnG,qBAAqB,CAACqB,MAAD,CAArB,CAA8BS,UAAtD;AACA,QAAMsE,gBAAgB,GAAGpG,qBAAqB,CAACqB,MAAD,CAArB,CAA8BW,WAAvD;;AAEA,QAAMqE,6BAA6B;AACjCX,EAAAA,UAAU,CAAC7B,CAAX,GAAesC,eAAf,KAAmC,CAAnC;AACAT,EAAAA,UAAU,CAAC5B,CAAX,GAAesC,gBAAf,KAAoC,CADpC;AAEAhC,EAAAA,SAAS,GAAG+B,eAAZ,KAAgC,CAFhC;AAGA9B,EAAAA,UAAU,GAAG+B,gBAAb,KAAkC,CAJpC;;AAMA;AACE,UAAMxF,SAAS;AACbyF,IAAAA,6BAA6B;AAC7BjC,IAAAA,SAAS,IAAIoB,cAAc,CAAC9D,KAD5B;AAEA2C,IAAAA,UAAU,IAAImB,cAAc,CAAC5D,MAF7B;AAGA8D,IAAAA,UAAU,CAAC7B,CAAX,GAAeO,SAAf,IAA4BqB,cAAc,CAAC/D,KAH3C;AAIAgE,IAAAA,UAAU,CAAC5B,CAAX,GAAeO,UAAf,IAA6BoB,cAAc,CAAC7D,MAJ5C;AAKA8D,IAAAA,UAAU,CAAC3B,CAAX,GAAe8B,SAAf,IAA4BV,YAAY,CAAClD,KAN3C;;AAQAI,IAAAA,CAAC,CAAC7B,wBAAF;AACE,MAAEuC,OAAO,EAAEK,UAAX,EAAuBoB,MAAM,EAAE,EAAEX,CAAC,EAAE,CAAL,EAAQC,CAAC,EAAE,CAAX,EAAcC,CAAC,EAAE,CAAjB,EAA/B,EAAqDzC,QAAQ,EAAE4B,YAA/D,EADF;AAEE,MAAEH,OAAO,EAAEO,UAAX,EAAuBkB,MAAM,EAAEkB,UAA/B,EAA2CpE,QAAQ,EAAE6B,YAArD,EAFF;AAGE,MAAEzB,KAAK,EAAE0C,SAAT,EAAoBxC,MAAM,EAAEyC,UAA5B,EAAwCpC,KAAK,EAAE4D,SAA/C,EAHF;AAIEjF,IAAAA,SAJF;;AAMD;;AAED;AACE,UAAMA,SAAS;AACbyF,IAAAA,6BAA6B;AAC7BX,IAAAA,UAAU,CAAC7B,CAAX,GAAeO,SAAf,IAA4BoB,cAAc,CAAC9D,KAD3C;AAEAgE,IAAAA,UAAU,CAAC5B,CAAX,GAAeO,UAAf,IAA6BmB,cAAc,CAAC5D,MAF5C;AAGAwC,IAAAA,SAAS,IAAIqB,cAAc,CAAC/D,KAH5B;AAIA2C,IAAAA,UAAU,IAAIoB,cAAc,CAAC7D,MAJ7B;AAKA8D,IAAAA,UAAU,CAAC3B,CAAX,GAAe8B,SAAf,IAA4BV,YAAY,CAAClD,KAN3C;;AAQAI,IAAAA,CAAC,CAAC7B,wBAAF;AACE,MAAEuC,OAAO,EAAEK,UAAX,EAAuBoB,MAAM,EAAEkB,UAA/B,EAA2CpE,QAAQ,EAAE4B,YAArD,EADF;AAEE,MAAEH,OAAO,EAAEO,UAAX,EAAuBkB,MAAM,EAAE,EAAEX,CAAC,EAAE,CAAL,EAAQC,CAAC,EAAE,CAAX,EAAcC,CAAC,EAAE,CAAjB,EAA/B,EAAqDzC,QAAQ,EAAE6B,YAA/D,EAFF;AAGE,MAAEzB,KAAK,EAAE0C,SAAT,EAAoBxC,MAAM,EAAEyC,UAA5B,EAAwCpC,KAAK,EAAE4D,SAA/C,EAHF;AAIEjF,IAAAA,SAJF;;AAMD;AACF,CAtGH","sourcesContent":["export const description = `\ncopyTextureToTexture tests.\n\nTest Plan: (TODO(jiawei.shao@intel.com): add tests on aspects and 1D/3D textures)\n* the source and destination texture\n  - the {source, destination} texture is {invalid, valid}.\n  - mipLevel {>, =, <} the mipmap level count of the {source, destination} texture.\n  - the source texture is created {with, without} GPUTextureUsage::CopySrc.\n  - the destination texture is created {with, without} GPUTextureUsage::CopyDst.\n* sample count\n  - the sample count of the source texture {is, isn't} equal to the one of the destination texture\n  - when the sample count is greater than 1:\n    - it {is, isn't} a copy of the whole subresource of the source texture.\n    - it {is, isn't} a copy of the whole subresource of the destination texture.\n* texture format\n  - the format of the source texture {is, isn't} equal to the one of the destination texture.\n    - including: depth24plus-stencil8 to/from {depth24plus, stencil8}.\n  - for each depth and/or stencil format: a copy between two textures with same format:\n    - it {is, isn't} a copy of the whole subresource of the {source, destination} texture.\n* copy ranges\n  - if the texture dimension is 2D:\n    - (srcOrigin.x + copyExtent.width) {>, =, <} the width of the subresource size of source\n      textureCopyView.\n    - (srcOrigin.y + copyExtent.height) {>, =, <} the height of the subresource size of source\n      textureCopyView.\n    - (srcOrigin.z + copyExtent.depth) {>, =, <} the depth of the subresource size of source\n      textureCopyView.\n    - (dstOrigin.x + copyExtent.width) {>, =, <} the width of the subresource size of destination\n      textureCopyView.\n    - (dstOrigin.y + copyExtent.height) {>, =, <} the height of the subresource size of destination\n      textureCopyView.\n    - (dstOrigin.z + copyExtent.depth) {>, =, <} the depth of the subresource size of destination\n      textureCopyView.\n* when the source and destination texture are the same one:\n  - the set of source texture subresources {has, doesn't have} overlaps with the one of destination\n    texture subresources.\n`;\n\nimport { poptions, params } from '../../../../../common/framework/params_builder.js';\nimport { makeTestGroup } from '../../../../../common/framework/test_group.js';\nimport { assert } from '../../../../../common/framework/util/util.js';\nimport {\n  kAllTextureFormatInfo,\n  kAllTextureFormats,\n  kCompressedTextureFormats,\n  kDepthStencilFormats,\n  kTextureUsages,\n} from '../../../../capability_info.js';\nimport { align } from '../../../../util/math.js';\nimport { ValidationTest } from '../../validation_test.js';\n\nclass F extends ValidationTest {\n  TestCopyTextureToTexture(\n    source: GPUTextureCopyView,\n    destination: GPUTextureCopyView,\n    copySize: GPUExtent3D,\n    isSuccess: boolean\n  ): void {\n    const commandEncoder = this.device.createCommandEncoder();\n    commandEncoder.copyTextureToTexture(source, destination, copySize);\n\n    this.expectValidationError(() => {\n      commandEncoder.finish();\n    }, !isSuccess);\n  }\n\n  GetPhysicalSubresourceSize(\n    textureSize: GPUExtent3DDict,\n    format: GPUTextureFormat,\n    mipLevel: number\n  ): GPUExtent3DDict {\n    const virtualWidthAtLevel = Math.max(textureSize.width >> mipLevel, 1);\n    const virtualHeightAtLevel = Math.max(textureSize.height >> mipLevel, 1);\n    const physicalWidthAtLevel = align(\n      virtualWidthAtLevel,\n      kAllTextureFormatInfo[format].blockWidth\n    );\n    const physicalHeightAtLevel = align(\n      virtualHeightAtLevel,\n      kAllTextureFormatInfo[format].blockHeight\n    );\n    return { width: physicalWidthAtLevel, height: physicalHeightAtLevel, depth: textureSize.depth };\n  }\n}\n\nexport const g = makeTestGroup(F);\n\ng.test('copy_with_invalid_texture').fn(async t => {\n  const validTexture = t.device.createTexture({\n    size: { width: 4, height: 4, depth: 1 },\n    format: 'rgba8unorm',\n    usage: GPUTextureUsage.COPY_SRC | GPUTextureUsage.COPY_DST,\n  });\n\n  const errorTexture = t.getErrorTexture();\n\n  t.TestCopyTextureToTexture(\n    { texture: errorTexture },\n    { texture: validTexture },\n    { width: 1, height: 1, depth: 1 },\n    false\n  );\n  t.TestCopyTextureToTexture(\n    { texture: validTexture },\n    { texture: errorTexture },\n    { width: 1, height: 1, depth: 1 },\n    false\n  );\n});\n\ng.test('mipmap_level')\n  .params([\n    { srcLevelCount: 1, dstLevelCount: 1, srcCopyLevel: 0, dstCopyLevel: 0 },\n    { srcLevelCount: 1, dstLevelCount: 1, srcCopyLevel: 1, dstCopyLevel: 0 },\n    { srcLevelCount: 1, dstLevelCount: 1, srcCopyLevel: 0, dstCopyLevel: 1 },\n    { srcLevelCount: 3, dstLevelCount: 3, srcCopyLevel: 0, dstCopyLevel: 0 },\n    { srcLevelCount: 3, dstLevelCount: 3, srcCopyLevel: 2, dstCopyLevel: 0 },\n    { srcLevelCount: 3, dstLevelCount: 3, srcCopyLevel: 3, dstCopyLevel: 0 },\n    { srcLevelCount: 3, dstLevelCount: 3, srcCopyLevel: 0, dstCopyLevel: 2 },\n    { srcLevelCount: 3, dstLevelCount: 3, srcCopyLevel: 0, dstCopyLevel: 3 },\n  ] as const)\n  .fn(async t => {\n    const { srcLevelCount, dstLevelCount, srcCopyLevel, dstCopyLevel } = t.params;\n\n    const srcTexture = t.device.createTexture({\n      size: { width: 32, height: 32, depth: 1 },\n      format: 'rgba8unorm',\n      usage: GPUTextureUsage.COPY_SRC,\n      mipLevelCount: srcLevelCount,\n    });\n    const dstTexture = t.device.createTexture({\n      size: { width: 32, height: 32, depth: 1 },\n      format: 'rgba8unorm',\n      usage: GPUTextureUsage.COPY_DST,\n      mipLevelCount: dstLevelCount,\n    });\n\n    const isSuccess = srcCopyLevel < srcLevelCount && dstCopyLevel < dstLevelCount;\n    t.TestCopyTextureToTexture(\n      { texture: srcTexture, mipLevel: srcCopyLevel },\n      { texture: dstTexture, mipLevel: dstCopyLevel },\n      { width: 1, height: 1, depth: 1 },\n      isSuccess\n    );\n  });\n\ng.test('texture_usage')\n  .params(\n    params()\n      .combine(poptions('srcUsage', kTextureUsages))\n      .combine(poptions('dstUsage', kTextureUsages))\n  )\n  .fn(async t => {\n    const { srcUsage, dstUsage } = t.params;\n\n    const srcTexture = t.device.createTexture({\n      size: { width: 4, height: 4, depth: 1 },\n      format: 'rgba8unorm',\n      usage: srcUsage,\n    });\n    const dstTexture = t.device.createTexture({\n      size: { width: 4, height: 4, depth: 1 },\n      format: 'rgba8unorm',\n      usage: dstUsage,\n    });\n\n    const isSuccess =\n      srcUsage === GPUTextureUsage.COPY_SRC && dstUsage === GPUTextureUsage.COPY_DST;\n\n    t.TestCopyTextureToTexture(\n      { texture: srcTexture },\n      { texture: dstTexture },\n      { width: 1, height: 1, depth: 1 },\n      isSuccess\n    );\n  });\n\ng.test('sample_count')\n  .params(\n    params()\n      .combine(poptions('srcSampleCount', [1, 4]))\n      .combine(poptions('dstSampleCount', [1, 4]))\n  )\n  .fn(async t => {\n    const { srcSampleCount, dstSampleCount } = t.params;\n\n    const srcTexture = t.device.createTexture({\n      size: { width: 4, height: 4, depth: 1 },\n      format: 'rgba8unorm',\n      usage: GPUTextureUsage.COPY_SRC,\n      sampleCount: srcSampleCount,\n    });\n    const dstTexture = t.device.createTexture({\n      size: { width: 4, height: 4, depth: 1 },\n      format: 'rgba8unorm',\n      usage: GPUTextureUsage.COPY_DST,\n      sampleCount: dstSampleCount,\n    });\n\n    const isSuccess = srcSampleCount === dstSampleCount;\n    t.TestCopyTextureToTexture(\n      { texture: srcTexture },\n      { texture: dstTexture },\n      { width: 4, height: 4, depth: 1 },\n      isSuccess\n    );\n  });\n\ng.test('multisampled_copy_restrictions')\n  .params(\n    params()\n      .combine(\n        poptions('srcCopyOrigin', [\n          { x: 0, y: 0, z: 0 },\n          { x: 1, y: 0, z: 0 },\n          { x: 0, y: 1, z: 0 },\n          { x: 1, y: 1, z: 0 },\n        ])\n      )\n      .combine(\n        poptions('dstCopyOrigin', [\n          { x: 0, y: 0, z: 0 },\n          { x: 1, y: 0, z: 0 },\n          { x: 0, y: 1, z: 0 },\n          { x: 1, y: 1, z: 0 },\n        ])\n      )\n      .expand(p => poptions('copyWidth', [32 - Math.max(p.srcCopyOrigin.x, p.dstCopyOrigin.x), 16]))\n      .expand(p => poptions('copyHeight', [16 - Math.max(p.srcCopyOrigin.y, p.dstCopyOrigin.y), 8]))\n  )\n  .fn(async t => {\n    const { srcCopyOrigin, dstCopyOrigin, copyWidth, copyHeight } = t.params;\n\n    const kWidth = 32;\n    const kHeight = 16;\n\n    // Currently we don't support multisampled 2D array textures and the mipmap level count of the\n    // multisampled textures must be 1.\n    const srcTexture = t.device.createTexture({\n      size: { width: kWidth, height: kHeight, depth: 1 },\n      format: 'rgba8unorm',\n      usage: GPUTextureUsage.COPY_SRC,\n      sampleCount: 4,\n    });\n    const dstTexture = t.device.createTexture({\n      size: { width: kWidth, height: kHeight, depth: 1 },\n      format: 'rgba8unorm',\n      usage: GPUTextureUsage.COPY_DST,\n      sampleCount: 4,\n    });\n\n    const isSuccess = copyWidth === kWidth && copyHeight === kHeight;\n    t.TestCopyTextureToTexture(\n      { texture: srcTexture, origin: srcCopyOrigin },\n      { texture: dstTexture, origin: dstCopyOrigin },\n      { width: copyWidth, height: copyHeight, depth: 1 },\n      isSuccess\n    );\n  });\n\ng.test('texture_format_equality')\n  .params(\n    params()\n      .combine(poptions('srcFormat', kAllTextureFormats))\n      .combine(poptions('dstFormat', kAllTextureFormats))\n  )\n  .fn(async t => {\n    const { srcFormat, dstFormat } = t.params;\n    const extensions: Array<GPUExtensionName> = [];\n\n    const srcFormatExtension = kAllTextureFormatInfo[srcFormat].extension;\n    if (srcFormatExtension !== undefined) {\n      extensions.push(srcFormatExtension);\n    }\n    const dstFormatExtension = kAllTextureFormatInfo[dstFormat].extension;\n    if (dstFormatExtension !== undefined) {\n      extensions.push(dstFormatExtension);\n    }\n\n    if (extensions.length) {\n      await t.selectDeviceOrSkipTestCase({ extensions });\n    }\n\n    const kTextureSize = { width: 16, height: 16, depth: 1 };\n\n    const srcTexture = t.device.createTexture({\n      size: kTextureSize,\n      format: srcFormat,\n      usage: GPUTextureUsage.COPY_SRC,\n    });\n\n    const dstTexture = t.device.createTexture({\n      size: kTextureSize,\n      format: dstFormat,\n      usage: GPUTextureUsage.COPY_DST,\n    });\n\n    const isSuccess = srcFormat === dstFormat;\n    t.TestCopyTextureToTexture(\n      { texture: srcTexture },\n      { texture: dstTexture },\n      kTextureSize,\n      isSuccess\n    );\n  });\n\ng.test('depth_stencil_copy_restrictions')\n  .params(\n    params()\n      .combine(poptions('format', kDepthStencilFormats))\n      .combine(\n        poptions('copyBoxOffsets', [\n          { x: 0, y: 0, width: 0, height: 0 },\n          { x: 1, y: 0, width: 0, height: 0 },\n          { x: 0, y: 1, width: 0, height: 0 },\n          { x: 0, y: 0, width: -1, height: 0 },\n          { x: 0, y: 0, width: 0, height: -1 },\n        ])\n      )\n      .combine(\n        poptions('srcTextureSize', [\n          { width: 64, height: 64, depth: 1 },\n          { width: 64, height: 32, depth: 1 },\n          { width: 32, height: 32, depth: 1 },\n        ])\n      )\n      .combine(\n        poptions('dstTextureSize', [\n          { width: 64, height: 64, depth: 1 },\n          { width: 64, height: 32, depth: 1 },\n          { width: 32, height: 32, depth: 1 },\n        ])\n      )\n      .combine(poptions('srcCopyLevel', [1, 2]))\n      .combine(poptions('dstCopyLevel', [0, 1]))\n  )\n  .fn(async t => {\n    const {\n      format,\n      copyBoxOffsets,\n      srcTextureSize,\n      dstTextureSize,\n      srcCopyLevel,\n      dstCopyLevel,\n    } = t.params;\n\n    const kMipLevelCount = 3;\n    const srcTexture = t.device.createTexture({\n      size: { width: srcTextureSize.width, height: srcTextureSize.height, depth: 1 },\n      format,\n      mipLevelCount: kMipLevelCount,\n      usage: GPUTextureUsage.COPY_SRC,\n    });\n    const dstTexture = t.device.createTexture({\n      size: { width: dstTextureSize.width, height: dstTextureSize.height, depth: 1 },\n      format,\n      mipLevelCount: kMipLevelCount,\n      usage: GPUTextureUsage.COPY_DST,\n    });\n\n    const srcSizeAtLevel = t.GetPhysicalSubresourceSize(srcTextureSize, format, srcCopyLevel);\n    const dstSizeAtLevel = t.GetPhysicalSubresourceSize(dstTextureSize, format, dstCopyLevel);\n\n    const copyOrigin = { x: copyBoxOffsets.x, y: copyBoxOffsets.y, z: 0 };\n\n    const copyWidth =\n      Math.min(srcSizeAtLevel.width, dstSizeAtLevel.width) + copyBoxOffsets.width - copyOrigin.x;\n    const copyHeight =\n      Math.min(srcSizeAtLevel.height, dstSizeAtLevel.height) + copyBoxOffsets.height - copyOrigin.y;\n\n    // Depth/stencil copies must copy whole subresources.\n    const isSuccess =\n      copyOrigin.x === 0 &&\n      copyOrigin.y === 0 &&\n      copyWidth === srcSizeAtLevel.width &&\n      copyHeight === srcSizeAtLevel.height &&\n      copyWidth === dstSizeAtLevel.width &&\n      copyHeight === dstSizeAtLevel.height;\n    t.TestCopyTextureToTexture(\n      { texture: srcTexture, origin: { x: 0, y: 0, z: 0 }, mipLevel: srcCopyLevel },\n      { texture: dstTexture, origin: copyOrigin, mipLevel: dstCopyLevel },\n      { width: copyWidth, height: copyHeight, depth: 1 },\n      isSuccess\n    );\n    t.TestCopyTextureToTexture(\n      { texture: srcTexture, origin: copyOrigin, mipLevel: srcCopyLevel },\n      { texture: dstTexture, origin: { x: 0, y: 0, z: 0 }, mipLevel: dstCopyLevel },\n      { width: copyWidth, height: copyHeight, depth: 1 },\n      isSuccess\n    );\n  });\n\ng.test('copy_ranges')\n  .params(\n    params()\n      .combine(\n        poptions('copyBoxOffsets', [\n          { x: 0, y: 0, z: 0, width: 0, height: 0, depth: -2 },\n          { x: 1, y: 0, z: 0, width: 0, height: 0, depth: -2 },\n          { x: 1, y: 0, z: 0, width: -1, height: 0, depth: -2 },\n          { x: 0, y: 1, z: 0, width: 0, height: 0, depth: -2 },\n          { x: 0, y: 1, z: 0, width: 0, height: -1, depth: -2 },\n          { x: 0, y: 0, z: 1, width: 0, height: 1, depth: -2 },\n          { x: 0, y: 0, z: 2, width: 0, height: 1, depth: 0 },\n          { x: 0, y: 0, z: 0, width: 1, height: 0, depth: -2 },\n          { x: 0, y: 0, z: 0, width: 0, height: 1, depth: -2 },\n          { x: 0, y: 0, z: 0, width: 0, height: 0, depth: 1 },\n          { x: 0, y: 0, z: 0, width: 0, height: 0, depth: 0 },\n          { x: 0, y: 0, z: 1, width: 0, height: 0, depth: -1 },\n          { x: 0, y: 0, z: 2, width: 0, height: 0, depth: -1 },\n        ])\n      )\n      .combine(poptions('srcCopyLevel', [0, 1, 3]))\n      .combine(poptions('dstCopyLevel', [0, 1, 3]))\n  )\n  .fn(async t => {\n    const { copyBoxOffsets, srcCopyLevel, dstCopyLevel } = t.params;\n\n    const kTextureSize = { width: 16, height: 8, depth: 3 };\n    const kMipLevelCount = 4;\n    const kFormat = 'rgba8unorm';\n\n    const srcTexture = t.device.createTexture({\n      size: kTextureSize,\n      format: kFormat,\n      mipLevelCount: kMipLevelCount,\n      usage: GPUTextureUsage.COPY_SRC,\n    });\n    const dstTexture = t.device.createTexture({\n      size: kTextureSize,\n      format: kFormat,\n      mipLevelCount: kMipLevelCount,\n      usage: GPUTextureUsage.COPY_DST,\n    });\n\n    const srcSizeAtLevel = t.GetPhysicalSubresourceSize(kTextureSize, kFormat, srcCopyLevel);\n    const dstSizeAtLevel = t.GetPhysicalSubresourceSize(kTextureSize, kFormat, dstCopyLevel);\n\n    const copyOrigin = { x: copyBoxOffsets.x, y: copyBoxOffsets.y, z: copyBoxOffsets.z };\n\n    const copyWidth = Math.max(\n      Math.min(srcSizeAtLevel.width, dstSizeAtLevel.width) + copyBoxOffsets.width - copyOrigin.x,\n      0\n    );\n    const copyHeight = Math.max(\n      Math.min(srcSizeAtLevel.height, dstSizeAtLevel.height) + copyBoxOffsets.height - copyOrigin.y,\n      0\n    );\n    const copyDepth = kTextureSize.depth + copyBoxOffsets.depth - copyOrigin.z;\n\n    {\n      const isSuccess =\n        copyWidth <= srcSizeAtLevel.width &&\n        copyHeight <= srcSizeAtLevel.height &&\n        copyOrigin.x + copyWidth <= dstSizeAtLevel.width &&\n        copyOrigin.y + copyHeight <= dstSizeAtLevel.height &&\n        copyOrigin.z + copyDepth <= kTextureSize.depth;\n\n      t.TestCopyTextureToTexture(\n        { texture: srcTexture, origin: { x: 0, y: 0, z: 0 }, mipLevel: srcCopyLevel },\n        { texture: dstTexture, origin: copyOrigin, mipLevel: dstCopyLevel },\n        { width: copyWidth, height: copyHeight, depth: copyDepth },\n        isSuccess\n      );\n    }\n\n    {\n      const isSuccess =\n        copyOrigin.x + copyWidth <= srcSizeAtLevel.width &&\n        copyOrigin.y + copyHeight <= srcSizeAtLevel.height &&\n        copyWidth <= dstSizeAtLevel.width &&\n        copyHeight <= dstSizeAtLevel.height &&\n        copyOrigin.z + copyDepth <= kTextureSize.depth;\n\n      t.TestCopyTextureToTexture(\n        { texture: srcTexture, origin: copyOrigin, mipLevel: srcCopyLevel },\n        { texture: dstTexture, origin: { x: 0, y: 0, z: 0 }, mipLevel: dstCopyLevel },\n        { width: copyWidth, height: copyHeight, depth: copyDepth },\n        isSuccess\n      );\n    }\n  });\n\ng.test('copy_within_same_texture')\n  .params(\n    params()\n      .combine(poptions('srcCopyOriginZ', [0, 2, 4]))\n      .combine(poptions('dstCopyOriginZ', [0, 2, 4]))\n      .combine(poptions('copyExtentDepth', [1, 2, 3]))\n  )\n  .fn(async t => {\n    const { srcCopyOriginZ, dstCopyOriginZ, copyExtentDepth } = t.params;\n\n    const kArrayLayerCount = 7;\n\n    const testTexture = t.device.createTexture({\n      size: { width: 16, height: 16, depth: kArrayLayerCount },\n      format: 'rgba8unorm',\n      usage: GPUTextureUsage.COPY_SRC | GPUTextureUsage.COPY_DST,\n    });\n\n    const isSuccess =\n      Math.min(srcCopyOriginZ, dstCopyOriginZ) + copyExtentDepth <=\n      Math.max(srcCopyOriginZ, dstCopyOriginZ);\n    t.TestCopyTextureToTexture(\n      { texture: testTexture, origin: { x: 0, y: 0, z: srcCopyOriginZ } },\n      { texture: testTexture, origin: { x: 0, y: 0, z: dstCopyOriginZ } },\n      { width: 16, height: 16, depth: copyExtentDepth },\n      isSuccess\n    );\n  });\n\ng.test('copy_ranges_with_compressed_texture_formats')\n  .params(\n    params()\n      .combine(poptions('format', kCompressedTextureFormats))\n      .combine(\n        poptions('copyBoxOffsets', [\n          { x: 0, y: 0, z: 0, width: 0, height: 0, depth: -2 },\n          { x: 1, y: 0, z: 0, width: 0, height: 0, depth: -2 },\n          { x: 4, y: 0, z: 0, width: 0, height: 0, depth: -2 },\n          { x: 0, y: 0, z: 0, width: -1, height: 0, depth: -2 },\n          { x: 0, y: 0, z: 0, width: -4, height: 0, depth: -2 },\n          { x: 0, y: 1, z: 0, width: 0, height: 0, depth: -2 },\n          { x: 0, y: 4, z: 0, width: 0, height: 0, depth: -2 },\n          { x: 0, y: 0, z: 0, width: 0, height: -1, depth: -2 },\n          { x: 0, y: 0, z: 0, width: 0, height: -4, depth: -2 },\n          { x: 0, y: 0, z: 0, width: 0, height: 0, depth: 0 },\n          { x: 0, y: 0, z: 1, width: 0, height: 0, depth: -1 },\n        ])\n      )\n      .combine(poptions('srcCopyLevel', [0, 1, 2]))\n      .combine(poptions('dstCopyLevel', [0, 1, 2]))\n  )\n  .fn(async t => {\n    const { format, copyBoxOffsets, srcCopyLevel, dstCopyLevel } = t.params;\n\n    const extension: GPUExtensionName | undefined = kAllTextureFormatInfo[format].extension;\n    assert(extension !== undefined);\n    await t.selectDeviceOrSkipTestCase({ extensions: [extension] });\n\n    const kTextureSize = { width: 60, height: 48, depth: 3 };\n    const kMipLevelCount = 4;\n\n    const srcTexture = t.device.createTexture({\n      size: kTextureSize,\n      format,\n      mipLevelCount: kMipLevelCount,\n      usage: GPUTextureUsage.COPY_SRC,\n    });\n    const dstTexture = t.device.createTexture({\n      size: kTextureSize,\n      format,\n      mipLevelCount: kMipLevelCount,\n      usage: GPUTextureUsage.COPY_DST,\n    });\n\n    const srcSizeAtLevel = t.GetPhysicalSubresourceSize(kTextureSize, format, srcCopyLevel);\n    const dstSizeAtLevel = t.GetPhysicalSubresourceSize(kTextureSize, format, dstCopyLevel);\n\n    const copyOrigin = { x: copyBoxOffsets.x, y: copyBoxOffsets.y, z: copyBoxOffsets.z };\n\n    const copyWidth = Math.max(\n      Math.min(srcSizeAtLevel.width, dstSizeAtLevel.width) + copyBoxOffsets.width - copyOrigin.x,\n      0\n    );\n    const copyHeight = Math.max(\n      Math.min(srcSizeAtLevel.height, dstSizeAtLevel.height) + copyBoxOffsets.height - copyOrigin.y,\n      0\n    );\n    const copyDepth = kTextureSize.depth + copyBoxOffsets.depth - copyOrigin.z;\n\n    const texelBlockWidth = kAllTextureFormatInfo[format].blockWidth;\n    const texelBlockHeight = kAllTextureFormatInfo[format].blockHeight;\n\n    const isSuccessForCompressedFormats =\n      copyOrigin.x % texelBlockWidth === 0 &&\n      copyOrigin.y % texelBlockHeight === 0 &&\n      copyWidth % texelBlockWidth === 0 &&\n      copyHeight % texelBlockHeight === 0;\n\n    {\n      const isSuccess =\n        isSuccessForCompressedFormats &&\n        copyWidth <= srcSizeAtLevel.width &&\n        copyHeight <= srcSizeAtLevel.height &&\n        copyOrigin.x + copyWidth <= dstSizeAtLevel.width &&\n        copyOrigin.y + copyHeight <= dstSizeAtLevel.height &&\n        copyOrigin.z + copyDepth <= kTextureSize.depth;\n\n      t.TestCopyTextureToTexture(\n        { texture: srcTexture, origin: { x: 0, y: 0, z: 0 }, mipLevel: srcCopyLevel },\n        { texture: dstTexture, origin: copyOrigin, mipLevel: dstCopyLevel },\n        { width: copyWidth, height: copyHeight, depth: copyDepth },\n        isSuccess\n      );\n    }\n\n    {\n      const isSuccess =\n        isSuccessForCompressedFormats &&\n        copyOrigin.x + copyWidth <= srcSizeAtLevel.width &&\n        copyOrigin.y + copyHeight <= srcSizeAtLevel.height &&\n        copyWidth <= dstSizeAtLevel.width &&\n        copyHeight <= dstSizeAtLevel.height &&\n        copyOrigin.z + copyDepth <= kTextureSize.depth;\n\n      t.TestCopyTextureToTexture(\n        { texture: srcTexture, origin: copyOrigin, mipLevel: srcCopyLevel },\n        { texture: dstTexture, origin: { x: 0, y: 0, z: 0 }, mipLevel: dstCopyLevel },\n        { width: copyWidth, height: copyHeight, depth: copyDepth },\n        isSuccess\n      );\n    }\n  });\n"],"file":"copyTextureToTexture.spec.js"}