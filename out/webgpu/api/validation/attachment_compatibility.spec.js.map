{"version":3,"sources":["../../../../src/webgpu/api/validation/attachment_compatibility.spec.ts"],"names":["description","poptions","params","makeTestGroup","range","kRegularTextureFormatInfo","kRegularTextureFormats","kSizedDepthStencilFormats","kUnsizedDepthStencilFormats","kTextureSampleCounts","kMaxColorAttachments","ValidationTest","kColorAttachmentCounts","i","kDepthStencilAttachmentFormats","undefined","F","createAttachmentTextureView","format","sampleCount","device","createTexture","size","usage","GPUTextureUsage","OUTPUT_ATTACHMENT","createView","createColorAttachment","attachment","loadValue","createDepthAttachment","depthLoadValue","depthStoreOp","stencilLoadValue","stencilStoreOp","createPassOrBundleEncoder","encoderType","colorFormats","depthStencilFormat","encoder","createCommandEncoder","passDesc","colorAttachments","Array","from","desc","depthStencilAttachment","pass","beginRenderPass","bundleEncoder","createRenderBundleEncoder","finish","bundle","executeBundles","endPass","createRenderPipeline","colorStates","depthStencilState","vertexStage","module","createShaderModule","code","entryPoint","fragmentStage","primitiveTopology","g","kColorAttachmentFormats","filter","info","color","renderable","test","combine","fn","t","passFormat","bundleFormat","expectValidationError","queue","submit","passCount","bundleCount","renderSampleCount","bundleSampleCount","encoderFormat","pipelineFormat","pipeline","setPipeline","encoderCount","pipelineCount","encoderSampleCount","pipelineSampleCount"],"mappings":"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","sourcesContent":["export const description = `\nValidation for attachment compatibility between render passes, bundles, and pipelines\n\nTODO: Add sparse color attachment compatibility test when defined by specification\n`;\n\nimport { poptions, params } from '../../../common/framework/params_builder.js';\nimport { makeTestGroup } from '../../../common/framework/test_group.js';\nimport { range } from '../../../common/framework/util/util.js';\nimport {\n  kRegularTextureFormatInfo,\n  kRegularTextureFormats,\n  kSizedDepthStencilFormats,\n  kUnsizedDepthStencilFormats,\n  kTextureSampleCounts,\n  kMaxColorAttachments,\n} from '../../capability_info.js';\n\nimport { ValidationTest, CommandBufferMaker } from './validation_test.js';\n\nconst kColorAttachmentCounts = range(kMaxColorAttachments, i => i + 1);\nconst kDepthStencilAttachmentFormats = [\n  undefined,\n  ...kSizedDepthStencilFormats,\n  ...kUnsizedDepthStencilFormats,\n] as const;\n\nclass F extends ValidationTest {\n  createAttachmentTextureView(format: GPUTextureFormat, sampleCount?: number) {\n    return this.device\n      .createTexture({\n        size: [1, 1, 1],\n        format,\n        usage: GPUTextureUsage.OUTPUT_ATTACHMENT,\n        sampleCount,\n      })\n      .createView();\n  }\n\n  createColorAttachment(\n    format: GPUTextureFormat,\n    sampleCount?: number\n  ): GPURenderPassColorAttachmentDescriptor {\n    return {\n      attachment: this.createAttachmentTextureView(format, sampleCount),\n      loadValue: [0, 0, 0, 0],\n    };\n  }\n\n  createDepthAttachment(\n    format: GPUTextureFormat,\n    sampleCount?: number\n  ): GPURenderPassDepthStencilAttachmentDescriptor {\n    return {\n      attachment: this.createAttachmentTextureView(format, sampleCount),\n      depthLoadValue: 0,\n      depthStoreOp: 'clear',\n      stencilLoadValue: 1,\n      stencilStoreOp: 'clear',\n    };\n  }\n\n  createPassOrBundleEncoder(\n    encoderType: 'render pass' | 'render bundle',\n    colorFormats: Iterable<GPUTextureFormat>,\n    depthStencilFormat?: GPUTextureFormat,\n    sampleCount?: number\n  ): CommandBufferMaker<GPURenderPassEncoder | GPURenderBundleEncoder> {\n    const encoder = this.device.createCommandEncoder();\n    const passDesc: GPURenderPassDescriptor = {\n      colorAttachments: Array.from(colorFormats, desc =>\n        this.createColorAttachment(desc, sampleCount)\n      ),\n      depthStencilAttachment:\n        depthStencilFormat !== undefined\n          ? this.createDepthAttachment(depthStencilFormat, sampleCount)\n          : undefined,\n    };\n    const pass = encoder.beginRenderPass(passDesc);\n    switch (encoderType) {\n      case 'render bundle': {\n        const bundleEncoder = this.device.createRenderBundleEncoder({\n          colorFormats,\n          depthStencilFormat,\n          sampleCount,\n        });\n\n        return {\n          encoder: bundleEncoder,\n          finish() {\n            const bundle = bundleEncoder.finish();\n            pass.executeBundles([bundle]);\n            pass.endPass();\n            return encoder.finish();\n          },\n        };\n      }\n      case 'render pass':\n        return {\n          encoder: pass,\n          finish() {\n            pass.endPass();\n            return encoder.finish();\n          },\n        };\n    }\n  }\n\n  createRenderPipeline(\n    colorStates: Iterable<GPUColorStateDescriptor>,\n    depthStencilState?: GPUDepthStencilStateDescriptor,\n    sampleCount?: number\n  ) {\n    return this.device.createRenderPipeline({\n      vertexStage: {\n        module: this.device.createShaderModule({\n          code: `\n            [[builtin(position)]] var<out> position : vec4<f32>;\n\n            [[stage(vertex)]] fn main() -> void {\n              position = vec4<f32>(0.0, 0.0, 0.0, 0.0);\n            }`,\n        }),\n        entryPoint: 'main',\n      },\n      fragmentStage: {\n        module: this.device.createShaderModule({\n          code: '[[stage(fragment)]] fn main() -> void {}',\n        }),\n        entryPoint: 'main',\n      },\n      primitiveTopology: 'triangle-list',\n      colorStates,\n      depthStencilState,\n      sampleCount,\n    });\n  }\n}\n\nexport const g = makeTestGroup(F);\n\nconst kColorAttachmentFormats = kRegularTextureFormats.filter(format => {\n  const info = kRegularTextureFormatInfo[format];\n  return info.color && info.renderable;\n});\n\ng.test('render_pass_and_bundle,color_format')\n  .desc('Test that color attachment formats in render passes and bundles must match.')\n  .params(\n    params()\n      .combine(poptions('passFormat', kColorAttachmentFormats))\n      .combine(poptions('bundleFormat', kColorAttachmentFormats))\n  )\n  .fn(t => {\n    const { passFormat, bundleFormat } = t.params;\n    const bundleEncoder = t.device.createRenderBundleEncoder({\n      colorFormats: [bundleFormat],\n    });\n    const bundle = bundleEncoder.finish();\n    const encoder = t.device.createCommandEncoder();\n    const pass = encoder.beginRenderPass({\n      colorAttachments: [t.createColorAttachment(passFormat)],\n    });\n    pass.executeBundles([bundle]);\n    pass.endPass();\n    t.expectValidationError(() => {\n      t.queue.submit([encoder.finish()]);\n    }, passFormat !== bundleFormat);\n  });\n\ng.test('render_pass_and_bundle,color_count')\n  .desc(\n    `\n  Test that the number of color attachments in render passes and bundles must match.\n\n  TODO: Add sparse color attachment compatibility test when defined by specification\n  `\n  )\n  .params(\n    params()\n      .combine(poptions('passCount', kColorAttachmentCounts))\n      .combine(poptions('bundleCount', kColorAttachmentCounts))\n  )\n  .fn(t => {\n    const { passCount, bundleCount } = t.params;\n    const bundleEncoder = t.device.createRenderBundleEncoder({\n      colorFormats: range(bundleCount, () => 'rgba8unorm'),\n    });\n    const bundle = bundleEncoder.finish();\n\n    const encoder = t.device.createCommandEncoder();\n    const pass = encoder.beginRenderPass({\n      colorAttachments: range(passCount, () => t.createColorAttachment('rgba8unorm')),\n    });\n    pass.executeBundles([bundle]);\n    pass.endPass();\n    t.expectValidationError(() => {\n      t.queue.submit([encoder.finish()]);\n    }, passCount !== bundleCount);\n  });\n\ng.test('render_pass_and_bundle,depth_format')\n  .desc('Test that the depth attachment format in render passes and bundles must match.')\n  .params(\n    params()\n      .combine(poptions('passFormat', kDepthStencilAttachmentFormats))\n      .combine(poptions('bundleFormat', kDepthStencilAttachmentFormats))\n  )\n  .fn(t => {\n    const { passFormat, bundleFormat } = t.params;\n    const bundleEncoder = t.device.createRenderBundleEncoder({\n      colorFormats: ['rgba8unorm'],\n      depthStencilFormat: bundleFormat,\n    });\n    const bundle = bundleEncoder.finish();\n    const encoder = t.device.createCommandEncoder();\n    const pass = encoder.beginRenderPass({\n      colorAttachments: [t.createColorAttachment('rgba8unorm')],\n      depthStencilAttachment:\n        passFormat !== undefined ? t.createDepthAttachment(passFormat) : undefined,\n    });\n    pass.executeBundles([bundle]);\n    pass.endPass();\n    t.expectValidationError(() => {\n      t.queue.submit([encoder.finish()]);\n    }, passFormat !== bundleFormat);\n  });\n\ng.test('render_pass_and_bundle,sample_count')\n  .desc('Test that the sample count in render passes and bundles must match.')\n  .params(\n    params()\n      .combine(poptions('renderSampleCount', kTextureSampleCounts))\n      .combine(poptions('bundleSampleCount', kTextureSampleCounts))\n  )\n  .fn(t => {\n    const { renderSampleCount, bundleSampleCount } = t.params;\n    const bundleEncoder = t.device.createRenderBundleEncoder({\n      colorFormats: ['rgba8unorm'],\n      sampleCount: bundleSampleCount,\n    });\n    const bundle = bundleEncoder.finish();\n    const encoder = t.device.createCommandEncoder();\n    const pass = encoder.beginRenderPass({\n      colorAttachments: [t.createColorAttachment('rgba8unorm', renderSampleCount)],\n    });\n    pass.executeBundles([bundle]);\n    pass.endPass();\n    t.expectValidationError(() => {\n      t.queue.submit([encoder.finish()]);\n    }, renderSampleCount !== bundleSampleCount);\n  });\n\ng.test('render_pass_or_bundle_and_pipeline,color_format')\n  .desc(\n    `\nTest that color attachment formats in render passes or bundles match the pipeline color format.\n`\n  )\n  .params(\n    params()\n      .combine(poptions('encoderType', ['render pass', 'render bundle'] as const))\n      .combine(poptions('encoderFormat', kColorAttachmentFormats))\n      .combine(poptions('pipelineFormat', kColorAttachmentFormats))\n  )\n  .fn(t => {\n    const { encoderType, encoderFormat, pipelineFormat } = t.params;\n    const pipeline = t.createRenderPipeline([{ format: pipelineFormat }]);\n\n    const { encoder, finish } = t.createPassOrBundleEncoder(encoderType, [encoderFormat]);\n    encoder.setPipeline(pipeline);\n\n    t.expectValidationError(() => {\n      t.queue.submit([finish()]);\n    }, encoderFormat !== pipelineFormat);\n  });\n\ng.test('render_pass_or_bundle_and_pipeline,color_count')\n  .desc(\n    `\nTest that the number of color attachments in render passes or bundles match the pipeline color\ncount.\n\nTODO: Add sparse color attachment compatibility test when defined by specification\n`\n  )\n  .params(\n    params()\n      .combine(poptions('encoderType', ['render pass', 'render bundle'] as const))\n      .combine(poptions('encoderCount', kColorAttachmentCounts))\n      .combine(poptions('pipelineCount', kColorAttachmentCounts))\n  )\n  .fn(t => {\n    const { encoderType, encoderCount, pipelineCount } = t.params;\n    const pipeline = t.createRenderPipeline(range(pipelineCount, () => ({ format: 'rgba8unorm' })));\n\n    const { encoder, finish } = t.createPassOrBundleEncoder(\n      encoderType,\n      range(encoderCount, () => 'rgba8unorm')\n    );\n    encoder.setPipeline(pipeline);\n\n    t.expectValidationError(() => {\n      t.queue.submit([finish()]);\n    }, encoderCount !== pipelineCount);\n  });\n\ng.test('render_pass_or_bundle_and_pipeline,depth_format')\n  .desc(\n    `\nTest that the depth attachment format in render passes or bundles match the pipeline depth format.\n`\n  )\n  .params(\n    params()\n      .combine(poptions('encoderType', ['render pass', 'render bundle'] as const))\n      .combine(poptions('encoderFormat', kDepthStencilAttachmentFormats))\n      .combine(poptions('pipelineFormat', kDepthStencilAttachmentFormats))\n  )\n  .fn(t => {\n    const { encoderType, encoderFormat, pipelineFormat } = t.params;\n    const pipeline = t.createRenderPipeline(\n      [{ format: 'rgba8unorm' }],\n      pipelineFormat !== undefined ? { format: pipelineFormat } : undefined\n    );\n\n    const { encoder, finish } = t.createPassOrBundleEncoder(\n      encoderType,\n      ['rgba8unorm'],\n      encoderFormat\n    );\n    encoder.setPipeline(pipeline);\n\n    t.expectValidationError(() => {\n      t.queue.submit([finish()]);\n    }, encoderFormat !== pipelineFormat);\n  });\n\ng.test('render_pass_or_bundle_and_pipeline,sample_count')\n  .desc(\n    `\nTest that the sample count in render passes or bundles match the pipeline sample count.\n`\n  )\n  .params(\n    params()\n      .combine(poptions('encoderType', ['render pass', 'render bundle'] as const))\n      .combine(poptions('encoderSampleCount', kTextureSampleCounts))\n      .combine(poptions('pipelineSampleCount', kTextureSampleCounts))\n  )\n  .fn(t => {\n    const { encoderType, encoderSampleCount, pipelineSampleCount } = t.params;\n    const pipeline = t.createRenderPipeline(\n      [{ format: 'rgba8unorm' }],\n      undefined,\n      pipelineSampleCount\n    );\n\n    const { encoder, finish } = t.createPassOrBundleEncoder(\n      encoderType,\n      ['rgba8unorm'],\n      undefined,\n      encoderSampleCount\n    );\n    encoder.setPipeline(pipeline);\n\n    t.expectValidationError(() => {\n      t.queue.submit([finish()]);\n    }, encoderSampleCount !== pipelineSampleCount);\n  });\n"],"file":"attachment_compatibility.spec.js"}