{"version":3,"sources":["../../../../src/webgpu/api/validation/createBindGroupLayout.spec.ts"],"names":["description","pbool","poptions","params","makeTestGroup","kBindingTypeInfo","kBindingTypes","kBufferBindingTypeInfo","kMaxBindingsPerBindGroup","kShaderStages","kShaderStageCombinations","kTextureBindingTypeInfo","kTextureComponentTypes","kTextureViewDimensions","kTextureViewDimensionInfo","kAllTextureFormats","kAllTextureFormatInfo","ValidationTest","clone","descriptor","JSON","parse","stringify","g","test","fn","t","goodDescriptor","entries","binding","visibility","GPUShaderStage","COMPUTE","type","device","createBindGroupLayout","badDescriptor","expectValidationError","combine","info","storageTextureFormat","resource","undefined","success","validStages","_","hasDynamicOffset","minBufferBindingSize","textureComponentType","viewDimension","storage","desc","maxDynamicBufferCount","maxDynamicBufferBindings","i","push","length","pickExtraBindingTypes","bindingType","extraTypeSame","extraBindingType","perStageLimitClass","class","kCasesForMaxResourcesPerStageTests","filter","p","maxedType","maxedVisibility","expand","extraType","extraVisibility","maxedTypeInfo","maxedCount","max","extraTypeInfo","maxResourceBindings","newDescriptor","shouldError","goodLayout","createPipelineLayout","bindGroupLayouts","extraLayout","newBindingCountsTowardSamePerStageLimit","layoutExceedsPerStageLimit"],"mappings":"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","sourcesContent":["export const description = `\ncreateBindGroupLayout validation tests.\n\nTODO: review existing tests, write descriptions, and make sure tests are complete.\n`;\n\nimport { pbool, poptions, params } from '../../../common/framework/params_builder.js';\nimport { makeTestGroup } from '../../../common/framework/test_group.js';\nimport {\n  kBindingTypeInfo,\n  kBindingTypes,\n  kBufferBindingTypeInfo,\n  kMaxBindingsPerBindGroup,\n  kShaderStages,\n  kShaderStageCombinations,\n  kTextureBindingTypeInfo,\n  kTextureComponentTypes,\n  kTextureViewDimensions,\n  kTextureViewDimensionInfo,\n  kAllTextureFormats,\n  kAllTextureFormatInfo,\n} from '../../capability_info.js';\n\nimport { ValidationTest } from './validation_test.js';\n\nfunction clone<T extends GPUBindGroupLayoutDescriptor>(descriptor: T): T {\n  return JSON.parse(JSON.stringify(descriptor));\n}\n\nexport const g = makeTestGroup(ValidationTest);\n\ng.test('some_binding_index_was_specified_more_than_once').fn(async t => {\n  const goodDescriptor = {\n    entries: [\n      { binding: 0, visibility: GPUShaderStage.COMPUTE, type: 'storage-buffer' as const },\n      { binding: 1, visibility: GPUShaderStage.COMPUTE, type: 'storage-buffer' as const },\n    ],\n  };\n\n  // Control case\n  t.device.createBindGroupLayout(goodDescriptor);\n\n  const badDescriptor = clone(goodDescriptor);\n  badDescriptor.entries[1].binding = 0;\n\n  // Binding index 0 can't be specified twice.\n  t.expectValidationError(() => {\n    t.device.createBindGroupLayout(badDescriptor);\n  });\n});\n\ng.test('visibility')\n  .params(\n    params()\n      .combine(poptions('type', kBindingTypes))\n      .combine(poptions('visibility', kShaderStageCombinations))\n  )\n  .fn(async t => {\n    const { type, visibility } = t.params;\n\n    const info = kBindingTypeInfo[type];\n    const storageTextureFormat = info.resource === 'storageTex' ? 'rgba8unorm' : undefined;\n\n    const success = (visibility & ~kBindingTypeInfo[type].validStages) === 0;\n\n    t.expectValidationError(() => {\n      t.device.createBindGroupLayout({\n        entries: [{ binding: 0, visibility, type, storageTextureFormat }],\n      });\n    }, !success);\n  });\n\ng.test('bindingTypeSpecific_optional_members')\n  .params(\n    params()\n      .combine(poptions('type', kBindingTypes))\n      .combine([\n        // Case with every member set to `undefined`.\n        {\n          // Workaround for TS inferring the type of [ {}, ...x ] overly conservatively, as {}[].\n          _: 0,\n        },\n        // Cases with one member set.\n        ...pbool('hasDynamicOffset'),\n        ...poptions('minBufferBindingSize', [0, 4]),\n        ...poptions('textureComponentType', kTextureComponentTypes),\n        ...poptions('viewDimension', kTextureViewDimensions),\n        ...poptions('storageTextureFormat', kAllTextureFormats),\n      ])\n  )\n  .fn(t => {\n    const {\n      type,\n      hasDynamicOffset,\n      minBufferBindingSize,\n      textureComponentType,\n      viewDimension,\n      storageTextureFormat,\n    } = t.params;\n\n    let success = true;\n    if (!(type in kBufferBindingTypeInfo)) {\n      success &&= hasDynamicOffset === undefined;\n      success &&= minBufferBindingSize === undefined;\n    }\n    if (!(type in kTextureBindingTypeInfo)) {\n      success &&= viewDimension === undefined;\n    }\n    if (kBindingTypeInfo[type].resource !== 'sampledTex') {\n      success &&= textureComponentType === undefined;\n    }\n    if (kBindingTypeInfo[type].resource !== 'storageTex') {\n      success &&= storageTextureFormat === undefined;\n    } else {\n      success &&= viewDimension === undefined || kTextureViewDimensionInfo[viewDimension].storage;\n      success &&=\n        storageTextureFormat === undefined || kAllTextureFormatInfo[storageTextureFormat].storage;\n    }\n\n    t.expectValidationError(() => {\n      t.device.createBindGroupLayout({\n        entries: [\n          {\n            binding: 0,\n            visibility: GPUShaderStage.COMPUTE,\n            type,\n            hasDynamicOffset,\n            minBufferBindingSize,\n            textureComponentType,\n            viewDimension,\n            storageTextureFormat,\n          },\n        ],\n      });\n    }, !success);\n  });\n\ng.test('multisample_requires_2d_view_dimension')\n  .params(params().combine(poptions('viewDimension', [undefined, ...kTextureViewDimensions])))\n  .fn(async t => {\n    const { viewDimension } = t.params;\n\n    const success = viewDimension === '2d' || viewDimension === undefined;\n\n    t.expectValidationError(() => {\n      t.device.createBindGroupLayout({\n        entries: [\n          {\n            binding: 0,\n            visibility: GPUShaderStage.COMPUTE,\n            type: 'multisampled-texture',\n            viewDimension,\n          },\n        ],\n      });\n    }, !success);\n  });\n\ng.test('number_of_dynamic_buffers_exceeds_the_maximum_value')\n  .desc(\n    `TODO: describe\n\nTODO(#230): Update to enforce per-stage and per-pipeline-layout limits on BGLs as well.`\n  )\n  .params([\n    { type: 'storage-buffer' as const, maxDynamicBufferCount: 4 },\n    { type: 'uniform-buffer' as const, maxDynamicBufferCount: 8 },\n  ])\n  .fn(async t => {\n    const { type, maxDynamicBufferCount } = t.params;\n\n    const maxDynamicBufferBindings: GPUBindGroupLayoutEntry[] = [];\n    for (let i = 0; i < maxDynamicBufferCount; i++) {\n      maxDynamicBufferBindings.push({\n        binding: i,\n        visibility: GPUShaderStage.COMPUTE,\n        type,\n        hasDynamicOffset: true,\n      });\n    }\n\n    const goodDescriptor = {\n      entries: [\n        ...maxDynamicBufferBindings,\n        {\n          binding: maxDynamicBufferBindings.length,\n          visibility: GPUShaderStage.COMPUTE,\n          type,\n          hasDynamicOffset: false,\n        },\n      ],\n    };\n\n    // Control case\n    t.device.createBindGroupLayout(goodDescriptor);\n\n    // Dynamic buffers exceed maximum in a bind group layout.\n    const badDescriptor = clone(goodDescriptor);\n    badDescriptor.entries[maxDynamicBufferCount].hasDynamicOffset = true;\n\n    t.expectValidationError(() => {\n      t.device.createBindGroupLayout(badDescriptor);\n    });\n  });\n\n// One bind group layout will be filled with kPerStageBindingLimit[...] of the type |type|.\n// For each item in the array returned here, a case will be generated which tests a pipeline\n// layout with one extra bind group layout with one extra binding. That extra binding will have:\n//\n//   - If extraTypeSame, any of the binding types which counts toward the same limit as |type|.\n//     (i.e. 'storage-buffer' <-> 'readonly-storage-buffer').\n//   - Otherwise, an arbitrary other type.\nfunction* pickExtraBindingTypes(\n  bindingType: GPUBindingType,\n  extraTypeSame: boolean\n): IterableIterator<GPUBindingType> {\n  const info = kBindingTypeInfo[bindingType];\n  if (extraTypeSame) {\n    for (const extraBindingType of kBindingTypes) {\n      if (\n        info.perStageLimitClass.class ===\n        kBindingTypeInfo[extraBindingType].perStageLimitClass.class\n      ) {\n        yield extraBindingType;\n      }\n    }\n  } else {\n    yield info.perStageLimitClass.class === 'sampler' ? 'sampled-texture' : 'sampler';\n  }\n}\n\nconst kCasesForMaxResourcesPerStageTests = params()\n  .combine(poptions('maxedType', kBindingTypes))\n  .combine(poptions('maxedVisibility', kShaderStages))\n  .filter(p => (kBindingTypeInfo[p.maxedType].validStages & p.maxedVisibility) !== 0)\n  .expand(function* (p) {\n    for (const extraTypeSame of [true, false]) {\n      yield* poptions('extraType', pickExtraBindingTypes(p.maxedType, extraTypeSame));\n    }\n  })\n  .combine(poptions('extraVisibility', kShaderStages))\n  .filter(p => (kBindingTypeInfo[p.extraType].validStages & p.extraVisibility) !== 0);\n\n// Should never fail unless kMaxBindingsPerBindGroup is exceeded, because the validation for\n// resources-of-type-per-stage is in pipeline layout creation.\ng.test('max_resources_per_stage,in_bind_group_layout')\n  .desc(\n    `TODO: describe\n\nTODO(#230): Update to enforce per-stage and per-pipeline-layout limits on BGLs as well.`\n  )\n  .params(kCasesForMaxResourcesPerStageTests)\n  .fn(async t => {\n    const { maxedType, extraType, maxedVisibility, extraVisibility } = t.params;\n    const maxedTypeInfo = kBindingTypeInfo[maxedType];\n    const maxedCount = maxedTypeInfo.perStageLimitClass.max;\n    const extraTypeInfo = kBindingTypeInfo[extraType];\n\n    const maxResourceBindings: GPUBindGroupLayoutEntry[] = [];\n    for (let i = 0; i < maxedCount; i++) {\n      maxResourceBindings.push({\n        binding: i,\n        visibility: maxedVisibility,\n        type: maxedType,\n        storageTextureFormat: maxedTypeInfo.resource === 'storageTex' ? 'rgba8unorm' : undefined,\n      });\n    }\n\n    const goodDescriptor = { entries: maxResourceBindings };\n\n    // Control\n    t.device.createBindGroupLayout(goodDescriptor);\n\n    const newDescriptor = clone(goodDescriptor);\n    newDescriptor.entries.push({\n      binding: maxedCount,\n      visibility: extraVisibility,\n      type: extraType,\n      storageTextureFormat: extraTypeInfo.resource === 'storageTex' ? 'rgba8unorm' : undefined,\n    });\n\n    const shouldError = maxedCount >= kMaxBindingsPerBindGroup;\n\n    t.expectValidationError(() => {\n      t.device.createBindGroupLayout(newDescriptor);\n    }, shouldError);\n  });\n\n// One pipeline layout can have a maximum number of each type of binding *per stage* (which is\n// different for each type). Test that the max works, then add one more binding of same-or-different\n// type and same-or-different visibility.\ng.test('max_resources_per_stage,in_pipeline_layout')\n  .params(kCasesForMaxResourcesPerStageTests)\n  .fn(async t => {\n    const { maxedType, extraType, maxedVisibility, extraVisibility } = t.params;\n    const maxedTypeInfo = kBindingTypeInfo[maxedType];\n    const maxedCount = maxedTypeInfo.perStageLimitClass.max;\n    const extraTypeInfo = kBindingTypeInfo[extraType];\n\n    const maxResourceBindings: GPUBindGroupLayoutEntry[] = [];\n    for (let i = 0; i < maxedCount; i++) {\n      maxResourceBindings.push({\n        binding: i,\n        visibility: maxedVisibility,\n        type: maxedType,\n        storageTextureFormat: maxedTypeInfo.resource === 'storageTex' ? 'rgba8unorm' : undefined,\n      });\n    }\n\n    const goodLayout = t.device.createBindGroupLayout({ entries: maxResourceBindings });\n\n    // Control\n    t.device.createPipelineLayout({ bindGroupLayouts: [goodLayout] });\n\n    const extraLayout = t.device.createBindGroupLayout({\n      entries: [\n        {\n          binding: 0,\n          visibility: extraVisibility,\n          type: extraType,\n          storageTextureFormat: extraTypeInfo.resource === 'storageTex' ? 'rgba8unorm' : undefined,\n        },\n      ],\n    });\n\n    // Some binding types use the same limit, e.g. 'storage-buffer' and 'readonly-storage-buffer'.\n    const newBindingCountsTowardSamePerStageLimit =\n      (maxedVisibility & extraVisibility) !== 0 &&\n      kBindingTypeInfo[maxedType].perStageLimitClass.class ===\n        kBindingTypeInfo[extraType].perStageLimitClass.class;\n    const layoutExceedsPerStageLimit = newBindingCountsTowardSamePerStageLimit;\n\n    t.expectValidationError(() => {\n      t.device.createPipelineLayout({ bindGroupLayouts: [goodLayout, extraLayout] });\n    }, layoutExceedsPerStageLimit);\n  });\n"],"file":"createBindGroupLayout.spec.js"}