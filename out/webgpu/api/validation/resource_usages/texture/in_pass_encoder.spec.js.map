{"version":3,"sources":["../../../../../../src/webgpu/api/validation/resource_usages/texture/in_pass_encoder.spec.ts"],"names":["description","pbool","poptions","params","pp","makeTestGroup","assert","kDepthStencilFormats","kDepthStencilFormatInfo","kTextureBindingTypes","kTextureBindingTypeInfo","kShaderStages","GPUConst","ValidationTest","SIZE","TextureUsageTracking","createTexture","options","width","height","arrayLayerCount","mipLevelCount","sampleCount","format","usage","GPUTextureUsage","OUTPUT_ATTACHMENT","SAMPLED","device","size","depth","dimension","createBindGroup","index","view","bindingType","bindingTexFormat","entries","binding","resource","layout","createBindGroupLayout","visibility","GPUShaderStage","COMPUTE","FRAGMENT","type","viewDimension","storageTextureFormat","createAndExecuteBundle","bindGroup","pass","bundleEncoder","createRenderBundleEncoder","colorFormats","setBindGroup","bundle","finish","executeBundles","beginSimpleRenderPass","encoder","beginRenderPass","colorAttachments","attachment","loadValue","r","g","b","a","storeOp","testValidationScope","compute","STORAGE","createView","bindGroup0","undefined","bindGroup1","createCommandEncoder","beginComputePass","pipeline","createNoOpComputePipeline","createNoOpRenderPipeline","setPipeline","issueDrawOrDispatch","dispatch","draw","setComputePipelineAndCallDispatch","BASE_LEVEL","TOTAL_LEVELS","BASE_LAYER","TOTAL_LAYERS","SLICE_COUNT","test","combine","levelCount0","layerCount0","baseLevel1","levelCount1","baseLayer1","layerCount1","_resourceSuccess","type0","type1","_usageSuccess","unless","p","binding0InBundle","binding1InBundle","fn","t","texture","dimension0","view0","baseMipLevel","baseArrayLayer","dimension1","view1","endPass","storageTextureFormat0","GPURenderPassEncoder","storageTextureFormat1","success","expectValidationError","baseLevel","baseLayer","aspect0","stencil","aspect1","aspect","depthStencilAttachment","depthStoreOp","depthLoadValue","stencilStoreOp","stencilLoadValue","disjointAspects","Boolean","writeVisibility","ShaderStage","VERTEX","readVisibility","writeHasVertexStage","texUsage","bglEntries","bgEntries","push","callDrawOrDispatch","info","sampledView","sampledStorageView","bglEntries0","bgEntries0","bindGroups","binding0TexFormat","binding1TexFormat","bindingsInBundle","i","bundleInPass","useBindGroup0","useBindGroup1","setBindGroupsOrder","wgslVertex","wgslFragment","_if","_endif","wgslCompute","createComputePipeline","computeStage","module","createShaderModule","code","entryPoint","createRenderPipeline","vertexStage","fragmentStage","primitiveTopology","colorStates","index0","index1","pass1"],"mappings":";AAAA;AACA,GADA,OAAO,MAAMA,WAAW,GAAI;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAxCO,CA0CP,SAASC,KAAT,EAAgBC,QAAhB,EAA0BC,MAA1B,QAAwC,mDAAxC;AACA,SAASC,EAAT,QAAmB,iDAAnB;AACA,SAASC,aAAT,QAA8B,+CAA9B;AACA,SAASC,MAAT,QAAuB,8CAAvB;AACA;AACEC,oBADF;AAEEC,uBAFF;AAGEC,oBAHF;AAIEC,uBAJF;AAKEC,aALF;AAMO,gCANP;AAOA,SAASC,QAAT,QAAyB,0BAAzB;AACA,SAASC,cAAT,QAA+B,0BAA/B;;AAEA,MAAMC,IAAI,GAAG,EAAb;AACA,MAAMC,oBAAN,SAAmCF,cAAnC,CAAkD;AAChDG,EAAAA,aAAa;AACXC,EAAAA,OAQC;;;;;;;;AAAG,IATO;AAUC;AACZ,UAAM;AACJC,MAAAA,KAAK,GAAGJ,IADJ;AAEJK,MAAAA,MAAM,GAAGL,IAFL;AAGJM,MAAAA,eAAe,GAAG,CAHd;AAIJC,MAAAA,aAAa,GAAG,CAJZ;AAKJC,MAAAA,WAAW,GAAG,CALV;AAMJC,MAAAA,MAAM,GAAG,YANL;AAOJC,MAAAA,KAAK,GAAGC,eAAe,CAACC,iBAAhB,GAAoCD,eAAe,CAACE,OAPxD;AAQFV,IAAAA,OARJ;;AAUA,WAAO,KAAKW,MAAL,CAAYZ,aAAZ,CAA0B;AAC/Ba,MAAAA,IAAI,EAAE,EAAEX,KAAF,EAASC,MAAT,EAAiBW,KAAK,EAAEV,eAAxB,EADyB;AAE/BC,MAAAA,aAF+B;AAG/BC,MAAAA,WAH+B;AAI/BS,MAAAA,SAAS,EAAE,IAJoB;AAK/BR,MAAAA,MAL+B;AAM/BC,MAAAA,KAN+B,EAA1B,CAAP;;AAQD;;AAEDQ,EAAAA,eAAe;AACbC,EAAAA,KADa;AAEbC,EAAAA,IAFa;AAGbC,EAAAA,WAHa;AAIbJ,EAAAA,SAJa;AAKbK,EAAAA,gBALa;AAMC;AACd,WAAO,KAAKR,MAAL,CAAYI,eAAZ,CAA4B;AACjCK,MAAAA,OAAO,EAAE,CAAC,EAAEC,OAAO,EAAEL,KAAX,EAAkBM,QAAQ,EAAEL,IAA5B,EAAD,CADwB;AAEjCM,MAAAA,MAAM,EAAE,KAAKZ,MAAL,CAAYa,qBAAZ,CAAkC;AACxCJ,QAAAA,OAAO,EAAE;AACP;AACEC,UAAAA,OAAO,EAAEL,KADX;AAEES,UAAAA,UAAU,EAAEC,cAAc,CAACC,OAAf,GAAyBD,cAAc,CAACE,QAFtD;AAGEC,UAAAA,IAAI,EAAEX,WAHR;AAIEY,UAAAA,aAAa,EAAEhB,SAJjB;AAKEiB,UAAAA,oBAAoB,EAAEZ,gBALxB,EADO,CAD+B,EAAlC,CAFyB,EAA5B,CAAP;;;;;AAcD;;AAEDa,EAAAA,sBAAsB,CAAChB,KAAD,EAAgBiB,SAAhB,EAAyCC,IAAzC,EAAqE;AACzF,UAAMC,aAAa,GAAG,KAAKxB,MAAL,CAAYyB,yBAAZ,CAAsC;AAC1DC,MAAAA,YAAY,EAAE,CAAC,YAAD,CAD4C,EAAtC,CAAtB;;AAGAF,IAAAA,aAAa,CAACG,YAAd,CAA2BtB,KAA3B,EAAkCiB,SAAlC;AACA,UAAMM,MAAM,GAAGJ,aAAa,CAACK,MAAd,EAAf;AACAN,IAAAA,IAAI,CAACO,cAAL,CAAoB,CAACF,MAAD,CAApB;AACD;;AAEDG,EAAAA,qBAAqB,CAACC,OAAD,EAA6B1B,IAA7B,EAAyE;AAC5F,WAAO0B,OAAO,CAACC,eAAR,CAAwB;AAC7BC,MAAAA,gBAAgB,EAAE;AAChB;AACEC,QAAAA,UAAU,EAAE7B,IADd;AAEE8B,QAAAA,SAAS,EAAE,EAAEC,CAAC,EAAE,GAAL,EAAUC,CAAC,EAAE,GAAb,EAAkBC,CAAC,EAAE,GAArB,EAA0BC,CAAC,EAAE,GAA7B,EAFb;AAGEC,QAAAA,OAAO,EAAE,OAHX,EADgB,CADW,EAAxB,CAAP;;;;AASD;;AAEDC,EAAAA,mBAAmB;AACjBC,EAAAA,OADiB;;;;;;;AAQjB;AACA;AACA;AACA,UAAMrC,IAAI,GAAG,KAAKlB,aAAL,CAAmB;AAC9BQ,MAAAA,KAAK,EAAEC,eAAe,CAAC+C,OAAhB,GAA0B/C,eAAe,CAACE,OADnB,EAAnB;AAEV8C,IAAAA,UAFU,EAAb;AAGA,UAAMC,UAAU,GAAG,KAAK1C,eAAL,CAAqB,CAArB,EAAwBE,IAAxB,EAA8B,iBAA9B,EAAiD,IAAjD,EAAuDyC,SAAvD,CAAnB;AACA,UAAMC,UAAU,GAAG,KAAK5C,eAAL;AACjB,KADiB;AAEjBE,IAAAA,IAFiB;AAGjB,+BAHiB;AAIjB,QAJiB;AAKjB,gBALiB,CAAnB;;;AAQA,UAAM0B,OAAO,GAAG,KAAKhC,MAAL,CAAYiD,oBAAZ,EAAhB;AACA,UAAM1B,IAAI,GAAGoB,OAAO;AAChBX,IAAAA,OAAO,CAACkB,gBAAR,EADgB;AAEhB,SAAKnB,qBAAL,CAA2BC,OAA3B,EAAoC,KAAK5C,aAAL,GAAqByD,UAArB,EAApC,CAFJ;;AAIA;AACA,UAAMM,QAAQ,GAAGR,OAAO,GAAG,KAAKS,yBAAL,EAAH,GAAsC,KAAKC,wBAAL,EAA9D;AACA,WAAO;AACLP,MAAAA,UADK;AAELE,MAAAA,UAFK;AAGLhB,MAAAA,OAHK;AAILT,MAAAA,IAJK;AAKL4B,MAAAA,QALK,EAAP;;AAOD;;AAEDG,EAAAA,WAAW;AACT/B,EAAAA,IADS;AAET4B,EAAAA,QAFS;AAGTR,EAAAA,OAHS;AAIT;AACA,QAAIA,OAAJ,EAAa;AACVpB,MAAAA,IAAD,CAAgC+B,WAAhC,CAA4CH,QAA5C;AACD,KAFD,MAEO;AACJ5B,MAAAA,IAAD,CAA+B+B,WAA/B,CAA2CH,QAA3C;AACD;AACF;;AAEDI,EAAAA,mBAAmB,CAAChC,IAAD,EAAqDoB,OAArD,EAAuE;AACxF,QAAIA,OAAJ,EAAa;AACVpB,MAAAA,IAAD,CAAgCiC,QAAhC,CAAyC,CAAzC;AACD,KAFD,MAEO;AACJjC,MAAAA,IAAD,CAA+BkC,IAA/B,CAAoC,CAApC,EAAuC,CAAvC,EAA0C,CAA1C,EAA6C,CAA7C;AACD;AACF;;AAEDC,EAAAA,iCAAiC,CAACnC,IAAD,EAA8B;AAC7D,UAAM4B,QAAQ,GAAG,KAAKC,yBAAL,EAAjB;AACA7B,IAAAA,IAAI,CAAC+B,WAAL,CAAiBH,QAAjB;AACA5B,IAAAA,IAAI,CAACiC,QAAL,CAAc,CAAd;AACD,GA3I+C;;;AA8IlD,OAAO,MAAMlB,CAAC,GAAG7D,aAAa,CAACU,oBAAD,CAAvB;;AAEP,MAAMwE,UAAU,GAAG,CAAnB;AACA,MAAMC,YAAY,GAAG,CAArB;AACA,MAAMC,UAAU,GAAG,CAAnB;AACA,MAAMC,YAAY,GAAG,CAArB;AACA,MAAMC,WAAW,GAAG,CAApB;;AAEA;AACAzB,CAAC,CAAC0B,IAAF,CAAO,sDAAP;AACGzF,MADH;AAEIA,MAAM;AACH0F,OADH,CACW5F,KAAK,CAAC,SAAD,CADhB;AAEG4F,OAFH,CAEW5F,KAAK,CAAC,kBAAD,CAFhB;AAGG4F,OAHH,CAGW5F,KAAK,CAAC,kBAAD,CAHhB;AAIG4F,OAJH,CAIW;AACP;AACA;AACEC,EAAAA,WAAW,EAAE,CADf;AAEEC,EAAAA,WAAW,EAAE,CAFf;AAGEC,EAAAA,UAAU,EAAET,UAHd;AAIEU,EAAAA,WAAW,EAAE,CAJf;AAKEC,EAAAA,UAAU,EAAET,UALd;AAMEU,EAAAA,WAAW,EAAE,CANf;AAOEC,EAAAA,gBAAgB,EAAE,KAPpB,EAFO;;;AAYP;AACA;AACEN,EAAAA,WAAW,EAAE,CADf;AAEEC,EAAAA,WAAW,EAAE,CAFf;AAGEC,EAAAA,UAAU,EAAET,UAAU,GAAG,CAH3B;AAIEU,EAAAA,WAAW,EAAE,CAJf;AAKEC,EAAAA,UAAU,EAAET,UALd;AAMEU,EAAAA,WAAW,EAAE,CANf;AAOEC,EAAAA,gBAAgB,EAAE,IAPpB,EAbO;;;AAuBP;AACA;AACEN,EAAAA,WAAW,EAAE,CADf;AAEEC,EAAAA,WAAW,EAAE,CAFf;AAGEC,EAAAA,UAAU,EAAET,UAHd;AAIEU,EAAAA,WAAW,EAAE,CAJf;AAKEC,EAAAA,UAAU,EAAET,UAAU,GAAG,CAL3B;AAMEU,EAAAA,WAAW,EAAE,CANf;AAOEC,EAAAA,gBAAgB,EAAE,IAPpB,EAxBO;;;AAkCP;AACA;AACEN,EAAAA,WAAW,EAAE,CADf;AAEEC,EAAAA,WAAW,EAAE,CAFf;AAGEC,EAAAA,UAAU,EAAE,CAHd;AAIEC,EAAAA,WAAW,EAAET,YAJf;AAKEU,EAAAA,UAAU,EAAET,UALd;AAMEU,EAAAA,WAAW,EAAE,CANf;AAOEC,EAAAA,gBAAgB,EAAE,KAPpB,EAnCO;;;AA6CP;AACA;AACEN,EAAAA,WAAW,EAAE,CADf;AAEEC,EAAAA,WAAW,EAAE,CAFf;AAGEC,EAAAA,UAAU,EAAET,UAHd;AAIEU,EAAAA,WAAW,EAAE,CAJf;AAKEC,EAAAA,UAAU,EAAE,CALd;AAMEC,EAAAA,WAAW,EAAET,YANf;AAOEU,EAAAA,gBAAgB,EAAE,KAPpB,EA9CO;;;AAwDP;AACA;AACEN,EAAAA,WAAW,EAAE,CADf;AAEEC,EAAAA,WAAW,EAAE,CAFf;AAGEC,EAAAA,UAAU,EAAE,CAHd;AAIEC,EAAAA,WAAW,EAAET,YAJf;AAKEU,EAAAA,UAAU,EAAE,CALd;AAMEC,EAAAA,WAAW,EAAET,YANf;AAOEU,EAAAA,gBAAgB,EAAE,KAPpB,EAzDO;;;AAmEP;AACA;AACEN,EAAAA,WAAW,EAAEH,WADf;AAEEI,EAAAA,WAAW,EAAE,CAFf;AAGEC,EAAAA,UAAU,EAAET,UAAU,GAAGI,WAH3B;AAIEM,EAAAA,WAAW,EAAE,CAJf;AAKEC,EAAAA,UAAU,EAAET,UALd;AAMEU,EAAAA,WAAW,EAAE,CANf;AAOEC,EAAAA,gBAAgB,EAAE,IAPpB,EApEO;;;AA8EP;AACA;AACEN,EAAAA,WAAW,EAAEH,WADf;AAEEI,EAAAA,WAAW,EAAE,CAFf;AAGEC,EAAAA,UAAU,EAAET,UAAU,GAAGI,WAAb,GAA2B,CAHzC;AAIEM,EAAAA,WAAW,EAAE,CAJf;AAKEC,EAAAA,UAAU,EAAET,UALd;AAMEU,EAAAA,WAAW,EAAE,CANf;AAOEC,EAAAA,gBAAgB,EAAE,KAPpB,EA/EO;;;AAyFP;AACA;AACEN,EAAAA,WAAW,EAAE,CADf;AAEEC,EAAAA,WAAW,EAAEJ,WAFf;AAGEK,EAAAA,UAAU,EAAET,UAHd;AAIEU,EAAAA,WAAW,EAAE,CAJf;AAKEC,EAAAA,UAAU,EAAET,UAAU,GAAGE,WAL3B;AAMEQ,EAAAA,WAAW,EAAE,CANf;AAOEC,EAAAA,gBAAgB,EAAE,IAPpB,EA1FO;;;AAoGP;AACA;AACEN,EAAAA,WAAW,EAAE,CADf;AAEEC,EAAAA,WAAW,EAAEJ,WAFf;AAGEK,EAAAA,UAAU,EAAET,UAHd;AAIEU,EAAAA,WAAW,EAAE,CAJf;AAKEC,EAAAA,UAAU,EAAET,UAAU,GAAGE,WAAb,GAA2B,CALzC;AAMEQ,EAAAA,WAAW,EAAE,CANf;AAOEC,EAAAA,gBAAgB,EAAE,KAPpB,EArGO;;;AA+GP;AACA;AACEN,EAAAA,WAAW,EAAEH,WADf;AAEEI,EAAAA,WAAW,EAAEJ,WAFf;AAGEK,EAAAA,UAAU,EAAET,UAAU,GAAGI,WAH3B;AAIEM,EAAAA,WAAW,EAAE,CAJf;AAKEC,EAAAA,UAAU,EAAET,UAAU,GAAGE,WAL3B;AAMEQ,EAAAA,WAAW,EAAE,CANf;AAOEC,EAAAA,gBAAgB,EAAE,IAPpB,EAhHO;;;AA0HP;AACA;AACEN,EAAAA,WAAW,EAAEH,WADf;AAEEI,EAAAA,WAAW,EAAEJ,WAFf;AAGEK,EAAAA,UAAU,EAAET,UAAU,GAAGI,WAAb,GAA2B,CAHzC;AAIEM,EAAAA,WAAW,EAAE,CAJf;AAKEC,EAAAA,UAAU,EAAET,UAAU,GAAGE,WAAb,GAA2B,CALzC;AAMEQ,EAAAA,WAAW,EAAE,CANf;AAOEC,EAAAA,gBAAgB,EAAE,KAPpB,EA3HO,CAJX;;;AAyIGP,OAzIH,CAyIW;AACP;AACEQ,EAAAA,KAAK,EAAE,iBADT;AAEEC,EAAAA,KAAK,EAAE,iBAFT;AAGEC,EAAAA,aAAa,EAAE,IAHjB,EADO;;AAMP;AACEF,EAAAA,KAAK,EAAE,iBADT;AAEEC,EAAAA,KAAK,EAAE,0BAFT;AAGEC,EAAAA,aAAa,EAAE,IAHjB,EANO;;AAWP;AACEF,EAAAA,KAAK,EAAE,iBADT;AAEEC,EAAAA,KAAK,EAAE,2BAFT;AAGEC,EAAAA,aAAa,EAAE,KAHjB,EAXO;;AAgBP;AACEF,EAAAA,KAAK,EAAE,iBADT;AAEEC,EAAAA,KAAK,EAAE,eAFT;AAGEC,EAAAA,aAAa,EAAE,KAHjB,EAhBO;;AAqBP;AACEF,EAAAA,KAAK,EAAE,0BADT;AAEEC,EAAAA,KAAK,EAAE,0BAFT;AAGEC,EAAAA,aAAa,EAAE,IAHjB,EArBO;;AA0BP;AACEF,EAAAA,KAAK,EAAE,0BADT;AAEEC,EAAAA,KAAK,EAAE,2BAFT;AAGEC,EAAAA,aAAa,EAAE,KAHjB,EA1BO;;AA+BP;AACEF,EAAAA,KAAK,EAAE,0BADT;AAEEC,EAAAA,KAAK,EAAE,eAFT;AAGEC,EAAAA,aAAa,EAAE,KAHjB,EA/BO;;AAoCP;AACA;AACEF,EAAAA,KAAK,EAAE,2BADT;AAEEC,EAAAA,KAAK,EAAE,2BAFT;AAGEC,EAAAA,aAAa,EAAE,IAHjB,EArCO;;AA0CP;AACEF,EAAAA,KAAK,EAAE,2BADT;AAEEC,EAAAA,KAAK,EAAE,eAFT;AAGEC,EAAAA,aAAa,EAAE,KAHjB,EA1CO;;AA+CP;AACEF,EAAAA,KAAK,EAAE,eADT;AAEEC,EAAAA,KAAK,EAAE,eAFT;AAGEC,EAAAA,aAAa,EAAE,KAHjB,EA/CO,CAzIX;;;AA8LE;AA9LF,CA+LGC,MA/LH;AAgMI,CAAAC,CAAC;AACEA,CAAC,CAACJ,KAAF,KAAY,eAAZ,KAAgCI,CAAC,CAACX,WAAF,KAAkB,CAAlB,IAAuBW,CAAC,CAACV,WAAF,KAAkB,CAAzE,CAAD;AACCU,CAAC,CAACH,KAAF,KAAY,eAAZ,KAAgCG,CAAC,CAACR,WAAF,KAAkB,CAAlB,IAAuBQ,CAAC,CAACN,WAAF,KAAkB,CAAzE,CAlMP;;AAoME;AApMF,CAqMGK,MArMH;AAsMI,CAAAC,CAAC;AACCA,CAAC,CAACJ,KAAF,KAAY,eAAZ,IAA+BI,CAAC,CAACH,KAAF,KAAY,eAA3C,IAA8DG,CAAC,CAACT,UAAF,KAAiBT,UAvMrF;;AAyMGiB,MAzMH;AA0MI,CAAAC,CAAC;AACC;AACCA,CAAC,CAACC,gBAAF,IAAsBD,CAAC,CAACJ,KAAF,KAAY,eAAnC;AACCI,CAAC,CAACE,gBAAF,IAAsBF,CAAC,CAACH,KAAF,KAAY,eA7MzC;;AA+MGE,MA/MH;AAgNI,CAAAC,CAAC;AACC;AACAA,CAAC,CAAClC,OAAF;AACCkC,CAAC,CAACC,gBAAF;AACCD,CAAC,CAACE,gBADH;AAECF,CAAC,CAACJ,KAAF,KAAY,eAFb;AAGCI,CAAC,CAACH,KAAF,KAAY,eAJd,CAlNN,CAFJ;;;AA2NGM,EA3NH,CA2NM,MAAMC,CAAN,IAAW;AACb,QAAM;AACJtC,IAAAA,OADI;AAEJmC,IAAAA,gBAFI;AAGJC,IAAAA,gBAHI;AAIJb,IAAAA,WAJI;AAKJC,IAAAA,WALI;AAMJC,IAAAA,UANI;AAOJE,IAAAA,UAPI;AAQJD,IAAAA,WARI;AASJE,IAAAA,WATI;AAUJE,IAAAA,KAVI;AAWJC,IAAAA,KAXI;AAYJC,IAAAA,aAZI;AAaJH,IAAAA,gBAbI;AAcFS,EAAAA,CAAC,CAAC1G,MAdN;;AAgBA,QAAM2G,OAAO,GAAGD,CAAC,CAAC7F,aAAF,CAAgB;AAC9BI,IAAAA,eAAe,EAAEsE,YADa;AAE9BrE,IAAAA,aAAa,EAAEmE,YAFe;AAG9BhE,IAAAA,KAAK,EAAEC,eAAe,CAACE,OAAhB,GAA0BF,eAAe,CAAC+C,OAA1C,GAAoD/C,eAAe,CAACC,iBAH7C,EAAhB,CAAhB;;;AAMA,QAAMqF,UAAU,GAAGhB,WAAW,KAAK,CAAhB,GAAoB,UAApB,GAAiC,IAApD;AACA,QAAMiB,KAAK,GAAGF,OAAO,CAACrC,UAAR,CAAmB;AAC/B1C,IAAAA,SAAS,EAAEgF,UADoB;AAE/BE,IAAAA,YAAY,EAAE1B,UAFiB;AAG/BlE,IAAAA,aAAa,EAAEyE,WAHgB;AAI/BoB,IAAAA,cAAc,EAAEzB,UAJe;AAK/BrE,IAAAA,eAAe,EAAE2E,WALc,EAAnB,CAAd;;;AAQA,QAAMoB,UAAU,GAAGhB,WAAW,KAAK,CAAhB,GAAoB,UAApB,GAAiC,IAApD;AACA,QAAMiB,KAAK,GAAGN,OAAO,CAACrC,UAAR,CAAmB;AAC/B1C,IAAAA,SAAS,EAAEoF,UADoB;AAE/BF,IAAAA,YAAY,EAAEjB,UAFiB;AAG/B3E,IAAAA,aAAa,EAAE4E,WAHgB;AAI/BiB,IAAAA,cAAc,EAAEhB,UAJe;AAK/B9E,IAAAA,eAAe,EAAE+E,WALc,EAAnB,CAAd;;;AAQA,QAAMvC,OAAO,GAAGiD,CAAC,CAACjF,MAAF,CAASiD,oBAAT,EAAhB;AACA,MAAIwB,KAAK,KAAK,eAAd,EAA+B;AAC7B;AACA/F,IAAAA,MAAM,CAACgG,KAAK,KAAK,eAAX,CAAN;AACA,UAAMnD,IAAI,GAAGS,OAAO,CAACC,eAAR,CAAwB;AACnCC,MAAAA,gBAAgB,EAAE;AAChB;AACEC,QAAAA,UAAU,EAAEiD,KADd;AAEEhD,QAAAA,SAAS,EAAE,EAAEC,CAAC,EAAE,GAAL,EAAUC,CAAC,EAAE,GAAb,EAAkBC,CAAC,EAAE,GAArB,EAA0BC,CAAC,EAAE,GAA7B,EAFb;AAGEC,QAAAA,OAAO,EAAE,OAHX,EADgB;;AAMhB;AACEN,QAAAA,UAAU,EAAEqD,KADd;AAEEpD,QAAAA,SAAS,EAAE,EAAEC,CAAC,EAAE,GAAL,EAAUC,CAAC,EAAE,GAAb,EAAkBC,CAAC,EAAE,GAArB,EAA0BC,CAAC,EAAE,GAA7B,EAFb;AAGEC,QAAAA,OAAO,EAAE,OAHX,EANgB,CADiB,EAAxB,CAAb;;;;AAcAlB,IAAAA,IAAI,CAACkE,OAAL;AACD,GAlBD,MAkBO;AACL,UAAMlE,IAAI,GAAGoB,OAAO;AAChBX,IAAAA,OAAO,CAACkB,gBAAR,EADgB;AAEhB+B,IAAAA,CAAC,CAAClD,qBAAF;AACEC,IAAAA,OADF;AAEE0C,IAAAA,KAAK,KAAK,eAAV,GAA4Bc,KAA5B,GAAoCP,CAAC,CAAC7F,aAAF,GAAkByD,UAAlB,EAFtC,CAFJ;;;AAOA;AACA,UAAM6C,qBAAqB,GAAGjB,KAAK,KAAK,iBAAV,GAA8B1B,SAA9B,GAA0C,YAAxE;AACA,UAAMD,UAAU,GAAGmC,CAAC,CAAC7E,eAAF,CAAkB,CAAlB,EAAqBgF,KAArB,EAA4BX,KAA5B,EAAmCU,UAAnC,EAA+CO,qBAA/C,CAAnB;AACA,QAAIZ,gBAAJ,EAAsB;AACpBpG,MAAAA,MAAM,CAAC6C,IAAI,YAAYoE,oBAAjB,CAAN;AACAV,MAAAA,CAAC,CAAC5D,sBAAF,CAAyB,CAAzB,EAA4ByB,UAA5B,EAAwCvB,IAAxC;AACD,KAHD,MAGO;AACLA,MAAAA,IAAI,CAACI,YAAL,CAAkB,CAAlB,EAAqBmB,UAArB;AACD;AACD,QAAI4B,KAAK,KAAK,eAAd,EAA+B;AAC7B,YAAMkB,qBAAqB,GAAGlB,KAAK,KAAK,iBAAV,GAA8B3B,SAA9B,GAA0C,YAAxE;AACA,YAAMC,UAAU,GAAGiC,CAAC,CAAC7E,eAAF,CAAkB,CAAlB,EAAqBoF,KAArB,EAA4Bd,KAA5B,EAAmCa,UAAnC,EAA+CK,qBAA/C,CAAnB;AACA,UAAIb,gBAAJ,EAAsB;AACpBrG,QAAAA,MAAM,CAAC6C,IAAI,YAAYoE,oBAAjB,CAAN;AACAV,QAAAA,CAAC,CAAC5D,sBAAF,CAAyB,CAAzB,EAA4B2B,UAA5B,EAAwCzB,IAAxC;AACD,OAHD,MAGO;AACLA,QAAAA,IAAI,CAACI,YAAL,CAAkB,CAAlB,EAAqBqB,UAArB;AACD;AACF;AACD,QAAIL,OAAJ,EAAasC,CAAC,CAACvB,iCAAF,CAAoCnC,IAApC;AACbA,IAAAA,IAAI,CAACkE,OAAL;AACD;;AAED,QAAMI,OAAO,GAAGrB,gBAAgB,IAAIG,aAApC;AACAM,EAAAA,CAAC,CAACa,qBAAF,CAAwB,MAAM;AAC5B9D,IAAAA,OAAO,CAACH,MAAR;AACD,GAFD,EAEG,CAACgE,OAFJ;AAGD,CA1TH;;AA4TAvD,CAAC,CAAC0B,IAAF,CAAO,uDAAP;AACGzF,MADH;AAEIA,MAAM;AACH0F,OADH,CACW5F,KAAK,CAAC,SAAD,CADhB;AAEG4F,OAFH,CAEW5F,KAAK,CAAC,kBAAD,CAFhB;AAGG4F,OAHH,CAGW5F,KAAK,CAAC,kBAAD,CAHhB;AAIG4F,OAJH,CAIW3F,QAAQ,CAAC,QAAD,EAAWK,oBAAX,CAJnB;AAKGsF,OALH,CAKW;AACP;AACE8B,EAAAA,SAAS,EAAEpC,UADb;AAEEqC,EAAAA,SAAS,EAAEnC,UAFb;AAGEW,EAAAA,gBAAgB,EAAE,KAHpB,EADO;;AAMP;AACEuB,EAAAA,SAAS,EAAEpC,UAAU,GAAG,CAD1B;AAEEqC,EAAAA,SAAS,EAAEnC,UAFb;AAGEW,EAAAA,gBAAgB,EAAE,IAHpB,EANO;;AAWP;AACEuB,EAAAA,SAAS,EAAEpC,UADb;AAEEqC,EAAAA,SAAS,EAAEnC,UAAU,GAAG,CAF1B;AAGEW,EAAAA,gBAAgB,EAAE,IAHpB,EAXO,CALX;;;AAsBGP,OAtBH,CAsBW3F,QAAQ,CAAC,SAAD,EAAY,CAAC,KAAD,EAAQ,YAAR,EAAsB,cAAtB,CAAZ,CAtBnB;AAuBG2F,OAvBH,CAuBW3F,QAAQ,CAAC,SAAD,EAAY,CAAC,KAAD,EAAQ,YAAR,EAAsB,cAAtB,CAAZ,CAvBnB;AAwBGsG,MAxBH;AAyBI,CAAAC,CAAC;AACEA,CAAC,CAACoB,OAAF,KAAc,cAAd,IAAgC,CAACrH,uBAAuB,CAACiG,CAAC,CAAClF,MAAH,CAAvB,CAAkCuG,OAApE;AACCrB,CAAC,CAACsB,OAAF,KAAc,cAAd,IAAgC,CAACvH,uBAAuB,CAACiG,CAAC,CAAClF,MAAH,CAAvB,CAAkCuG,OA3B1E;;AA6BGtB,MA7BH;AA8BI,CAAAC,CAAC;AACEA,CAAC,CAACoB,OAAF,KAAc,YAAd,IAA8B,CAACrH,uBAAuB,CAACiG,CAAC,CAAClF,MAAH,CAAvB,CAAkCO,KAAlE;AACC2E,CAAC,CAACsB,OAAF,KAAc,YAAd,IAA8B,CAACvH,uBAAuB,CAACiG,CAAC,CAAClF,MAAH,CAAvB,CAAkCO,KAhCxE;;AAkCG+D,OAlCH,CAkCW;AACP;AACEQ,EAAAA,KAAK,EAAE,iBADT;AAEEC,EAAAA,KAAK,EAAE,iBAFT;AAGEC,EAAAA,aAAa,EAAE,IAHjB,EADO;;AAMP;AACEF,EAAAA,KAAK,EAAE,iBADT;AAEEC,EAAAA,KAAK,EAAE,eAFT;AAGEC,EAAAA,aAAa,EAAE,KAHjB,EANO,CAlCX;;;AA8CGC,MA9CH;AA+CI,CAAAC,CAAC;AACC;AACAA,CAAC,CAACE,gBAAF,IAAsBF,CAAC,CAACH,KAAF,KAAY,eAjDxC;;AAmDGE,MAnDH;AAoDI,CAAAC,CAAC;AACC;AACA;AACAA,CAAC,CAAClC,OAAF,KAAckC,CAAC,CAACC,gBAAF,IAAsBD,CAAC,CAACE,gBAAxB,IAA4CF,CAAC,CAACH,KAAF,KAAY,eAAtE,CAvDN,CAFJ;;;AA4DGM,EA5DH,CA4DM,MAAMC,CAAN,IAAW;AACb,QAAM;AACJtC,IAAAA,OADI;AAEJmC,IAAAA,gBAFI;AAGJC,IAAAA,gBAHI;AAIJpF,IAAAA,MAJI;AAKJoG,IAAAA,SALI;AAMJC,IAAAA,SANI;AAOJC,IAAAA,OAPI;AAQJE,IAAAA,OARI;AASJ1B,IAAAA,KATI;AAUJC,IAAAA,KAVI;AAWJF,IAAAA,gBAXI;AAYJG,IAAAA,aAZI;AAaFM,EAAAA,CAAC,CAAC1G,MAbN;;AAeA,QAAM2G,OAAO,GAAGD,CAAC,CAAC7F,aAAF,CAAgB;AAC9BI,IAAAA,eAAe,EAAEsE,YADa;AAE9BrE,IAAAA,aAAa,EAAEmE,YAFe;AAG9BjE,IAAAA,MAH8B,EAAhB,CAAhB;;;AAMA,QAAMyF,KAAK,GAAGF,OAAO,CAACrC,UAAR,CAAmB;AAC/BwC,IAAAA,YAAY,EAAE1B,UADiB;AAE/BlE,IAAAA,aAAa,EAAE,CAFgB;AAG/B6F,IAAAA,cAAc,EAAEzB,UAHe;AAI/BrE,IAAAA,eAAe,EAAE,CAJc;AAK/B4G,IAAAA,MAAM,EAAEH,OALuB,EAAnB,CAAd;;;AAQA,QAAMT,KAAK,GAAGN,OAAO,CAACrC,UAAR,CAAmB;AAC/BwC,IAAAA,YAAY,EAAEU,SADiB;AAE/BtG,IAAAA,aAAa,EAAE,CAFgB;AAG/B6F,IAAAA,cAAc,EAAEU,SAHe;AAI/BxG,IAAAA,eAAe,EAAE,CAJc;AAK/B4G,IAAAA,MAAM,EAAED,OALuB,EAAnB,CAAd;;;AAQA,QAAMnE,OAAO,GAAGiD,CAAC,CAACjF,MAAF,CAASiD,oBAAT,EAAhB;AACA;AACA;AACA,QAAMhD,IAAI,GAAGf,IAAI,IAAI6G,SAArB;AACA,QAAMxE,IAAI,GAAGoB,OAAO;AAChBX,EAAAA,OAAO,CAACkB,gBAAR,EADgB;AAEhBlB,EAAAA,OAAO,CAACC,eAAR,CAAwB;AACtBC,IAAAA,gBAAgB,EAAE;AAChB;AACEC,MAAAA,UAAU,EAAE8C,CAAC,CAAC7F,aAAF,CAAgB,EAAEE,KAAK,EAAEW,IAAT,EAAeV,MAAM,EAAEU,IAAvB,EAAhB,EAA+C4C,UAA/C,EADd;AAEET,MAAAA,SAAS,EAAE,EAAEC,CAAC,EAAE,GAAL,EAAUC,CAAC,EAAE,GAAb,EAAkBC,CAAC,EAAE,GAArB,EAA0BC,CAAC,EAAE,GAA7B,EAFb;AAGEC,MAAAA,OAAO,EAAE,OAHX,EADgB,CADI;;;AAQtB4D,IAAAA,sBAAsB;AACpB3B,IAAAA,KAAK,KAAK,eAAV;AACI3B,IAAAA,SADJ;AAEI;AACEZ,MAAAA,UAAU,EAAEqD,KADd;AAEEc,MAAAA,YAAY,EAAE,OAFhB;AAGEC,MAAAA,cAAc,EAAE,MAHlB;AAIEC,MAAAA,cAAc,EAAE,OAJlB;AAKEC,MAAAA,gBAAgB,EAAE,MALpB,EAXgB,EAAxB,CAFJ;;;;AAsBA;AACA,QAAM3D,UAAU,GAAGmC,CAAC,CAAC7E,eAAF,CAAkB,CAAlB,EAAqBgF,KAArB,EAA4BX,KAA5B,EAAmC,IAAnC,EAAyC1B,SAAzC,CAAnB;AACA,MAAI+B,gBAAJ,EAAsB;AACpBpG,IAAAA,MAAM,CAAC6C,IAAI,YAAYoE,oBAAjB,CAAN;AACAV,IAAAA,CAAC,CAAC5D,sBAAF,CAAyB,CAAzB,EAA4ByB,UAA5B,EAAwCvB,IAAxC;AACD,GAHD,MAGO;AACLA,IAAAA,IAAI,CAACI,YAAL,CAAkB,CAAlB,EAAqBmB,UAArB;AACD;AACD,MAAI4B,KAAK,KAAK,eAAd,EAA+B;AAC7B,UAAM1B,UAAU,GAAGiC,CAAC,CAAC7E,eAAF,CAAkB,CAAlB,EAAqBoF,KAArB,EAA4Bd,KAA5B,EAAmC,IAAnC,EAAyC3B,SAAzC,CAAnB;AACA,QAAIgC,gBAAJ,EAAsB;AACpBrG,MAAAA,MAAM,CAAC6C,IAAI,YAAYoE,oBAAjB,CAAN;AACAV,MAAAA,CAAC,CAAC5D,sBAAF,CAAyB,CAAzB,EAA4B2B,UAA5B,EAAwCzB,IAAxC;AACD,KAHD,MAGO;AACLA,MAAAA,IAAI,CAACI,YAAL,CAAkB,CAAlB,EAAqBqB,UAArB;AACD;AACF;AACD,MAAIL,OAAJ,EAAasC,CAAC,CAACvB,iCAAF,CAAoCnC,IAApC;AACbA,EAAAA,IAAI,CAACkE,OAAL;;AAEA,QAAMiB,eAAe;AAClBT,EAAAA,OAAO,KAAK,YAAZ,IAA4BE,OAAO,KAAK,cAAzC;AACCF,EAAAA,OAAO,KAAK,cAAZ,IAA8BE,OAAO,KAAK,YAF7C;;AAIA;AACA;AACA,QAAMN,OAAO,GAAGa,eAAe,IAAIlC,gBAAnB,IAAuCG,aAAvD;;AAEAM,EAAAA,CAAC,CAACa,qBAAF,CAAwB,MAAM;AAC5B9D,IAAAA,OAAO,CAACH,MAAR;AACD,GAFD,EAEG,CAACgE,OAFJ;AAGD,CA3JH;;AA6JAvD,CAAC,CAAC0B,IAAF,CAAO,8BAAP;AACGzF,MADH;AAEIA,MAAM;AACH0F,OADH,CACW5F,KAAK,CAAC,SAAD,CADhB;AAEG4F,OAFH,CAEW3F,QAAQ,CAAC,gBAAD,EAAmB,CAAC,CAAD,EAAI,GAAGS,aAAP,CAAnB,CAFnB;AAGGkF,OAHH,CAGW3F,QAAQ,CAAC,iBAAD,EAAoB,CAAC,CAAD,EAAI,GAAGS,aAAP,CAApB,CAHnB;AAIG6F,MAJH;AAKI,CAAAC,CAAC;AACC;AACA;AACA;AACAA,CAAC,CAAClC,OAAF,IAAagE,OAAO,CAAC9B,CAAC,CAAC+B,eAAF,GAAoB5H,QAAQ,CAAC6H,WAAT,CAAqBC,MAA1C,CAT1B,CAFJ;;;AAcG9B,EAdH,CAcM,MAAMC,CAAN,IAAW;AACb,QAAM,EAAEtC,OAAF,EAAWoE,cAAX,EAA2BH,eAA3B,KAA+C3B,CAAC,CAAC1G,MAAvD;;AAEA;AACA;AACA;AACA,QAAMyI,mBAAmB,GAAGL,OAAO,CAACC,eAAe,GAAG7F,cAAc,CAAC+F,MAAlC,CAAnC;AACA,QAAMG,QAAQ,GAAGD,mBAAmB;AAChCnH,EAAAA,eAAe,CAACE,OAAhB,GAA0BF,eAAe,CAACC,iBADV;AAEhCD,EAAAA,eAAe,CAACE,OAAhB,GAA0BF,eAAe,CAAC+C,OAF9C;;AAIA,QAAMsC,OAAO,GAAGD,CAAC,CAAC7F,aAAF,CAAgB,EAAEQ,KAAK,EAAEqH,QAAT,EAAhB,CAAhB;AACA,QAAM3G,IAAI,GAAG4E,OAAO,CAACrC,UAAR,EAAb;AACA,QAAMqE,UAAqC,GAAG;AAC5C,IAAExG,OAAO,EAAE,CAAX,EAAcI,UAAU,EAAEiG,cAA1B,EAA0C7F,IAAI,EAAE,iBAAhD,EAD4C,CAA9C;;AAGA,QAAMiG,SAA8B,GAAG,CAAC,EAAEzG,OAAO,EAAE,CAAX,EAAcC,QAAQ,EAAEL,IAAxB,EAAD,CAAvC;AACA,MAAI,CAAC0G,mBAAL,EAA0B;AACxBE,IAAAA,UAAU,CAACE,IAAX,CAAgB;AACd1G,MAAAA,OAAO,EAAE,CADK;AAEdI,MAAAA,UAAU,EAAE8F,eAFE;AAGd1F,MAAAA,IAAI,EAAE,2BAHQ;AAIdE,MAAAA,oBAAoB,EAAE,YAJR,EAAhB;;AAMA+F,IAAAA,SAAS,CAACC,IAAV,CAAe,EAAE1G,OAAO,EAAE,CAAX,EAAcC,QAAQ,EAAEL,IAAxB,EAAf;AACD;AACD,QAAMgB,SAAS,GAAG2D,CAAC,CAACjF,MAAF,CAASI,eAAT,CAAyB;AACzCK,IAAAA,OAAO,EAAE0G,SADgC;AAEzCvG,IAAAA,MAAM,EAAEqE,CAAC,CAACjF,MAAF,CAASa,qBAAT,CAA+B,EAAEJ,OAAO,EAAEyG,UAAX,EAA/B,CAFiC,EAAzB,CAAlB;;;AAKA,QAAMlF,OAAO,GAAGiD,CAAC,CAACjF,MAAF,CAASiD,oBAAT,EAAhB;AACA,QAAM1B,IAAI,GAAGoB,OAAO;AAChBX,EAAAA,OAAO,CAACkB,gBAAR,EADgB;AAEhB+B,EAAAA,CAAC,CAAClD,qBAAF;AACEC,EAAAA,OADF;AAEEgF,EAAAA,mBAAmB,GAAG1G,IAAH,GAAU2E,CAAC,CAAC7F,aAAF,GAAkByD,UAAlB,EAF/B,CAFJ;;AAMAtB,EAAAA,IAAI,CAACI,YAAL,CAAkB,CAAlB,EAAqBL,SAArB;AACA,MAAIqB,OAAJ,EAAasC,CAAC,CAACvB,iCAAF,CAAoCnC,IAApC;AACbA,EAAAA,IAAI,CAACkE,OAAL;;AAEA;AACA;AACA;AACAR,EAAAA,CAAC,CAACa,qBAAF,CAAwB,MAAM;AAC5B9D,IAAAA,OAAO,CAACH,MAAR;AACD,GAFD;AAGD,CA9DH;;AAgEA;AACA;AACA;AACAS,CAAC,CAAC0B,IAAF,CAAO,kBAAP;AACGzF,MADH;AAEIA,MAAM;AACH0F,OADH,CACW5F,KAAK,CAAC,SAAD,CADhB;AAEG4F,OAFH,CAEW5F,KAAK,CAAC,oBAAD,CAFhB;AAGG4F,OAHH,CAGW3F,QAAQ,CAAC,aAAD,EAAgBO,oBAAhB,CAHnB,CAFJ;;AAOGmG,EAPH,CAOM,MAAMC,CAAN,IAAW;AACb,QAAM,EAAEtC,OAAF,EAAW0E,kBAAX,EAA+B9G,WAA/B,KAA+C0E,CAAC,CAAC1G,MAAvD;AACA,QAAM+I,IAAI,GAAGxI,uBAAuB,CAACyB,WAAD,CAApC;AACA,QAAMC,gBAAgB,GAAG8G,IAAI,CAAC3G,QAAL,KAAkB,YAAlB,GAAiC,YAAjC,GAAgDoC,SAAzE;;AAEA,QAAMwE,WAAW,GAAGtC,CAAC,CAAC7F,aAAF,GAAkByD,UAAlB,EAApB;AACA,QAAM2E,kBAAkB,GAAGvC,CAAC;AACzB7F,EAAAA,aADwB,CACV,EAAEQ,KAAK,EAAEC,eAAe,CAAC+C,OAAhB,GAA0B/C,eAAe,CAACE,OAAnD,EADU;AAExB8C,EAAAA,UAFwB,EAA3B;;AAIA;AACA,QAAM4E,WAAsC,GAAG;AAC7C,IAAE/G,OAAO,EAAE,CAAX,EAAcI,UAAU,EAAEC,cAAc,CAACE,QAAzC,EAAmDC,IAAI,EAAE,iBAAzD,EAD6C;AAE7C;AACER,IAAAA,OAAO,EAAE,CADX;AAEEI,IAAAA,UAAU,EAAEC,cAAc,CAACE,QAF7B;AAGEC,IAAAA,IAAI,EAAEX,WAHR;AAIEa,IAAAA,oBAAoB,EAAEZ,gBAJxB,EAF6C,CAA/C;;;AASA,QAAMkH,UAA+B,GAAG;AACtC,IAAEhH,OAAO,EAAE,CAAX,EAAcC,QAAQ,EAAE4G,WAAxB,EADsC;AAEtC,IAAE7G,OAAO,EAAE,CAAX,EAAcC,QAAQ,EAAE6G,kBAAxB,EAFsC,CAAxC;;AAIA,QAAM1E,UAAU,GAAGmC,CAAC,CAACjF,MAAF,CAASI,eAAT,CAAyB;AAC1CK,IAAAA,OAAO,EAAEiH,UADiC;AAE1C9G,IAAAA,MAAM,EAAEqE,CAAC,CAACjF,MAAF,CAASa,qBAAT,CAA+B,EAAEJ,OAAO,EAAEgH,WAAX,EAA/B,CAFkC,EAAzB,CAAnB;;;AAKA;AACA;AACA,QAAMzE,UAAU,GAAGiC,CAAC,CAAC7E,eAAF,CAAkB,CAAlB,EAAqBoH,kBAArB,EAAyC,iBAAzC,EAA4D,IAA5D,EAAkEzE,SAAlE,CAAnB;;AAEA,QAAMf,OAAO,GAAGiD,CAAC,CAACjF,MAAF,CAASiD,oBAAT,EAAhB;AACA,QAAM1B,IAAI,GAAGoB,OAAO;AAChBX,EAAAA,OAAO,CAACkB,gBAAR,EADgB;AAEhB+B,EAAAA,CAAC,CAAClD,qBAAF,CAAwBC,OAAxB,EAAiCiD,CAAC,CAAC7F,aAAF,GAAkByD,UAAlB,EAAjC,CAFJ;;AAIA;AACA;AACAtB,EAAAA,IAAI,CAACI,YAAL,CAAkB,CAAlB,EAAqBmB,UAArB;AACA,MAAIuE,kBAAJ,EAAwB;AACtB,UAAMlE,QAAQ,GAAGR,OAAO,GAAGsC,CAAC,CAAC7B,yBAAF,EAAH,GAAmC6B,CAAC,CAAC5B,wBAAF,EAA3D;AACA4B,IAAAA,CAAC,CAAC3B,WAAF,CAAc/B,IAAd,EAAoB4B,QAApB,EAA8BR,OAA9B;AACAsC,IAAAA,CAAC,CAAC1B,mBAAF,CAAsBhC,IAAtB,EAA4BoB,OAA5B;AACD;AACDpB,EAAAA,IAAI,CAACI,YAAL,CAAkB,CAAlB,EAAqBqB,UAArB;AACAzB,EAAAA,IAAI,CAACkE,OAAL;;AAEA;AACA;AACA,MAAII,OAAO,GAAGtF,WAAW,KAAK,2BAA9B;AACA;AACA;AACAsF,EAAAA,OAAO,KAAPA,OAAO,GAAKlD,OAAL,CAAP;;AAEAsC,EAAAA,CAAC,CAACa,qBAAF,CAAwB,MAAM;AAC5B9D,IAAAA,OAAO,CAACH,MAAR;AACD,GAFD,EAEG,CAACgE,OAFJ;AAGD,CAlEH;;AAoEAvD,CAAC,CAAC0B,IAAF,CAAO,oBAAP;AACGzF,MADH;AAEIA,MAAM;AACH0F,OADH,CACW5F,KAAK,CAAC,kBAAD,CADhB;AAEG4F,OAFH,CAEW5F,KAAK,CAAC,kBAAD,CAFhB;AAGG4F,OAHH,CAGW3F,QAAQ,CAAC,OAAD,EAAU,CAAC,eAAD,EAAkB,GAAGO,oBAArB,CAAV,CAHnB;AAIGoF,OAJH,CAIW3F,QAAQ,CAAC,OAAD,EAAU,CAAC,eAAD,EAAkB,GAAGO,oBAArB,CAAV,CAJnB;AAKG+F,MALH;AAMI,CAAAC,CAAC;AACC;AACA;AACA;AACCA,CAAC,CAACC,gBAAF,IAAsBD,CAAC,CAACJ,KAAF,KAAY,eAAnC;AACCI,CAAC,CAACE,gBAAF,IAAsBF,CAAC,CAACH,KAAF,KAAY,eADnC;AAEC,CAACG,CAAC,CAACC,gBAAH,IAAuB,CAACD,CAAC,CAACE,gBAZjC,CAFJ;;;AAiBGC,EAjBH,CAiBM,MAAMC,CAAN,IAAW;AACb,QAAM,EAAEH,gBAAF,EAAoBC,gBAApB,EAAsCN,KAAtC,EAA6CC,KAA7C,KAAuDO,CAAC,CAAC1G,MAA/D;;AAEA;AACA,QAAM+B,IAAI,GAAG2E,CAAC;AACX7F,EAAAA,aADU,CACI;AACbQ,IAAAA,KAAK;AACHC,IAAAA,eAAe,CAACC,iBAAhB,GAAoCD,eAAe,CAAC+C,OAApD,GAA8D/C,eAAe,CAACE,OAFnE,EADJ;;AAKV8C,EAAAA,UALU,EAAb;;AAOA,QAAM8E,UAA0B,GAAG,EAAnC;AACA,MAAIlD,KAAK,KAAK,eAAd,EAA+B;AAC7B,UAAMmD,iBAAiB,GAAGnD,KAAK,KAAK,iBAAV,GAA8B1B,SAA9B,GAA0C,YAApE;AACA4E,IAAAA,UAAU,CAAC,CAAD,CAAV,GAAgB1C,CAAC,CAAC7E,eAAF,CAAkB,CAAlB,EAAqBE,IAArB,EAA2BmE,KAA3B,EAAkC,IAAlC,EAAwCmD,iBAAxC,CAAhB;AACD;AACD,MAAIlD,KAAK,KAAK,eAAd,EAA+B;AAC7B,UAAMmD,iBAAiB,GAAGnD,KAAK,KAAK,iBAAV,GAA8B3B,SAA9B,GAA0C,YAApE;AACA4E,IAAAA,UAAU,CAAC,CAAD,CAAV,GAAgB1C,CAAC,CAAC7E,eAAF,CAAkB,CAAlB,EAAqBE,IAArB,EAA2BoE,KAA3B,EAAkC,IAAlC,EAAwCmD,iBAAxC,CAAhB;AACD;;AAED,QAAM7F,OAAO,GAAGiD,CAAC,CAACjF,MAAF,CAASiD,oBAAT,EAAhB;AACA;AACA;AACA,QAAM1B,IAAI,GAAG0D,CAAC,CAAClD,qBAAF;AACXC,EAAAA,OADW;AAEXyC,EAAAA,KAAK,KAAK,eAAV,IAA6BC,KAAK,KAAK,eAAvC,GAAyDpE,IAAzD,GAAgE2E,CAAC,CAAC7F,aAAF,GAAkByD,UAAlB,EAFrD,CAAb;;;AAKA,QAAMiF,gBAA2B,GAAG,CAAChD,gBAAD,EAAmBC,gBAAnB,CAApC;AACA,OAAK,IAAIgD,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,CAApB,EAAuBA,CAAC,EAAxB,EAA4B;AAC1B;AACA;AACA;AACA,QAAID,gBAAgB,CAACC,CAAD,CAApB,EAAyB;AACvB,YAAMvG,aAAa,GAAGyD,CAAC,CAACjF,MAAF,CAASyB,yBAAT,CAAmC;AACvDC,QAAAA,YAAY,EAAE,CAAC,YAAD,CADyC,EAAnC,CAAtB;;AAGAF,MAAAA,aAAa,CAACG,YAAd,CAA2BoG,CAA3B,EAA8BJ,UAAU,CAACI,CAAD,CAAxC;AACA,YAAMC,YAAY,GAAGxG,aAAa,CAACK,MAAd,EAArB;AACAN,MAAAA,IAAI,CAACO,cAAL,CAAoB,CAACkG,YAAD,CAApB;AACD,KAPD,MAOO,IAAIL,UAAU,CAACI,CAAD,CAAV,KAAkBhF,SAAtB,EAAiC;AACtCxB,MAAAA,IAAI,CAACI,YAAL,CAAkBoG,CAAlB,EAAqBJ,UAAU,CAACI,CAAD,CAA/B;AACD;AACF;;AAEDxG,EAAAA,IAAI,CAACkE,OAAL;;AAEA,MAAII,OAAO,GAAG,KAAd;AACA;AACE,GAACpB,KAAK,KAAK,iBAAV,IAA+BA,KAAK,KAAK,0BAA1C;AACCC,EAAAA,KAAK,KAAK,iBAAV,IAA+BA,KAAK,KAAK,0BAD1C,CADF;AAGE;AACAmB,IAAAA,OAAO,GAAG,IAAV;AACD;;AAED,MAAIpB,KAAK,KAAK,2BAAV,IAAyCC,KAAK,KAAK,2BAAvD,EAAoF;AAClFmB,IAAAA,OAAO,GAAG,IAAV;AACD;;AAED;AACAZ,EAAAA,CAAC,CAACa,qBAAF,CAAwB,MAAM;AAC5B9D,IAAAA,OAAO,CAACH,MAAR;AACD,GAFD,EAEG,CAACgE,OAFJ;AAGD,CAjFH;;AAmFAvD,CAAC,CAAC0B,IAAF,CAAO,6BAAP;AACGzF,MADH;AAEIA,MAAM;AACH0F,OADH,CACW5F,KAAK,CAAC,SAAD,CADhB;AAEG4F,OAFH,CAEW5F,KAAK,CAAC,eAAD,CAFhB;AAGG4F,OAHH,CAGW5F,KAAK,CAAC,eAAD,CAHhB;AAIG4F,OAJH,CAIW3F,QAAQ,CAAC,oBAAD,EAAuB,CAAC,QAAD,EAAW,UAAX,CAAvB,CAJnB;AAKG2F,OALH,CAKW3F,QAAQ,CAAC,aAAD,EAAgB,CAAC,QAAD,EAAW,QAAX,EAAqB,OAArB,EAA8B,MAA9B,CAAhB,CALnB;AAMG2F,OANH,CAMW5F,KAAK,CAAC,oBAAD,CANhB,CAFJ;;AAUG2G,EAVH,CAUM,MAAMC,CAAN,IAAW;AACb,QAAM;AACJtC,IAAAA,OADI;AAEJsF,IAAAA,aAFI;AAGJC,IAAAA,aAHI;AAIJC,IAAAA,kBAJI;AAKJ7E,IAAAA,WALI;AAMJ+D,IAAAA,kBANI;AAOFpC,EAAAA,CAAC,CAAC1G,MAPN;AAQA,QAAM+B,IAAI,GAAG2E,CAAC,CAAC7F,aAAF,CAAgB,EAAEQ,KAAK,EAAEC,eAAe,CAAC+C,OAAzB,EAAhB,EAAoDC,UAApD,EAAb;AACA,QAAMC,UAAU,GAAGmC,CAAC,CAAC7E,eAAF,CAAkB,CAAlB,EAAqBE,IAArB,EAA2B,0BAA3B,EAAuD,IAAvD,EAA6D,YAA7D,CAAnB;AACA,QAAM0C,UAAU,GAAGiC,CAAC,CAAC7E,eAAF,CAAkB,CAAlB,EAAqBE,IAArB,EAA2B,2BAA3B,EAAwD,IAAxD,EAA8D,YAA9D,CAAnB;;AAEA,QAAM8H,UAAU,GAAG,wCAAnB;AACA;AACA,QAAMC,YAAY,GAAG7J,EAAG;AAC5B,QAAQA,EAAE,CAAC8J,GAAH,CAAOL,aAAP,CAAsB;AAC9B;AACA,QAAQzJ,EAAE,CAAC+J,MAAO;AAClB,QAAQ/J,EAAE,CAAC8J,GAAH,CAAOJ,aAAP,CAAsB;AAC9B;AACA,QAAQ1J,EAAE,CAAC+J,MAAO;AAClB;AACA,KARI;;AAUA;AACA,QAAMC,WAAW,GAAGhK,EAAG;AAC3B,QAAQA,EAAE,CAAC8J,GAAH,CAAOL,aAAP,CAAsB;AAC9B;AACA,QAAQzJ,EAAE,CAAC+J,MAAO;AAClB,QAAQ/J,EAAE,CAAC8J,GAAH,CAAOJ,aAAP,CAAsB;AAC9B;AACA,QAAQ1J,EAAE,CAAC+J,MAAO;AAClB;AACA,KARI;;AAUA,QAAMpF,QAAQ,GAAGR,OAAO;AACpBsC,EAAAA,CAAC,CAACjF,MAAF,CAASyI,qBAAT,CAA+B;AAC7BC,IAAAA,YAAY,EAAE;AACZC,MAAAA,MAAM,EAAE1D,CAAC,CAACjF,MAAF,CAAS4I,kBAAT,CAA4B;AAClCC,QAAAA,IAAI,EAAEL,WAD4B,EAA5B,CADI;;AAIZM,MAAAA,UAAU,EAAE,MAJA,EADe,EAA/B,CADoB;;;AASpB7D,EAAAA,CAAC,CAACjF,MAAF,CAAS+I,oBAAT,CAA8B;AAC5BC,IAAAA,WAAW,EAAE;AACXL,MAAAA,MAAM,EAAE1D,CAAC,CAACjF,MAAF,CAAS4I,kBAAT,CAA4B;AAClCC,QAAAA,IAAI,EAAET,UAD4B,EAA5B,CADG;;AAIXU,MAAAA,UAAU,EAAE,MAJD,EADe;;AAO5BG,IAAAA,aAAa,EAAE;AACbN,MAAAA,MAAM,EAAE1D,CAAC,CAACjF,MAAF,CAAS4I,kBAAT,CAA4B;AAClCC,QAAAA,IAAI,EAAER,YAD4B,EAA5B,CADK;;AAIbS,MAAAA,UAAU,EAAE,MAJC,EAPa;;AAa5BI,IAAAA,iBAAiB,EAAE,eAbS;AAc5BC,IAAAA,WAAW,EAAE,CAAC,EAAExJ,MAAM,EAAE,YAAV,EAAD,CAde,EAA9B,CATJ;;;AA0BA,QAAMqC,OAAO,GAAGiD,CAAC,CAACjF,MAAF,CAASiD,oBAAT,EAAhB;AACA,QAAM1B,IAAI,GAAGoB,OAAO;AAChBX,EAAAA,OAAO,CAACkB,gBAAR,EADgB;AAEhBlB,EAAAA,OAAO,CAACC,eAAR,CAAwB;AACtBC,IAAAA,gBAAgB,EAAE;AAChB;AACEC,MAAAA,UAAU,EAAE8C,CAAC,CAAC7F,aAAF,GAAkByD,UAAlB,EADd;AAEET,MAAAA,SAAS,EAAE,EAAEC,CAAC,EAAE,GAAL,EAAUC,CAAC,EAAE,GAAb,EAAkBC,CAAC,EAAE,GAArB,EAA0BC,CAAC,EAAE,GAA7B,EAFb;AAGEC,MAAAA,OAAO,EAAE,OAHX,EADgB,CADI,EAAxB,CAFJ;;;;AAWA,QAAM2G,MAAM,GAAGjB,kBAAkB,KAAK,QAAvB,GAAkC,CAAlC,GAAsC,CAArD;AACA,QAAMkB,MAAM,GAAGlB,kBAAkB,KAAK,QAAvB,GAAkC,CAAlC,GAAsC,CAArD;AACA,MAAI7E,WAAW,KAAK,QAApB,EAA8B2B,CAAC,CAAC3B,WAAF,CAAc/B,IAAd,EAAoB4B,QAApB,EAA8BR,OAA9B;AAC9BpB,EAAAA,IAAI,CAACI,YAAL,CAAkByH,MAAlB,EAA0BtG,UAA1B;AACA,MAAIQ,WAAW,KAAK,QAApB,EAA8B2B,CAAC,CAAC3B,WAAF,CAAc/B,IAAd,EAAoB4B,QAApB,EAA8BR,OAA9B;AAC9BpB,EAAAA,IAAI,CAACI,YAAL,CAAkB0H,MAAlB,EAA0BrG,UAA1B;AACA,MAAIM,WAAW,KAAK,OAApB,EAA6B2B,CAAC,CAAC3B,WAAF,CAAc/B,IAAd,EAAoB4B,QAApB,EAA8BR,OAA9B;AAC7B,MAAI0E,kBAAJ,EAAwBpC,CAAC,CAAC1B,mBAAF,CAAsBhC,IAAtB,EAA4BoB,OAA5B;AACxBpB,EAAAA,IAAI,CAACkE,OAAL;;AAEA;AACA;AACA,QAAMI,OAAO,GAAGlD,OAAO,IAAI,CAAC0E,kBAA5B;;AAEApC,EAAAA,CAAC,CAACa,qBAAF,CAAwB,MAAM;AAC5B9D,IAAAA,OAAO,CAACH,MAAR;AACD,GAFD,EAEG,CAACgE,OAFJ;AAGD,CArGH;;AAuGAvD,CAAC,CAAC0B,IAAF,CAAO,sCAAP;AACGzF,MADH,CACUF,KAAK,CAAC,SAAD,CADf;AAEG2G,EAFH,CAEM,MAAMC,CAAN,IAAW;AACb,QAAM,EAAEtC,OAAF,KAAcsC,CAAC,CAAC1G,MAAtB;;AAEA,QAAM,EAAEuE,UAAF,EAAcE,UAAd,EAA0BhB,OAA1B,EAAmCT,IAAnC,EAAyC4B,QAAzC,KAAsD8B,CAAC,CAACvC,mBAAF,CAAsBC,OAAtB,CAA5D;AACAsC,EAAAA,CAAC,CAAC3B,WAAF,CAAc/B,IAAd,EAAoB4B,QAApB,EAA8BR,OAA9B;AACApB,EAAAA,IAAI,CAACI,YAAL,CAAkB,CAAlB,EAAqBmB,UAArB;AACAvB,EAAAA,IAAI,CAACI,YAAL,CAAkB,CAAlB,EAAqBqB,UAArB;AACAzB,EAAAA,IAAI,CAACkE,OAAL;;AAEA;AACA;AACAR,EAAAA,CAAC,CAACa,qBAAF,CAAwB,MAAM;AAC5B9D,IAAAA,OAAO,CAACH,MAAR;AACD,GAFD,EAEG,CAACc,OAFJ;AAGD,CAhBH;;AAkBAL,CAAC,CAAC0B,IAAF,CAAO,wCAAP;AACGzF,MADH,CACUF,KAAK,CAAC,SAAD,CADf;AAEG2G,EAFH,CAEM,MAAMC,CAAN,IAAW;AACb,QAAM,EAAEtC,OAAF,KAAcsC,CAAC,CAAC1G,MAAtB;;AAEA,QAAM,EAAEuE,UAAF,EAAcE,UAAd,EAA0BhB,OAA1B,EAAmCT,IAAnC,EAAyC4B,QAAzC,KAAsD8B,CAAC,CAACvC,mBAAF,CAAsBC,OAAtB,CAA5D;AACAsC,EAAAA,CAAC,CAAC3B,WAAF,CAAc/B,IAAd,EAAoB4B,QAApB,EAA8BR,OAA9B;AACApB,EAAAA,IAAI,CAACI,YAAL,CAAkB,CAAlB,EAAqBmB,UAArB;AACAvB,EAAAA,IAAI,CAACI,YAAL,CAAkB,CAAlB,EAAqBqB,UAArB;AACAiC,EAAAA,CAAC,CAAC1B,mBAAF,CAAsBhC,IAAtB,EAA4BoB,OAA5B;AACApB,EAAAA,IAAI,CAACkE,OAAL;;AAEAR,EAAAA,CAAC,CAACa,qBAAF,CAAwB,MAAM;AAC5B9D,IAAAA,OAAO,CAACH,MAAR;AACD,GAFD;AAGD,CAfH;;AAiBAS,CAAC,CAAC0B,IAAF,CAAO,gDAAP;AACGzF,MADH,CACUF,KAAK,CAAC,SAAD,CADf;AAEG2G,EAFH,CAEM,MAAMC,CAAN,IAAW;AACb,QAAM,EAAEtC,OAAF,KAAcsC,CAAC,CAAC1G,MAAtB;AACA,QAAM,EAAEuE,UAAF,EAAcE,UAAd,EAA0BhB,OAA1B,EAAmCT,IAAnC,EAAyC4B,QAAzC,KAAsD8B,CAAC,CAACvC,mBAAF,CAAsBC,OAAtB,CAA5D;AACAsC,EAAAA,CAAC,CAAC3B,WAAF,CAAc/B,IAAd,EAAoB4B,QAApB,EAA8BR,OAA9B;;AAEApB,EAAAA,IAAI,CAACI,YAAL,CAAkB,CAAlB,EAAqBmB,UAArB;AACAmC,EAAAA,CAAC,CAAC1B,mBAAF,CAAsBhC,IAAtB,EAA4BoB,OAA5B;;AAEApB,EAAAA,IAAI,CAACI,YAAL,CAAkB,CAAlB,EAAqBqB,UAArB;AACAiC,EAAAA,CAAC,CAAC1B,mBAAF,CAAsBhC,IAAtB,EAA4BoB,OAA5B;;AAEApB,EAAAA,IAAI,CAACkE,OAAL;;AAEA;AACAR,EAAAA,CAAC,CAACa,qBAAF,CAAwB,MAAM;AAC5B9D,IAAAA,OAAO,CAACH,MAAR;AACD,GAFD;AAGD,CAnBH;;AAqBAS,CAAC,CAAC0B,IAAF,CAAO,mCAAP;AACGzF,MADH,CACUF,KAAK,CAAC,SAAD,CADf;AAEG2G,EAFH,CAEM,MAAMC,CAAN,IAAW;AACb,QAAM,EAAEtC,OAAF,KAAcsC,CAAC,CAAC1G,MAAtB;AACA,QAAM,EAAEuE,UAAF,EAAcE,UAAd,EAA0BhB,OAA1B,EAAmCT,IAAnC,EAAyC4B,QAAzC,KAAsD8B,CAAC,CAACvC,mBAAF,CAAsBC,OAAtB,CAA5D;AACAsC,EAAAA,CAAC,CAAC3B,WAAF,CAAc/B,IAAd,EAAoB4B,QAApB,EAA8BR,OAA9B;AACApB,EAAAA,IAAI,CAACI,YAAL,CAAkB,CAAlB,EAAqBmB,UAArB;AACA,MAAIH,OAAJ,EAAasC,CAAC,CAACvB,iCAAF,CAAoCnC,IAApC;AACbA,EAAAA,IAAI,CAACkE,OAAL;;AAEA,QAAM6D,KAAK,GAAG3G,OAAO;AACjBX,EAAAA,OAAO,CAACkB,gBAAR,EADiB;AAEjB+B,EAAAA,CAAC,CAAClD,qBAAF,CAAwBC,OAAxB,EAAiCiD,CAAC,CAAC7F,aAAF,GAAkByD,UAAlB,EAAjC,CAFJ;AAGAoC,EAAAA,CAAC,CAAC3B,WAAF,CAAcgG,KAAd,EAAqBnG,QAArB,EAA+BR,OAA/B;AACA2G,EAAAA,KAAK,CAAC3H,YAAN,CAAmB,CAAnB,EAAsBqB,UAAtB;AACA,MAAIL,OAAJ,EAAasC,CAAC,CAACvB,iCAAF,CAAoCnC,IAApC;AACb+H,EAAAA,KAAK,CAAC7D,OAAN;;AAEA;AACAzD,EAAAA,OAAO,CAACH,MAAR;AACD,CApBH","sourcesContent":["export const description = `\nTexture Usages Validation Tests in Render Pass and Compute Pass.\n\nTODO: description per test\n\nTest Coverage:\n  - For each combination of two texture usages:\n    - For various subresource ranges (different mip levels or array layers) that overlap a given\n      subresources or not for color formats:\n      - For various places that resources are used, for example, used in bundle or used in render\n        pass directly.\n        - Check that an error is generated when read-write or write-write usages are binding to the\n          same texture subresource. Otherwise, no error should be generated. One exception is race\n          condition upon two writeonly-storage-texture usages, which is valid.\n\n  - For each combination of two texture usages:\n    - For various aspects (all, depth-only, stencil-only) that overlap a given subresources or not\n      for depth/stencil formats:\n      - Check that an error is generated when read-write or write-write usages are binding to the\n        same aspect. Otherwise, no error should be generated.\n\n  - Test combinations of two shader stages:\n    - Texture usages in bindings with invisible shader stages should be validated. Invisible shader\n      stages include shader stage with visibility none, compute shader stage in render pass, and\n      vertex/fragment shader stage in compute pass.\n\n  - Tests replaced bindings:\n    - Texture usages via bindings replaced by another setBindGroup() upon the same bindGroup index\n      in render pass should be validated. However, replaced bindings should not be validated in\n      compute pass.\n\n  - Test texture usages in bundle:\n    - Texture usages in bundle should be validated if that bundle is executed in the current scope.\n\n  - Test texture usages with unused bindings:\n    - Texture usages should be validated even its bindings is not used in pipeline.\n\n  - Test texture usages validation scope:\n    - Texture usages should be validated per each render pass. And they should be validated per each\n      dispatch call in compute.\n`;\n\nimport { pbool, poptions, params } from '../../../../../common/framework/params_builder.js';\nimport { pp } from '../../../../../common/framework/preprocessor.js';\nimport { makeTestGroup } from '../../../../../common/framework/test_group.js';\nimport { assert } from '../../../../../common/framework/util/util.js';\nimport {\n  kDepthStencilFormats,\n  kDepthStencilFormatInfo,\n  kTextureBindingTypes,\n  kTextureBindingTypeInfo,\n  kShaderStages,\n} from '../../../../capability_info.js';\nimport { GPUConst } from '../../../../constants.js';\nimport { ValidationTest } from '../../validation_test.js';\n\nconst SIZE = 32;\nclass TextureUsageTracking extends ValidationTest {\n  createTexture(\n    options: {\n      width?: number;\n      height?: number;\n      arrayLayerCount?: number;\n      mipLevelCount?: number;\n      sampleCount?: number;\n      format?: GPUTextureFormat;\n      usage?: GPUTextureUsageFlags;\n    } = {}\n  ): GPUTexture {\n    const {\n      width = SIZE,\n      height = SIZE,\n      arrayLayerCount = 1,\n      mipLevelCount = 1,\n      sampleCount = 1,\n      format = 'rgba8unorm',\n      usage = GPUTextureUsage.OUTPUT_ATTACHMENT | GPUTextureUsage.SAMPLED,\n    } = options;\n\n    return this.device.createTexture({\n      size: { width, height, depth: arrayLayerCount },\n      mipLevelCount,\n      sampleCount,\n      dimension: '2d',\n      format,\n      usage,\n    });\n  }\n\n  createBindGroup(\n    index: number,\n    view: GPUTextureView,\n    bindingType: GPUBindingType,\n    dimension: GPUTextureViewDimension,\n    bindingTexFormat: GPUTextureFormat | undefined\n  ): GPUBindGroup {\n    return this.device.createBindGroup({\n      entries: [{ binding: index, resource: view }],\n      layout: this.device.createBindGroupLayout({\n        entries: [\n          {\n            binding: index,\n            visibility: GPUShaderStage.COMPUTE | GPUShaderStage.FRAGMENT,\n            type: bindingType,\n            viewDimension: dimension,\n            storageTextureFormat: bindingTexFormat,\n          },\n        ],\n      }),\n    });\n  }\n\n  createAndExecuteBundle(index: number, bindGroup: GPUBindGroup, pass: GPURenderPassEncoder) {\n    const bundleEncoder = this.device.createRenderBundleEncoder({\n      colorFormats: ['rgba8unorm'],\n    });\n    bundleEncoder.setBindGroup(index, bindGroup);\n    const bundle = bundleEncoder.finish();\n    pass.executeBundles([bundle]);\n  }\n\n  beginSimpleRenderPass(encoder: GPUCommandEncoder, view: GPUTextureView): GPURenderPassEncoder {\n    return encoder.beginRenderPass({\n      colorAttachments: [\n        {\n          attachment: view,\n          loadValue: { r: 0.0, g: 1.0, b: 0.0, a: 1.0 },\n          storeOp: 'store',\n        },\n      ],\n    });\n  }\n\n  testValidationScope(\n    compute: boolean\n  ): {\n    bindGroup0: GPUBindGroup;\n    bindGroup1: GPUBindGroup;\n    encoder: GPUCommandEncoder;\n    pass: GPURenderPassEncoder | GPUComputePassEncoder;\n    pipeline: GPURenderPipeline | GPUComputePipeline;\n  } {\n    // Create two bind groups. Resource usages conflict between these two bind groups. But resource\n    // usage inside each bind group doesn't conflict.\n    const view = this.createTexture({\n      usage: GPUTextureUsage.STORAGE | GPUTextureUsage.SAMPLED,\n    }).createView();\n    const bindGroup0 = this.createBindGroup(0, view, 'sampled-texture', '2d', undefined);\n    const bindGroup1 = this.createBindGroup(\n      0,\n      view,\n      'writeonly-storage-texture',\n      '2d',\n      'rgba8unorm'\n    );\n\n    const encoder = this.device.createCommandEncoder();\n    const pass = compute\n      ? encoder.beginComputePass()\n      : this.beginSimpleRenderPass(encoder, this.createTexture().createView());\n\n    // Create pipeline. Note that bindings unused in pipeline should be validated too.\n    const pipeline = compute ? this.createNoOpComputePipeline() : this.createNoOpRenderPipeline();\n    return {\n      bindGroup0,\n      bindGroup1,\n      encoder,\n      pass,\n      pipeline,\n    };\n  }\n\n  setPipeline(\n    pass: GPURenderPassEncoder | GPUComputePassEncoder,\n    pipeline: GPURenderPipeline | GPUComputePipeline,\n    compute: boolean\n  ) {\n    if (compute) {\n      (pass as GPUComputePassEncoder).setPipeline(pipeline as GPUComputePipeline);\n    } else {\n      (pass as GPURenderPassEncoder).setPipeline(pipeline as GPURenderPipeline);\n    }\n  }\n\n  issueDrawOrDispatch(pass: GPURenderPassEncoder | GPUComputePassEncoder, compute: boolean) {\n    if (compute) {\n      (pass as GPUComputePassEncoder).dispatch(1);\n    } else {\n      (pass as GPURenderPassEncoder).draw(3, 1, 0, 0);\n    }\n  }\n\n  setComputePipelineAndCallDispatch(pass: GPUComputePassEncoder) {\n    const pipeline = this.createNoOpComputePipeline();\n    pass.setPipeline(pipeline);\n    pass.dispatch(1);\n  }\n}\n\nexport const g = makeTestGroup(TextureUsageTracking);\n\nconst BASE_LEVEL = 1;\nconst TOTAL_LEVELS = 6;\nconst BASE_LAYER = 1;\nconst TOTAL_LAYERS = 6;\nconst SLICE_COUNT = 2;\n\n// For all tests below, we test compute pass if 'compute' is true, and test render pass otherwise.\ng.test('subresources_and_binding_types_combination_for_color')\n  .params(\n    params()\n      .combine(pbool('compute'))\n      .combine(pbool('binding0InBundle'))\n      .combine(pbool('binding1InBundle'))\n      .combine([\n        // Two texture usages are binding to the same texture subresource.\n        {\n          levelCount0: 1,\n          layerCount0: 1,\n          baseLevel1: BASE_LEVEL,\n          levelCount1: 1,\n          baseLayer1: BASE_LAYER,\n          layerCount1: 1,\n          _resourceSuccess: false,\n        },\n\n        // Two texture usages are binding to different mip levels of the same texture.\n        {\n          levelCount0: 1,\n          layerCount0: 1,\n          baseLevel1: BASE_LEVEL + 1,\n          levelCount1: 1,\n          baseLayer1: BASE_LAYER,\n          layerCount1: 1,\n          _resourceSuccess: true,\n        },\n\n        // Two texture usages are binding to different array layers of the same texture.\n        {\n          levelCount0: 1,\n          layerCount0: 1,\n          baseLevel1: BASE_LEVEL,\n          levelCount1: 1,\n          baseLayer1: BASE_LAYER + 1,\n          layerCount1: 1,\n          _resourceSuccess: true,\n        },\n\n        // The second texture usage contains the whole mip chain where the first texture usage is using.\n        {\n          levelCount0: 1,\n          layerCount0: 1,\n          baseLevel1: 0,\n          levelCount1: TOTAL_LEVELS,\n          baseLayer1: BASE_LAYER,\n          layerCount1: 1,\n          _resourceSuccess: false,\n        },\n\n        // The second texture usage contains all layers where the first texture usage is using.\n        {\n          levelCount0: 1,\n          layerCount0: 1,\n          baseLevel1: BASE_LEVEL,\n          levelCount1: 1,\n          baseLayer1: 0,\n          layerCount1: TOTAL_LAYERS,\n          _resourceSuccess: false,\n        },\n\n        // The second texture usage contains all subresources where the first texture usage is using.\n        {\n          levelCount0: 1,\n          layerCount0: 1,\n          baseLevel1: 0,\n          levelCount1: TOTAL_LEVELS,\n          baseLayer1: 0,\n          layerCount1: TOTAL_LAYERS,\n          _resourceSuccess: false,\n        },\n\n        // Both of the two usages access a few mip levels on the same layer but they don't overlap.\n        {\n          levelCount0: SLICE_COUNT,\n          layerCount0: 1,\n          baseLevel1: BASE_LEVEL + SLICE_COUNT,\n          levelCount1: 3,\n          baseLayer1: BASE_LAYER,\n          layerCount1: 1,\n          _resourceSuccess: true,\n        },\n\n        // Both of the two usages access a few mip levels on the same layer and they overlap.\n        {\n          levelCount0: SLICE_COUNT,\n          layerCount0: 1,\n          baseLevel1: BASE_LEVEL + SLICE_COUNT - 1,\n          levelCount1: 3,\n          baseLayer1: BASE_LAYER,\n          layerCount1: 1,\n          _resourceSuccess: false,\n        },\n\n        // Both of the two usages access a few array layers on the same level but they don't overlap.\n        {\n          levelCount0: 1,\n          layerCount0: SLICE_COUNT,\n          baseLevel1: BASE_LEVEL,\n          levelCount1: 1,\n          baseLayer1: BASE_LAYER + SLICE_COUNT,\n          layerCount1: 3,\n          _resourceSuccess: true,\n        },\n\n        // Both of the two usages access a few array layers on the same level and they overlap.\n        {\n          levelCount0: 1,\n          layerCount0: SLICE_COUNT,\n          baseLevel1: BASE_LEVEL,\n          levelCount1: 1,\n          baseLayer1: BASE_LAYER + SLICE_COUNT - 1,\n          layerCount1: 3,\n          _resourceSuccess: false,\n        },\n\n        // Both of the two usages access a few array layers and mip levels but they don't overlap.\n        {\n          levelCount0: SLICE_COUNT,\n          layerCount0: SLICE_COUNT,\n          baseLevel1: BASE_LEVEL + SLICE_COUNT,\n          levelCount1: 3,\n          baseLayer1: BASE_LAYER + SLICE_COUNT,\n          layerCount1: 3,\n          _resourceSuccess: true,\n        },\n\n        // Both of the two usages access a few array layers and mip levels and they overlap.\n        {\n          levelCount0: SLICE_COUNT,\n          layerCount0: SLICE_COUNT,\n          baseLevel1: BASE_LEVEL + SLICE_COUNT - 1,\n          levelCount1: 3,\n          baseLayer1: BASE_LAYER + SLICE_COUNT - 1,\n          layerCount1: 3,\n          _resourceSuccess: false,\n        },\n      ])\n      .combine([\n        {\n          type0: 'sampled-texture',\n          type1: 'sampled-texture',\n          _usageSuccess: true,\n        },\n        {\n          type0: 'sampled-texture',\n          type1: 'readonly-storage-texture',\n          _usageSuccess: true,\n        },\n        {\n          type0: 'sampled-texture',\n          type1: 'writeonly-storage-texture',\n          _usageSuccess: false,\n        },\n        {\n          type0: 'sampled-texture',\n          type1: 'render-target',\n          _usageSuccess: false,\n        },\n        {\n          type0: 'readonly-storage-texture',\n          type1: 'readonly-storage-texture',\n          _usageSuccess: true,\n        },\n        {\n          type0: 'readonly-storage-texture',\n          type1: 'writeonly-storage-texture',\n          _usageSuccess: false,\n        },\n        {\n          type0: 'readonly-storage-texture',\n          type1: 'render-target',\n          _usageSuccess: false,\n        },\n        // Race condition upon multiple writable storage texture is valid.\n        {\n          type0: 'writeonly-storage-texture',\n          type1: 'writeonly-storage-texture',\n          _usageSuccess: true,\n        },\n        {\n          type0: 'writeonly-storage-texture',\n          type1: 'render-target',\n          _usageSuccess: false,\n        },\n        {\n          type0: 'render-target',\n          type1: 'render-target',\n          _usageSuccess: false,\n        },\n      ] as const)\n      // Every color attachment can use only one single subresource.\n      .unless(\n        p =>\n          (p.type0 === 'render-target' && (p.levelCount0 !== 1 || p.layerCount0 !== 1)) ||\n          (p.type1 === 'render-target' && (p.levelCount1 !== 1 || p.layerCount1 !== 1))\n      )\n      // All color attachments' size should be the same.\n      .unless(\n        p =>\n          p.type0 === 'render-target' && p.type1 === 'render-target' && p.baseLevel1 !== BASE_LEVEL\n      )\n      .unless(\n        p =>\n          // We can't set 'render-target' in bundle, so we need to exclude it from bundle.\n          (p.binding0InBundle && p.type0 === 'render-target') ||\n          (p.binding1InBundle && p.type1 === 'render-target')\n      )\n      .unless(\n        p =>\n          // We can't set 'render-target' or bundle in compute.\n          p.compute &&\n          (p.binding0InBundle ||\n            p.binding1InBundle ||\n            p.type0 === 'render-target' ||\n            p.type1 === 'render-target')\n      )\n  )\n  .fn(async t => {\n    const {\n      compute,\n      binding0InBundle,\n      binding1InBundle,\n      levelCount0,\n      layerCount0,\n      baseLevel1,\n      baseLayer1,\n      levelCount1,\n      layerCount1,\n      type0,\n      type1,\n      _usageSuccess,\n      _resourceSuccess,\n    } = t.params;\n\n    const texture = t.createTexture({\n      arrayLayerCount: TOTAL_LAYERS,\n      mipLevelCount: TOTAL_LEVELS,\n      usage: GPUTextureUsage.SAMPLED | GPUTextureUsage.STORAGE | GPUTextureUsage.OUTPUT_ATTACHMENT,\n    });\n\n    const dimension0 = layerCount0 !== 1 ? '2d-array' : '2d';\n    const view0 = texture.createView({\n      dimension: dimension0,\n      baseMipLevel: BASE_LEVEL,\n      mipLevelCount: levelCount0,\n      baseArrayLayer: BASE_LAYER,\n      arrayLayerCount: layerCount0,\n    });\n\n    const dimension1 = layerCount1 !== 1 ? '2d-array' : '2d';\n    const view1 = texture.createView({\n      dimension: dimension1,\n      baseMipLevel: baseLevel1,\n      mipLevelCount: levelCount1,\n      baseArrayLayer: baseLayer1,\n      arrayLayerCount: layerCount1,\n    });\n\n    const encoder = t.device.createCommandEncoder();\n    if (type0 === 'render-target') {\n      // Note that type1 is 'render-target' too. So we don't need to create bindings.\n      assert(type1 === 'render-target');\n      const pass = encoder.beginRenderPass({\n        colorAttachments: [\n          {\n            attachment: view0,\n            loadValue: { r: 0.0, g: 1.0, b: 0.0, a: 1.0 },\n            storeOp: 'store',\n          },\n          {\n            attachment: view1,\n            loadValue: { r: 0.0, g: 1.0, b: 0.0, a: 1.0 },\n            storeOp: 'store',\n          },\n        ],\n      });\n      pass.endPass();\n    } else {\n      const pass = compute\n        ? encoder.beginComputePass()\n        : t.beginSimpleRenderPass(\n            encoder,\n            type1 === 'render-target' ? view1 : t.createTexture().createView()\n          );\n\n      // Create bind groups. Set bind groups in pass directly or set bind groups in bundle.\n      const storageTextureFormat0 = type0 === 'sampled-texture' ? undefined : 'rgba8unorm';\n      const bindGroup0 = t.createBindGroup(0, view0, type0, dimension0, storageTextureFormat0);\n      if (binding0InBundle) {\n        assert(pass instanceof GPURenderPassEncoder);\n        t.createAndExecuteBundle(0, bindGroup0, pass);\n      } else {\n        pass.setBindGroup(0, bindGroup0);\n      }\n      if (type1 !== 'render-target') {\n        const storageTextureFormat1 = type1 === 'sampled-texture' ? undefined : 'rgba8unorm';\n        const bindGroup1 = t.createBindGroup(1, view1, type1, dimension1, storageTextureFormat1);\n        if (binding1InBundle) {\n          assert(pass instanceof GPURenderPassEncoder);\n          t.createAndExecuteBundle(1, bindGroup1, pass);\n        } else {\n          pass.setBindGroup(1, bindGroup1);\n        }\n      }\n      if (compute) t.setComputePipelineAndCallDispatch(pass as GPUComputePassEncoder);\n      pass.endPass();\n    }\n\n    const success = _resourceSuccess || _usageSuccess;\n    t.expectValidationError(() => {\n      encoder.finish();\n    }, !success);\n  });\n\ng.test('subresources_and_binding_types_combination_for_aspect')\n  .params(\n    params()\n      .combine(pbool('compute'))\n      .combine(pbool('binding0InBundle'))\n      .combine(pbool('binding1InBundle'))\n      .combine(poptions('format', kDepthStencilFormats))\n      .combine([\n        {\n          baseLevel: BASE_LEVEL,\n          baseLayer: BASE_LAYER,\n          _resourceSuccess: false,\n        },\n        {\n          baseLevel: BASE_LEVEL + 1,\n          baseLayer: BASE_LAYER,\n          _resourceSuccess: true,\n        },\n        {\n          baseLevel: BASE_LEVEL,\n          baseLayer: BASE_LAYER + 1,\n          _resourceSuccess: true,\n        },\n      ])\n      .combine(poptions('aspect0', ['all', 'depth-only', 'stencil-only'] as const))\n      .combine(poptions('aspect1', ['all', 'depth-only', 'stencil-only'] as const))\n      .unless(\n        p =>\n          (p.aspect0 === 'stencil-only' && !kDepthStencilFormatInfo[p.format].stencil) ||\n          (p.aspect1 === 'stencil-only' && !kDepthStencilFormatInfo[p.format].stencil)\n      )\n      .unless(\n        p =>\n          (p.aspect0 === 'depth-only' && !kDepthStencilFormatInfo[p.format].depth) ||\n          (p.aspect1 === 'depth-only' && !kDepthStencilFormatInfo[p.format].depth)\n      )\n      .combine([\n        {\n          type0: 'sampled-texture',\n          type1: 'sampled-texture',\n          _usageSuccess: true,\n        },\n        {\n          type0: 'sampled-texture',\n          type1: 'render-target',\n          _usageSuccess: false,\n        },\n      ] as const)\n      .unless(\n        p =>\n          // We can't set 'render-target' in bundle, so we need to exclude it from bundle.\n          p.binding1InBundle && p.type1 === 'render-target'\n      )\n      .unless(\n        p =>\n          // We can't set 'render-target' or bundle in compute. Note that type0 is definitely not\n          // 'render-target'\n          p.compute && (p.binding0InBundle || p.binding1InBundle || p.type1 === 'render-target')\n      )\n  )\n  .fn(async t => {\n    const {\n      compute,\n      binding0InBundle,\n      binding1InBundle,\n      format,\n      baseLevel,\n      baseLayer,\n      aspect0,\n      aspect1,\n      type0,\n      type1,\n      _resourceSuccess,\n      _usageSuccess,\n    } = t.params;\n\n    const texture = t.createTexture({\n      arrayLayerCount: TOTAL_LAYERS,\n      mipLevelCount: TOTAL_LEVELS,\n      format,\n    });\n\n    const view0 = texture.createView({\n      baseMipLevel: BASE_LEVEL,\n      mipLevelCount: 1,\n      baseArrayLayer: BASE_LAYER,\n      arrayLayerCount: 1,\n      aspect: aspect0,\n    });\n\n    const view1 = texture.createView({\n      baseMipLevel: baseLevel,\n      mipLevelCount: 1,\n      baseArrayLayer: baseLayer,\n      arrayLayerCount: 1,\n      aspect: aspect1,\n    });\n\n    const encoder = t.device.createCommandEncoder();\n    // Color attachment's size should match depth/stencil attachment's size. Note that if\n    // type1 !== 'render-target' then there's no depthStencilAttachment to match anyway.\n    const size = SIZE >> baseLevel;\n    const pass = compute\n      ? encoder.beginComputePass()\n      : encoder.beginRenderPass({\n          colorAttachments: [\n            {\n              attachment: t.createTexture({ width: size, height: size }).createView(),\n              loadValue: { r: 0.0, g: 1.0, b: 0.0, a: 1.0 },\n              storeOp: 'store',\n            },\n          ],\n          depthStencilAttachment:\n            type1 !== 'render-target'\n              ? undefined\n              : {\n                  attachment: view1,\n                  depthStoreOp: 'clear',\n                  depthLoadValue: 'load',\n                  stencilStoreOp: 'clear',\n                  stencilLoadValue: 'load',\n                },\n        });\n\n    // Create bind groups. Set bind groups in pass directly or set bind groups in bundle.\n    const bindGroup0 = t.createBindGroup(0, view0, type0, '2d', undefined);\n    if (binding0InBundle) {\n      assert(pass instanceof GPURenderPassEncoder);\n      t.createAndExecuteBundle(0, bindGroup0, pass as GPURenderPassEncoder);\n    } else {\n      pass.setBindGroup(0, bindGroup0);\n    }\n    if (type1 !== 'render-target') {\n      const bindGroup1 = t.createBindGroup(1, view1, type1, '2d', undefined);\n      if (binding1InBundle) {\n        assert(pass instanceof GPURenderPassEncoder);\n        t.createAndExecuteBundle(1, bindGroup1, pass as GPURenderPassEncoder);\n      } else {\n        pass.setBindGroup(1, bindGroup1);\n      }\n    }\n    if (compute) t.setComputePipelineAndCallDispatch(pass as GPUComputePassEncoder);\n    pass.endPass();\n\n    const disjointAspects =\n      (aspect0 === 'depth-only' && aspect1 === 'stencil-only') ||\n      (aspect0 === 'stencil-only' && aspect1 === 'depth-only');\n\n    // If subresources' mip/array slices has no overlap, or their binding types don't conflict,\n    // it will definitely success no matter what aspects they are binding to.\n    const success = disjointAspects || _resourceSuccess || _usageSuccess;\n\n    t.expectValidationError(() => {\n      encoder.finish();\n    }, !success);\n  });\n\ng.test('shader_stages_and_visibility')\n  .params(\n    params()\n      .combine(pbool('compute'))\n      .combine(poptions('readVisibility', [0, ...kShaderStages]))\n      .combine(poptions('writeVisibility', [0, ...kShaderStages]))\n      .unless(\n        p =>\n          // Writeonly-storage-texture binding type is not supported in vertex stage. But it is the\n          // only way to write into texture in compute. So there is no means to successfully create\n          // a binding which attempt to write into stage(s) with vertex stage in compute pass.\n          p.compute && Boolean(p.writeVisibility & GPUConst.ShaderStage.VERTEX)\n      )\n  )\n  .fn(async t => {\n    const { compute, readVisibility, writeVisibility } = t.params;\n\n    // writeonly-storage-texture binding type is not supported in vertex stage. So, this test\n    // uses writeonly-storage-texture binding as writable binding upon the same subresource if\n    // vertex stage is not included. Otherwise, it uses output attachment instead.\n    const writeHasVertexStage = Boolean(writeVisibility & GPUShaderStage.VERTEX);\n    const texUsage = writeHasVertexStage\n      ? GPUTextureUsage.SAMPLED | GPUTextureUsage.OUTPUT_ATTACHMENT\n      : GPUTextureUsage.SAMPLED | GPUTextureUsage.STORAGE;\n\n    const texture = t.createTexture({ usage: texUsage });\n    const view = texture.createView();\n    const bglEntries: GPUBindGroupLayoutEntry[] = [\n      { binding: 0, visibility: readVisibility, type: 'sampled-texture' },\n    ];\n    const bgEntries: GPUBindGroupEntry[] = [{ binding: 0, resource: view }];\n    if (!writeHasVertexStage) {\n      bglEntries.push({\n        binding: 1,\n        visibility: writeVisibility,\n        type: 'writeonly-storage-texture',\n        storageTextureFormat: 'rgba8unorm',\n      });\n      bgEntries.push({ binding: 1, resource: view });\n    }\n    const bindGroup = t.device.createBindGroup({\n      entries: bgEntries,\n      layout: t.device.createBindGroupLayout({ entries: bglEntries }),\n    });\n\n    const encoder = t.device.createCommandEncoder();\n    const pass = compute\n      ? encoder.beginComputePass()\n      : t.beginSimpleRenderPass(\n          encoder,\n          writeHasVertexStage ? view : t.createTexture().createView()\n        );\n    pass.setBindGroup(0, bindGroup);\n    if (compute) t.setComputePipelineAndCallDispatch(pass as GPUComputePassEncoder);\n    pass.endPass();\n\n    // Texture usages in bindings with invisible shader stages should be validated. Invisible shader\n    // stages include shader stage with visibility none, compute shader stage in render pass, and\n    // vertex/fragment shader stage in compute pass.\n    t.expectValidationError(() => {\n      encoder.finish();\n    });\n  });\n\n// We should validate the texture usages in bindings which are replaced by another setBindGroup()\n// call site upon the same index in the same render pass. However, replaced bindings in compute\n// should not be validated.\ng.test('replaced_binding')\n  .params(\n    params()\n      .combine(pbool('compute'))\n      .combine(pbool('callDrawOrDispatch'))\n      .combine(poptions('bindingType', kTextureBindingTypes))\n  )\n  .fn(async t => {\n    const { compute, callDrawOrDispatch, bindingType } = t.params;\n    const info = kTextureBindingTypeInfo[bindingType];\n    const bindingTexFormat = info.resource === 'storageTex' ? 'rgba8unorm' : undefined;\n\n    const sampledView = t.createTexture().createView();\n    const sampledStorageView = t\n      .createTexture({ usage: GPUTextureUsage.STORAGE | GPUTextureUsage.SAMPLED })\n      .createView();\n\n    // Create bindGroup0. It has two bindings. These two bindings use different views/subresources.\n    const bglEntries0: GPUBindGroupLayoutEntry[] = [\n      { binding: 0, visibility: GPUShaderStage.FRAGMENT, type: 'sampled-texture' },\n      {\n        binding: 1,\n        visibility: GPUShaderStage.FRAGMENT,\n        type: bindingType,\n        storageTextureFormat: bindingTexFormat,\n      },\n    ];\n    const bgEntries0: GPUBindGroupEntry[] = [\n      { binding: 0, resource: sampledView },\n      { binding: 1, resource: sampledStorageView },\n    ];\n    const bindGroup0 = t.device.createBindGroup({\n      entries: bgEntries0,\n      layout: t.device.createBindGroupLayout({ entries: bglEntries0 }),\n    });\n\n    // Create bindGroup1. It has one binding, which use the same view/subresoure of a binding in\n    // bindGroup0. So it may or may not conflicts with that binding in bindGroup0.\n    const bindGroup1 = t.createBindGroup(0, sampledStorageView, 'sampled-texture', '2d', undefined);\n\n    const encoder = t.device.createCommandEncoder();\n    const pass = compute\n      ? encoder.beginComputePass()\n      : t.beginSimpleRenderPass(encoder, t.createTexture().createView());\n\n    // Set bindGroup0 and bindGroup1. bindGroup0 is replaced by bindGroup1 in the current pass.\n    // But bindings in bindGroup0 should be validated too.\n    pass.setBindGroup(0, bindGroup0);\n    if (callDrawOrDispatch) {\n      const pipeline = compute ? t.createNoOpComputePipeline() : t.createNoOpRenderPipeline();\n      t.setPipeline(pass, pipeline, compute);\n      t.issueDrawOrDispatch(pass, compute);\n    }\n    pass.setBindGroup(0, bindGroup1);\n    pass.endPass();\n\n    // TODO: If the Compatible Usage List (https://gpuweb.github.io/gpuweb/#compatible-usage-list)\n    // gets programmatically defined in capability_info, use it here, instead of this logic, for clarity.\n    let success = bindingType !== 'writeonly-storage-texture';\n    // Replaced bindings should not be validated in compute pass, because validation only occurs\n    // inside dispatch() which only looks at the current resource usages.\n    success ||= compute;\n\n    t.expectValidationError(() => {\n      encoder.finish();\n    }, !success);\n  });\n\ng.test('bindings_in_bundle')\n  .params(\n    params()\n      .combine(pbool('binding0InBundle'))\n      .combine(pbool('binding1InBundle'))\n      .combine(poptions('type0', ['render-target', ...kTextureBindingTypes] as const))\n      .combine(poptions('type1', ['render-target', ...kTextureBindingTypes] as const))\n      .unless(\n        p =>\n          // We can't set 'render-target' in bundle, so we need to exclude it from bundle.\n          // In addition, if both bindings are non-bundle, there is no need to test it because\n          // we have far more comprehensive test cases for that situation in this file.\n          (p.binding0InBundle && p.type0 === 'render-target') ||\n          (p.binding1InBundle && p.type1 === 'render-target') ||\n          (!p.binding0InBundle && !p.binding1InBundle)\n      )\n  )\n  .fn(async t => {\n    const { binding0InBundle, binding1InBundle, type0, type1 } = t.params;\n\n    // Two bindings are attached to the same texture view.\n    const view = t\n      .createTexture({\n        usage:\n          GPUTextureUsage.OUTPUT_ATTACHMENT | GPUTextureUsage.STORAGE | GPUTextureUsage.SAMPLED,\n      })\n      .createView();\n\n    const bindGroups: GPUBindGroup[] = [];\n    if (type0 !== 'render-target') {\n      const binding0TexFormat = type0 === 'sampled-texture' ? undefined : 'rgba8unorm';\n      bindGroups[0] = t.createBindGroup(0, view, type0, '2d', binding0TexFormat);\n    }\n    if (type1 !== 'render-target') {\n      const binding1TexFormat = type1 === 'sampled-texture' ? undefined : 'rgba8unorm';\n      bindGroups[1] = t.createBindGroup(1, view, type1, '2d', binding1TexFormat);\n    }\n\n    const encoder = t.device.createCommandEncoder();\n    // At least one binding is in bundle, which means that its type is not 'render-target'.\n    // As a result, only one binding's type is 'render-target' at most.\n    const pass = t.beginSimpleRenderPass(\n      encoder,\n      type0 === 'render-target' || type1 === 'render-target' ? view : t.createTexture().createView()\n    );\n\n    const bindingsInBundle: boolean[] = [binding0InBundle, binding1InBundle];\n    for (let i = 0; i < 2; i++) {\n      // Create a bundle for each bind group if its bindings is required to be in bundle on purpose.\n      // Otherwise, call setBindGroup directly in pass if needed (when its binding is not\n      // 'render-target').\n      if (bindingsInBundle[i]) {\n        const bundleEncoder = t.device.createRenderBundleEncoder({\n          colorFormats: ['rgba8unorm'],\n        });\n        bundleEncoder.setBindGroup(i, bindGroups[i]);\n        const bundleInPass = bundleEncoder.finish();\n        pass.executeBundles([bundleInPass]);\n      } else if (bindGroups[i] !== undefined) {\n        pass.setBindGroup(i, bindGroups[i]);\n      }\n    }\n\n    pass.endPass();\n\n    let success = false;\n    if (\n      (type0 === 'sampled-texture' || type0 === 'readonly-storage-texture') &&\n      (type1 === 'sampled-texture' || type1 === 'readonly-storage-texture')\n    ) {\n      success = true;\n    }\n\n    if (type0 === 'writeonly-storage-texture' && type1 === 'writeonly-storage-texture') {\n      success = true;\n    }\n\n    // Resource usages in bundle should be validated.\n    t.expectValidationError(() => {\n      encoder.finish();\n    }, !success);\n  });\n\ng.test('unused_bindings_in_pipeline')\n  .params(\n    params()\n      .combine(pbool('compute'))\n      .combine(pbool('useBindGroup0'))\n      .combine(pbool('useBindGroup1'))\n      .combine(poptions('setBindGroupsOrder', ['common', 'reversed'] as const))\n      .combine(poptions('setPipeline', ['before', 'middle', 'after', 'none'] as const))\n      .combine(pbool('callDrawOrDispatch'))\n  )\n  .fn(async t => {\n    const {\n      compute,\n      useBindGroup0,\n      useBindGroup1,\n      setBindGroupsOrder,\n      setPipeline,\n      callDrawOrDispatch,\n    } = t.params;\n    const view = t.createTexture({ usage: GPUTextureUsage.STORAGE }).createView();\n    const bindGroup0 = t.createBindGroup(0, view, 'readonly-storage-texture', '2d', 'rgba8unorm');\n    const bindGroup1 = t.createBindGroup(0, view, 'writeonly-storage-texture', '2d', 'rgba8unorm');\n\n    const wgslVertex = '[[stage(vertex)]] fn main() -> void {}';\n    // TODO: revisit the shader code once 'image' can be supported in wgsl.\n    const wgslFragment = pp`\n      ${pp._if(useBindGroup0)}\n      [[group(0), binding(0)]] var<image> image0 : [[access(read)]] texture_storage_2d<rgba8unorm>;\n      ${pp._endif}\n      ${pp._if(useBindGroup1)}\n      [[group(1), binding(0)]] var<image> image1 : [[access(read)]] texture_storage_2d<rgba8unorm>;\n      ${pp._endif}\n      [[stage(fragment)]] fn main() -> void {}\n    `;\n\n    // TODO: revisit the shader code once 'image' can be supported in wgsl.\n    const wgslCompute = pp`\n      ${pp._if(useBindGroup0)}\n      [[group(0), binding(0)]] var<image> image0 : [[access(read)]] texture_storage_2d<rgba8unorm>;\n      ${pp._endif}\n      ${pp._if(useBindGroup1)}\n      [[group(1), binding(0)]] var<image> image1 : [[access(read)]] texture_storage_2d<rgba8unorm>;\n      ${pp._endif}\n      [[stage(compute)]] fn main() -> void {}\n    `;\n\n    const pipeline = compute\n      ? t.device.createComputePipeline({\n          computeStage: {\n            module: t.device.createShaderModule({\n              code: wgslCompute,\n            }),\n            entryPoint: 'main',\n          },\n        })\n      : t.device.createRenderPipeline({\n          vertexStage: {\n            module: t.device.createShaderModule({\n              code: wgslVertex,\n            }),\n            entryPoint: 'main',\n          },\n          fragmentStage: {\n            module: t.device.createShaderModule({\n              code: wgslFragment,\n            }),\n            entryPoint: 'main',\n          },\n          primitiveTopology: 'triangle-list',\n          colorStates: [{ format: 'rgba8unorm' }],\n        });\n\n    const encoder = t.device.createCommandEncoder();\n    const pass = compute\n      ? encoder.beginComputePass()\n      : encoder.beginRenderPass({\n          colorAttachments: [\n            {\n              attachment: t.createTexture().createView(),\n              loadValue: { r: 0.0, g: 1.0, b: 0.0, a: 1.0 },\n              storeOp: 'store',\n            },\n          ],\n        });\n    const index0 = setBindGroupsOrder === 'common' ? 0 : 1;\n    const index1 = setBindGroupsOrder === 'common' ? 1 : 0;\n    if (setPipeline === 'before') t.setPipeline(pass, pipeline, compute);\n    pass.setBindGroup(index0, bindGroup0);\n    if (setPipeline === 'middle') t.setPipeline(pass, pipeline, compute);\n    pass.setBindGroup(index1, bindGroup1);\n    if (setPipeline === 'after') t.setPipeline(pass, pipeline, compute);\n    if (callDrawOrDispatch) t.issueDrawOrDispatch(pass, compute);\n    pass.endPass();\n\n    // Resource usage validation scope is defined by dispatch calls. If dispatch is not called,\n    // we don't need to do resource usage validation and no validation error to be reported.\n    const success = compute && !callDrawOrDispatch;\n\n    t.expectValidationError(() => {\n      encoder.finish();\n    }, !success);\n  });\n\ng.test('validation_scope,no_draw_or_dispatch')\n  .params(pbool('compute'))\n  .fn(async t => {\n    const { compute } = t.params;\n\n    const { bindGroup0, bindGroup1, encoder, pass, pipeline } = t.testValidationScope(compute);\n    t.setPipeline(pass, pipeline, compute);\n    pass.setBindGroup(0, bindGroup0);\n    pass.setBindGroup(1, bindGroup1);\n    pass.endPass();\n\n    // Resource usage validation scope is defined by dispatch calls. If dispatch is not called,\n    // we don't need to do resource usage validation and no validation error to be reported.\n    t.expectValidationError(() => {\n      encoder.finish();\n    }, !compute);\n  });\n\ng.test('validation_scope,same_draw_or_dispatch')\n  .params(pbool('compute'))\n  .fn(async t => {\n    const { compute } = t.params;\n\n    const { bindGroup0, bindGroup1, encoder, pass, pipeline } = t.testValidationScope(compute);\n    t.setPipeline(pass, pipeline, compute);\n    pass.setBindGroup(0, bindGroup0);\n    pass.setBindGroup(1, bindGroup1);\n    t.issueDrawOrDispatch(pass, compute);\n    pass.endPass();\n\n    t.expectValidationError(() => {\n      encoder.finish();\n    });\n  });\n\ng.test('validation_scope,different_draws_or_dispatches')\n  .params(pbool('compute'))\n  .fn(async t => {\n    const { compute } = t.params;\n    const { bindGroup0, bindGroup1, encoder, pass, pipeline } = t.testValidationScope(compute);\n    t.setPipeline(pass, pipeline, compute);\n\n    pass.setBindGroup(0, bindGroup0);\n    t.issueDrawOrDispatch(pass, compute);\n\n    pass.setBindGroup(1, bindGroup1);\n    t.issueDrawOrDispatch(pass, compute);\n\n    pass.endPass();\n\n    // Note that bindGroup0 will be inherited in the second draw/dispatch.\n    t.expectValidationError(() => {\n      encoder.finish();\n    });\n  });\n\ng.test('validation_scope,different_passes')\n  .params(pbool('compute'))\n  .fn(async t => {\n    const { compute } = t.params;\n    const { bindGroup0, bindGroup1, encoder, pass, pipeline } = t.testValidationScope(compute);\n    t.setPipeline(pass, pipeline, compute);\n    pass.setBindGroup(0, bindGroup0);\n    if (compute) t.setComputePipelineAndCallDispatch(pass as GPUComputePassEncoder);\n    pass.endPass();\n\n    const pass1 = compute\n      ? encoder.beginComputePass()\n      : t.beginSimpleRenderPass(encoder, t.createTexture().createView());\n    t.setPipeline(pass1, pipeline, compute);\n    pass1.setBindGroup(1, bindGroup1);\n    if (compute) t.setComputePipelineAndCallDispatch(pass as GPUComputePassEncoder);\n    pass1.endPass();\n\n    // No validation error.\n    encoder.finish();\n  });\n"],"file":"in_pass_encoder.spec.js"}