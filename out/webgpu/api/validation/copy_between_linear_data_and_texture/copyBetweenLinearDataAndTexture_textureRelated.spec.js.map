{"version":3,"sources":["../../../../../src/webgpu/api/validation/copy_between_linear_data_and_texture/copyBetweenLinearDataAndTexture_textureRelated.spec.ts"],"names":["description","params","poptions","makeTestGroup","kSizedTextureFormats","kSizedTextureFormatInfo","GPUConst","CopyBetweenLinearDataAndTextureTest","kAllTestMethods","texelBlockAlignmentTestExpanderForValueToCoordinate","formatCopyableWithMethod","g","test","combine","fn","t","method","textureState","texture","device","createTexture","size","width","height","depth","format","usage","GPUTextureUsage","COPY_SRC","COPY_DST","destroy","getErrorTexture","success","submit","testRun","bytesPerRow","dataSize","TextureUsage","SAMPLED","sampleCount","mipLevelCount","mipLevel","filter","expand","valueToCoordinate","coordinateToTest","info","origin","x","y","z","blockWidth","blockHeight","createAlignedTexture","dimension","rowsPerImage","originValue","copySizeValue","textureSizeValue","copySize","textureSize"],"mappings":"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","sourcesContent":["export const description = '';\n\nimport { params, poptions } from '../../../../common/framework/params_builder.js';\nimport { makeTestGroup } from '../../../../common/framework/test_group.js';\nimport { kSizedTextureFormats, kSizedTextureFormatInfo } from '../../../capability_info.js';\nimport { GPUConst } from '../../../constants.js';\n\nimport {\n  CopyBetweenLinearDataAndTextureTest,\n  kAllTestMethods,\n  texelBlockAlignmentTestExpanderForValueToCoordinate,\n  formatCopyableWithMethod,\n} from './copyBetweenLinearDataAndTexture.js';\n\nexport const g = makeTestGroup(CopyBetweenLinearDataAndTextureTest);\n\ng.test('texture_must_be_valid')\n  .params(\n    params()\n      .combine(poptions('method', kAllTestMethods))\n      .combine(poptions('textureState', ['valid', 'destroyed', 'error']))\n  )\n  .fn(async t => {\n    const { method, textureState } = t.params;\n\n    // A valid texture.\n    let texture = t.device.createTexture({\n      size: { width: 4, height: 4, depth: 1 },\n      format: 'rgba8unorm',\n      usage: GPUTextureUsage.COPY_SRC | GPUTextureUsage.COPY_DST,\n    });\n\n    switch (textureState) {\n      case 'destroyed': {\n        texture.destroy();\n        break;\n      }\n      case 'error': {\n        texture = t.getErrorTexture();\n        break;\n      }\n    }\n\n    const success = textureState === 'valid';\n    const submit = textureState === 'destroyed';\n\n    t.testRun(\n      { texture },\n      { bytesPerRow: 0 },\n      { width: 0, height: 0, depth: 0 },\n      { dataSize: 1, method, success, submit }\n    );\n  });\n\ng.test('texture_usage_must_be_valid')\n  .params(\n    params()\n      .combine(poptions('method', kAllTestMethods))\n      .combine(\n        poptions('usage', [\n          GPUConst.TextureUsage.COPY_SRC | GPUConst.TextureUsage.SAMPLED,\n          GPUConst.TextureUsage.COPY_DST | GPUConst.TextureUsage.SAMPLED,\n          GPUConst.TextureUsage.COPY_SRC | GPUConst.TextureUsage.COPY_DST,\n        ])\n      )\n  )\n  .fn(async t => {\n    const { usage, method } = t.params;\n\n    const texture = t.device.createTexture({\n      size: { width: 4, height: 4, depth: 1 },\n      format: 'rgba8unorm',\n      usage,\n    });\n\n    const success =\n      method === 'CopyTextureToBuffer'\n        ? (usage & GPUTextureUsage.COPY_SRC) !== 0\n        : (usage & GPUTextureUsage.COPY_DST) !== 0;\n\n    t.testRun(\n      { texture },\n      { bytesPerRow: 0 },\n      { width: 0, height: 0, depth: 0 },\n      { dataSize: 1, method, success }\n    );\n  });\n\ng.test('sample_count_must_be_1')\n  .params(\n    params()\n      .combine(poptions('method', kAllTestMethods))\n      .combine(poptions('sampleCount', [1, 4]))\n  )\n  .fn(async t => {\n    const { sampleCount, method } = t.params;\n\n    const texture = t.device.createTexture({\n      size: { width: 4, height: 4, depth: 1 },\n      sampleCount,\n      format: 'rgba8unorm',\n      usage: GPUTextureUsage.COPY_SRC | GPUTextureUsage.COPY_DST | GPUTextureUsage.SAMPLED,\n    });\n\n    const success = sampleCount === 1;\n\n    t.testRun(\n      { texture },\n      { bytesPerRow: 0 },\n      { width: 0, height: 0, depth: 0 },\n      { dataSize: 1, method, success }\n    );\n  });\n\ng.test('mip_level_must_be_in_range')\n  .params(\n    params()\n      .combine(poptions('method', kAllTestMethods))\n      .combine(poptions('mipLevelCount', [3, 5]))\n      .combine(poptions('mipLevel', [3, 4]))\n  )\n  .fn(async t => {\n    const { mipLevelCount, mipLevel, method } = t.params;\n\n    const texture = t.device.createTexture({\n      size: { width: 32, height: 32, depth: 1 },\n      mipLevelCount,\n      format: 'rgba8unorm',\n      usage: GPUTextureUsage.COPY_SRC | GPUTextureUsage.COPY_DST,\n    });\n\n    const success = mipLevel < mipLevelCount;\n\n    t.testRun(\n      { texture, mipLevel },\n      { bytesPerRow: 0 },\n      { width: 0, height: 0, depth: 0 },\n      { dataSize: 1, method, success }\n    );\n  });\n\ng.test('texel_block_alignments_on_origin')\n  .params(\n    params()\n      .combine(poptions('method', kAllTestMethods))\n      .combine(poptions('coordinateToTest', ['x', 'y', 'z'] as const))\n      .combine(poptions('format', kSizedTextureFormats))\n      .filter(formatCopyableWithMethod)\n      .expand(texelBlockAlignmentTestExpanderForValueToCoordinate)\n  )\n  .fn(async t => {\n    const { valueToCoordinate, coordinateToTest, format, method } = t.params;\n    const info = kSizedTextureFormatInfo[format];\n\n    const origin = { x: 0, y: 0, z: 0 };\n    const size = { width: 0, height: 0, depth: 0 };\n    let success = true;\n\n    origin[coordinateToTest] = valueToCoordinate;\n    switch (coordinateToTest) {\n      case 'x': {\n        success = origin.x % info.blockWidth === 0;\n        break;\n      }\n      case 'y': {\n        success = origin.y % info.blockHeight === 0;\n        break;\n      }\n    }\n\n    const texture = t.createAlignedTexture(format, size, origin);\n\n    t.testRun({ texture, origin }, { bytesPerRow: 0 }, size, {\n      dataSize: 1,\n      method,\n      success,\n    });\n  });\n\ng.test('1d_texture')\n  .params(\n    params()\n      .combine(poptions('method', kAllTestMethods))\n      .combine(poptions('width', [0, 1]))\n      .combine([\n        { height: 1, depth: 1 },\n        { height: 1, depth: 0 },\n        { height: 1, depth: 2 },\n        { height: 0, depth: 1 },\n        { height: 2, depth: 1 },\n      ])\n  )\n  .fn(async t => {\n    const { method, width, height, depth } = t.params;\n    const size = { width, height, depth };\n\n    const texture = t.device.createTexture({\n      size: { width: 2, height: 1, depth: 1 },\n      dimension: '1d',\n      format: 'rgba8unorm',\n      usage: GPUTextureUsage.COPY_SRC | GPUTextureUsage.COPY_DST,\n    });\n\n    // For 1d textures we require copyHeight and copyDepth to be 1,\n    // copyHeight or copyDepth being 0 should cause a validation error.\n    const success = size.height === 1 && size.depth === 1;\n\n    t.testRun({ texture }, { bytesPerRow: 256, rowsPerImage: 4 }, size, {\n      dataSize: 16,\n      method,\n      success,\n    });\n  });\n\ng.test('texel_block_alignments_on_size')\n  .params(\n    params()\n      .combine(poptions('method', kAllTestMethods))\n      .combine(poptions('coordinateToTest', ['width', 'height', 'depth'] as const))\n      .combine(poptions('format', kSizedTextureFormats))\n      .filter(formatCopyableWithMethod)\n      .expand(texelBlockAlignmentTestExpanderForValueToCoordinate)\n  )\n  .fn(async t => {\n    const { valueToCoordinate, coordinateToTest, format, method } = t.params;\n    const info = kSizedTextureFormatInfo[format];\n\n    const origin = { x: 0, y: 0, z: 0 };\n    const size = { width: 0, height: 0, depth: 0 };\n    let success = true;\n\n    size[coordinateToTest] = valueToCoordinate;\n    switch (coordinateToTest) {\n      case 'width': {\n        success = size.width % info.blockWidth === 0;\n        break;\n      }\n      case 'height': {\n        success = size.height % info.blockHeight === 0;\n        break;\n      }\n    }\n\n    const texture = t.createAlignedTexture(format, size, origin);\n\n    t.testRun({ texture, origin }, { bytesPerRow: 0 }, size, {\n      dataSize: 1,\n      method,\n      success,\n    });\n  });\n\ng.test('texture_range_conditions')\n  .params(\n    params()\n      .combine(poptions('method', kAllTestMethods))\n      .combine(poptions('originValue', [7, 8]))\n      .combine(poptions('copySizeValue', [7, 8]))\n      .combine(poptions('textureSizeValue', [14, 15]))\n      .combine(poptions('mipLevel', [0, 2]))\n      .combine(poptions('coordinateToTest', [0, 1, 2] as const))\n  )\n  .fn(async t => {\n    const {\n      originValue,\n      copySizeValue,\n      textureSizeValue,\n      mipLevel,\n      coordinateToTest,\n      method,\n    } = t.params;\n\n    const origin: GPUOrigin3D = [0, 0, 0];\n    const copySize: GPUExtent3D = [0, 0, 0];\n    const textureSize = { width: 16 << mipLevel, height: 16 << mipLevel, depth: 16 };\n    const success = originValue + copySizeValue <= textureSizeValue;\n\n    origin[coordinateToTest] = originValue;\n    copySize[coordinateToTest] = copySizeValue;\n    switch (coordinateToTest) {\n      case 0: {\n        textureSize.width = textureSizeValue << mipLevel;\n        break;\n      }\n      case 1: {\n        textureSize.height = textureSizeValue << mipLevel;\n        break;\n      }\n      case 2: {\n        textureSize.depth = textureSizeValue;\n        break;\n      }\n    }\n\n    const texture = t.device.createTexture({\n      size: textureSize,\n      mipLevelCount: 3,\n      format: 'rgba8unorm',\n      usage: GPUTextureUsage.COPY_SRC | GPUTextureUsage.COPY_DST,\n    });\n\n    t.testRun({ texture, origin, mipLevel }, { bytesPerRow: 0 }, copySize, {\n      dataSize: 1,\n      method,\n      success,\n    });\n  });\n"],"file":"copyBetweenLinearDataAndTexture_textureRelated.spec.js"}