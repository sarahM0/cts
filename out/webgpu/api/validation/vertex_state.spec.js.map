{"version":3,"sources":["../../../../src/webgpu/api/validation/vertex_state.spec.ts"],"names":["description","makeTestGroup","ValidationTest","MAX_VERTEX_ATTRIBUTES","MAX_VERTEX_BUFFER_END","MAX_VERTEX_BUFFER_ARRAY_STRIDE","MAX_VERTEX_BUFFERS","SIZEOF_FLOAT","Float32Array","BYTES_PER_ELEMENT","VERTEX_SHADER_CODE_WITH_NO_INPUT","clone","descriptor","JSON","parse","stringify","F","getDescriptor","vertexState","vertexShaderCode","vertexStage","module","device","createShaderModule","code","entryPoint","fragmentStage","primitiveTopology","colorStates","format","g","test","fn","t","createRenderPipeline","vertexBuffers","arrayStride","attributes","offset","shaderLocation","expectValidationError","badVertexState","goodVertexState","overlappingVertexState","i","push","vertexAttributes","Number","MAX_SAFE_INTEGER"],"mappings":"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","sourcesContent":["export const description = `\nvertexState validation tests.\n\nTODO: review existing tests, write descriptions, and make sure tests are complete.\n      Make sure the following is covered.\n> - In createRenderPipeline():\n> - An attribute is unused by the shader\n> - If invalid, test these (if valid, they should be operation tests instead):\n>     - Vertex buffer with zero attributes\n>     - Overlapping attributes\n>         - Verify correct sizing of every vertex format\n>     - Overlapping vertex buffer elements (an attribute offset + its size > arrayStride)\n>     - Shader tries to use an attribute location that's not bound\n>     - Alignment constraints on attributes, if any\n>     - Alignment constraints on arrayStride, if any\n`;\n\nimport { makeTestGroup } from '../../../common/framework/test_group.js';\n\nimport { ValidationTest } from './validation_test.js';\n\nconst MAX_VERTEX_ATTRIBUTES: number = 16;\nconst MAX_VERTEX_BUFFER_END: number = 2048;\nconst MAX_VERTEX_BUFFER_ARRAY_STRIDE: number = 2048;\nconst MAX_VERTEX_BUFFERS: number = 16;\n\nconst SIZEOF_FLOAT = Float32Array.BYTES_PER_ELEMENT;\n\nconst VERTEX_SHADER_CODE_WITH_NO_INPUT = `\n  [[builtin(position)]] var<out> Position : vec4<f32>;\n  [[stage(vertex)]] fn main() -> void {\n    Position = vec4<f32>(0.0, 0.0, 0.0, 0.0);\n    return;\n  }\n`;\n\nfunction clone<T extends GPUVertexStateDescriptor>(descriptor: T): T {\n  return JSON.parse(JSON.stringify(descriptor));\n}\n\nclass F extends ValidationTest {\n  getDescriptor(\n    vertexState: GPUVertexStateDescriptor,\n    vertexShaderCode: string\n  ): GPURenderPipelineDescriptor {\n    const descriptor: GPURenderPipelineDescriptor = {\n      vertexStage: {\n        module: this.device.createShaderModule({ code: vertexShaderCode }),\n        entryPoint: 'main',\n      },\n      fragmentStage: {\n        module: this.device.createShaderModule({\n          code: `\n            [[location(0)]] var<out> fragColor : vec4<f32>;\n            [[stage(fragment)]] fn main() -> void {\n              fragColor = vec4<f32>(0.0, 1.0, 0.0, 1.0);\n              return;\n            }`,\n        }),\n        entryPoint: 'main',\n      },\n      primitiveTopology: 'triangle-list',\n      colorStates: [{ format: 'rgba8unorm' }],\n      vertexState,\n    };\n    return descriptor;\n  }\n}\n\nexport const g = makeTestGroup(F);\n\ng.test('an_empty_vertex_input_is_valid').fn(t => {\n  const vertexState: GPUVertexStateDescriptor = {};\n  const descriptor = t.getDescriptor(vertexState, VERTEX_SHADER_CODE_WITH_NO_INPUT);\n  t.device.createRenderPipeline(descriptor);\n});\n\ng.test('a_null_buffer_is_valid').fn(t => {\n  {\n    // One null buffer is OK\n    const vertexState: GPUVertexStateDescriptor = {\n      vertexBuffers: [\n        {\n          arrayStride: 0,\n          attributes: [],\n        },\n      ],\n    };\n    const descriptor = t.getDescriptor(vertexState, VERTEX_SHADER_CODE_WITH_NO_INPUT);\n    t.device.createRenderPipeline(descriptor);\n  }\n  {\n    //  One null buffer followed by a buffer is OK\n    const vertexState: GPUVertexStateDescriptor = {\n      vertexBuffers: [\n        {\n          arrayStride: 0,\n          attributes: [],\n        },\n        {\n          arrayStride: 0,\n          attributes: [\n            {\n              format: 'float',\n              offset: 0,\n              shaderLocation: 0,\n            },\n          ],\n        },\n      ],\n    };\n    const descriptor = t.getDescriptor(vertexState, VERTEX_SHADER_CODE_WITH_NO_INPUT);\n    t.device.createRenderPipeline(descriptor);\n  }\n  {\n    //  One null buffer sitting between buffers is OK\n    const vertexState: GPUVertexStateDescriptor = {\n      vertexBuffers: [\n        {\n          arrayStride: 0,\n          attributes: [\n            {\n              format: 'float',\n              offset: 0,\n              shaderLocation: 0,\n            },\n          ],\n        },\n        {\n          arrayStride: 0,\n          attributes: [],\n        },\n        {\n          arrayStride: 0,\n          attributes: [\n            {\n              format: 'float',\n              offset: 0,\n              shaderLocation: 1,\n            },\n          ],\n        },\n      ],\n    };\n    const descriptor = t.getDescriptor(vertexState, VERTEX_SHADER_CODE_WITH_NO_INPUT);\n    t.device.createRenderPipeline(descriptor);\n  }\n});\n\ng.test('pipeline_vertex_buffers_are_backed_by_attributes_in_vertex_input').fn(async t => {\n  const vertexState: GPUVertexStateDescriptor = {\n    vertexBuffers: [\n      {\n        arrayStride: 2 * SIZEOF_FLOAT,\n        attributes: [\n          {\n            format: 'float',\n            offset: 0,\n            shaderLocation: 0,\n          },\n          {\n            format: 'float',\n            offset: 0,\n            shaderLocation: 1,\n          },\n        ],\n      },\n    ],\n  };\n  {\n    // Control case: pipeline with one input per attribute\n    const code = `\n      [[location(0)]] var<in> a : vec4<f32>;\n      [[location(1)]] var<in> b : vec4<f32>;\n\n      [[builtin(position)]] var<out> Position : vec4<f32>;\n      [[stage(vertex)]] fn main() -> void {\n        Position = vec4<f32>(0.0, 0.0, 0.0, 0.0);\n        return;\n      }\n  `;\n    const descriptor = t.getDescriptor(vertexState, code);\n    t.device.createRenderPipeline(descriptor);\n  }\n  {\n    // Check it is valid for the pipeline to use a subset of the VertexState\n    const code = `\n      [[location(0)]] var<in> a : vec4<f32>;\n\n      [[builtin(position)]] var<out> Position : vec4<f32>;\n      [[stage(vertex)]] fn main() -> void {\n        Position = vec4<f32>(0.0, 0.0, 0.0, 0.0);\n        return;\n      }\n    `;\n    const descriptor = t.getDescriptor(vertexState, code);\n    t.device.createRenderPipeline(descriptor);\n  }\n  {\n    // Check for an error when the pipeline uses an attribute not in the vertex input\n    const code = `\n      [[location(2)]] var<in> a : vec4<f32>;\n\n      [[builtin(position)]] var<out> Position : vec4<f32>;\n      [[stage(vertex)]] fn main() -> void {\n        Position = vec4<f32>(0.0, 0.0, 0.0, 0.0);\n        return;\n      }\n    `;\n    const descriptor = t.getDescriptor(vertexState, code);\n\n    t.expectValidationError(() => {\n      t.device.createRenderPipeline(descriptor);\n    });\n  }\n});\n\ng.test('an_arrayStride_of_0_is_valid').fn(t => {\n  const vertexState = {\n    vertexBuffers: [\n      {\n        arrayStride: 0,\n        attributes: [\n          {\n            format: 'float' as const,\n            offset: 0,\n            shaderLocation: 0,\n          },\n        ],\n      },\n    ],\n  };\n  {\n    // Works ok without attributes\n    const descriptor = t.getDescriptor(vertexState, VERTEX_SHADER_CODE_WITH_NO_INPUT);\n    t.device.createRenderPipeline(descriptor);\n  }\n  {\n    // Works ok with attributes at a large-ish offset\n    vertexState.vertexBuffers[0].attributes[0].offset = 128;\n    const descriptor = t.getDescriptor(vertexState, VERTEX_SHADER_CODE_WITH_NO_INPUT);\n    t.device.createRenderPipeline(descriptor);\n  }\n});\n\ng.test('offset_should_be_within_vertex_buffer_arrayStride_if_arrayStride_is_not_zero').fn(\n  async t => {\n    const vertexState = {\n      vertexBuffers: [\n        {\n          arrayStride: 2 * SIZEOF_FLOAT,\n          attributes: [\n            {\n              format: 'float' as GPUVertexFormat,\n              offset: 0,\n              shaderLocation: 0,\n            },\n            {\n              format: 'float' as GPUVertexFormat,\n              offset: SIZEOF_FLOAT,\n              shaderLocation: 1,\n            },\n          ],\n        },\n      ],\n    };\n    {\n      // Control case, setting correct arrayStride and offset\n      const descriptor = t.getDescriptor(vertexState, VERTEX_SHADER_CODE_WITH_NO_INPUT);\n      t.device.createRenderPipeline(descriptor);\n    }\n    {\n      // Test vertex attribute offset exceed vertex buffer arrayStride range\n      const badVertexState = clone(vertexState);\n      badVertexState.vertexBuffers[0].attributes[1].format = 'float2';\n      const descriptor = t.getDescriptor(badVertexState, VERTEX_SHADER_CODE_WITH_NO_INPUT);\n\n      t.expectValidationError(() => {\n        t.device.createRenderPipeline(descriptor);\n      });\n    }\n    {\n      // Test vertex attribute offset exceed vertex buffer arrayStride range\n      const badVertexState = clone(vertexState);\n      badVertexState.vertexBuffers[0].arrayStride = SIZEOF_FLOAT;\n      const descriptor = t.getDescriptor(badVertexState, VERTEX_SHADER_CODE_WITH_NO_INPUT);\n\n      t.expectValidationError(() => {\n        t.device.createRenderPipeline(descriptor);\n      });\n    }\n    {\n      // It's OK if arrayStride is zero\n      const goodVertexState = clone(vertexState);\n      goodVertexState.vertexBuffers[0].arrayStride = 0;\n      const descriptor = t.getDescriptor(goodVertexState, VERTEX_SHADER_CODE_WITH_NO_INPUT);\n      t.device.createRenderPipeline(descriptor);\n    }\n  }\n);\n\n// TODO: This should be made into an operation test.\ng.test('check_two_attributes_overlapping').fn(async t => {\n  const vertexState = {\n    vertexBuffers: [\n      {\n        arrayStride: 2 * SIZEOF_FLOAT,\n        attributes: [\n          {\n            format: 'float' as GPUVertexFormat,\n            offset: 0,\n            shaderLocation: 0,\n          },\n          {\n            format: 'float' as GPUVertexFormat,\n            offset: SIZEOF_FLOAT,\n            shaderLocation: 1,\n          },\n        ],\n      },\n    ],\n  };\n  {\n    // Control case, setting correct arrayStride and offset\n    const descriptor = t.getDescriptor(vertexState, VERTEX_SHADER_CODE_WITH_NO_INPUT);\n    t.device.createRenderPipeline(descriptor);\n  }\n  {\n    // Test two attributes overlapping\n    const overlappingVertexState = clone(vertexState);\n    overlappingVertexState.vertexBuffers[0].attributes[0].format = 'int2';\n    const descriptor = t.getDescriptor(overlappingVertexState, VERTEX_SHADER_CODE_WITH_NO_INPUT);\n    t.device.createRenderPipeline(descriptor);\n  }\n});\n\ng.test('check_out_of_bounds_condition_on_total_number_of_vertex_buffers').fn(async t => {\n  const vertexBuffers: GPUVertexBufferLayoutDescriptor[] = [];\n\n  for (let i = 0; i < MAX_VERTEX_BUFFERS; i++) {\n    vertexBuffers.push({\n      arrayStride: 0,\n      attributes: [\n        {\n          format: 'float',\n          offset: 0,\n          shaderLocation: i,\n        },\n      ],\n    });\n  }\n  {\n    // Control case, setting max vertex buffer number\n    const vertexState: GPUVertexStateDescriptor = { vertexBuffers };\n    const descriptor = t.getDescriptor(vertexState, VERTEX_SHADER_CODE_WITH_NO_INPUT);\n    t.device.createRenderPipeline(descriptor);\n  }\n  {\n    // Test vertex buffer number exceed the limit\n    const vertexState: GPUVertexStateDescriptor = {\n      vertexBuffers: [\n        ...vertexBuffers,\n        {\n          arrayStride: 0,\n          attributes: [\n            {\n              format: 'float',\n              offset: 0,\n              shaderLocation: MAX_VERTEX_BUFFERS,\n            },\n          ],\n        },\n      ],\n    };\n    const descriptor = t.getDescriptor(vertexState, VERTEX_SHADER_CODE_WITH_NO_INPUT);\n\n    t.expectValidationError(() => {\n      t.device.createRenderPipeline(descriptor);\n    });\n  }\n});\n\ng.test('check_out_of_bounds_on_number_of_vertex_attributes_on_a_single_vertex_buffer').fn(\n  async t => {\n    const vertexAttributes: GPUVertexAttributeDescriptor[] = [];\n\n    for (let i = 0; i < MAX_VERTEX_ATTRIBUTES; i++) {\n      vertexAttributes.push({\n        format: 'float',\n        offset: 0,\n        shaderLocation: i,\n      });\n    }\n    {\n      // Control case, setting max vertex buffer number\n      const vertexState: GPUVertexStateDescriptor = {\n        vertexBuffers: [\n          {\n            arrayStride: 0,\n            attributes: vertexAttributes,\n          },\n        ],\n      };\n      const descriptor = t.getDescriptor(vertexState, VERTEX_SHADER_CODE_WITH_NO_INPUT);\n      t.device.createRenderPipeline(descriptor);\n    }\n    {\n      // Test vertex attribute number exceed the limit\n      const vertexState: GPUVertexStateDescriptor = {\n        vertexBuffers: [\n          {\n            arrayStride: 0,\n            attributes: [\n              ...vertexAttributes,\n              {\n                format: 'float',\n                offset: 0,\n                shaderLocation: MAX_VERTEX_ATTRIBUTES,\n              },\n            ],\n          },\n        ],\n      };\n      const descriptor = t.getDescriptor(vertexState, VERTEX_SHADER_CODE_WITH_NO_INPUT);\n\n      t.expectValidationError(() => {\n        t.device.createRenderPipeline(descriptor);\n      });\n    }\n  }\n);\n\ng.test('check_out_of_bounds_on_number_of_vertex_attributes_across_vertex_buffers').fn(async t => {\n  const vertexBuffers = [];\n  for (let i = 0; i < MAX_VERTEX_ATTRIBUTES; i++) {\n    vertexBuffers.push({\n      arrayStride: 0,\n      attributes: [{ format: 'float' as const, offset: 0, shaderLocation: i }],\n    });\n  }\n\n  {\n    // Control case, setting max vertex buffer number\n    const vertexState: GPUVertexStateDescriptor = { vertexBuffers };\n    const descriptor = t.getDescriptor(vertexState, VERTEX_SHADER_CODE_WITH_NO_INPUT);\n    t.device.createRenderPipeline(descriptor);\n  }\n  {\n    // Test vertex attribute number exceed the limit\n    vertexBuffers[MAX_VERTEX_ATTRIBUTES - 1].attributes.push({\n      format: 'float' as const,\n      offset: 0,\n      shaderLocation: MAX_VERTEX_ATTRIBUTES,\n    });\n    const vertexState: GPUVertexStateDescriptor = { vertexBuffers };\n    const descriptor = t.getDescriptor(vertexState, VERTEX_SHADER_CODE_WITH_NO_INPUT);\n\n    t.expectValidationError(() => {\n      t.device.createRenderPipeline(descriptor);\n    });\n  }\n});\n\ng.test('check_out_of_bounds_condition_on_input_strides').fn(async t => {\n  const vertexState = {\n    vertexBuffers: [{ arrayStride: MAX_VERTEX_BUFFER_ARRAY_STRIDE, attributes: [] }],\n  };\n  {\n    // Control case, setting max input arrayStride\n    const descriptor = t.getDescriptor(vertexState, VERTEX_SHADER_CODE_WITH_NO_INPUT);\n    t.device.createRenderPipeline(descriptor);\n  }\n  {\n    // Test input arrayStride OOB\n    vertexState.vertexBuffers[0].arrayStride = MAX_VERTEX_BUFFER_ARRAY_STRIDE + 4;\n    const descriptor = t.getDescriptor(vertexState, VERTEX_SHADER_CODE_WITH_NO_INPUT);\n\n    t.expectValidationError(() => {\n      t.device.createRenderPipeline(descriptor);\n    });\n  }\n});\n\ng.test('check_multiple_of_4_bytes_constraint_on_input_arrayStride').fn(async t => {\n  const vertexState = {\n    vertexBuffers: [\n      {\n        arrayStride: 4,\n        attributes: [{ format: 'uchar2' as const, offset: 0, shaderLocation: 0 }],\n      },\n    ],\n  };\n  {\n    // Control case, setting input arrayStride 4 bytes\n    const descriptor = t.getDescriptor(vertexState, VERTEX_SHADER_CODE_WITH_NO_INPUT);\n    t.device.createRenderPipeline(descriptor);\n  }\n  {\n    // Test input arrayStride not multiple of 4 bytes\n    vertexState.vertexBuffers[0].arrayStride = 2;\n    const descriptor = t.getDescriptor(vertexState, VERTEX_SHADER_CODE_WITH_NO_INPUT);\n\n    t.expectValidationError(() => {\n      t.device.createRenderPipeline(descriptor);\n    });\n  }\n});\n\ng.test('identical_duplicate_attributes_are_invalid').fn(async t => {\n  const vertexState = {\n    vertexBuffers: [\n      {\n        arrayStride: 0,\n        attributes: [{ format: 'float' as const, offset: 0, shaderLocation: 0 }],\n      },\n    ],\n  };\n  {\n    // Control case, setting attribute 0\n    const descriptor = t.getDescriptor(vertexState, VERTEX_SHADER_CODE_WITH_NO_INPUT);\n    t.device.createRenderPipeline(descriptor);\n  }\n  {\n    // Oh no, attribute 0 is set twice\n    vertexState.vertexBuffers[0].attributes.push({\n      format: 'float' as const,\n      offset: 0,\n      shaderLocation: 0,\n    });\n    const descriptor = t.getDescriptor(vertexState, VERTEX_SHADER_CODE_WITH_NO_INPUT);\n\n    t.expectValidationError(() => {\n      t.device.createRenderPipeline(descriptor);\n    });\n  }\n});\n\ng.test('we_cannot_set_same_shader_location').fn(async t => {\n  {\n    const vertexState = {\n      vertexBuffers: [\n        {\n          arrayStride: 0,\n          attributes: [\n            { format: 'float' as const, offset: 0, shaderLocation: 0 },\n            { format: 'float' as const, offset: SIZEOF_FLOAT, shaderLocation: 1 },\n          ],\n        },\n      ],\n    };\n    {\n      // Control case, setting different shader locations in two attributes\n      const descriptor = t.getDescriptor(vertexState, VERTEX_SHADER_CODE_WITH_NO_INPUT);\n      t.device.createRenderPipeline(descriptor);\n    }\n    {\n      // Test same shader location in two attributes in the same buffer\n      vertexState.vertexBuffers[0].attributes[1].shaderLocation = 0;\n      const descriptor = t.getDescriptor(vertexState, VERTEX_SHADER_CODE_WITH_NO_INPUT);\n\n      t.expectValidationError(() => {\n        t.device.createRenderPipeline(descriptor);\n      });\n    }\n  }\n  {\n    const vertexState: GPUVertexStateDescriptor = {\n      vertexBuffers: [\n        {\n          arrayStride: 0,\n          attributes: [\n            {\n              format: 'float',\n              offset: 0,\n              shaderLocation: 0,\n            },\n          ],\n        },\n        {\n          arrayStride: 0,\n          attributes: [\n            {\n              format: 'float',\n              offset: 0,\n              shaderLocation: 0,\n            },\n          ],\n        },\n      ],\n    };\n    // Test same shader location in two attributes in different buffers\n    const descriptor = t.getDescriptor(vertexState, VERTEX_SHADER_CODE_WITH_NO_INPUT);\n\n    t.expectValidationError(() => {\n      t.device.createRenderPipeline(descriptor);\n    });\n  }\n});\n\ng.test('check_out_of_bounds_condition_on_attribute_shader_location').fn(async t => {\n  const vertexState = {\n    vertexBuffers: [\n      {\n        arrayStride: 0,\n        attributes: [\n          { format: 'float' as const, offset: 0, shaderLocation: MAX_VERTEX_ATTRIBUTES - 1 },\n        ],\n      },\n    ],\n  };\n  {\n    // Control case, setting last attribute shader location\n    const descriptor = t.getDescriptor(vertexState, VERTEX_SHADER_CODE_WITH_NO_INPUT);\n    t.device.createRenderPipeline(descriptor);\n  }\n  {\n    // Test attribute location OOB\n    vertexState.vertexBuffers[0].attributes[0].shaderLocation = MAX_VERTEX_ATTRIBUTES;\n    const descriptor = t.getDescriptor(vertexState, VERTEX_SHADER_CODE_WITH_NO_INPUT);\n\n    t.expectValidationError(() => {\n      t.device.createRenderPipeline(descriptor);\n    });\n  }\n});\n\ng.test('check_attribute_offset_out_of_bounds').fn(async t => {\n  const vertexState = {\n    vertexBuffers: [\n      {\n        arrayStride: 0,\n        attributes: [\n          {\n            format: 'float2' as const,\n            offset: MAX_VERTEX_BUFFER_END - 2 * SIZEOF_FLOAT,\n            shaderLocation: 0,\n          },\n        ],\n      },\n    ],\n  };\n  {\n    // Control case, setting max attribute offset to MAX_VERTEX_BUFFER_END - 8\n    const descriptor = t.getDescriptor(vertexState, VERTEX_SHADER_CODE_WITH_NO_INPUT);\n    t.device.createRenderPipeline(descriptor);\n  }\n  {\n    // Control case, setting attribute offset to 8\n    vertexState.vertexBuffers[0].attributes[0].offset = 8;\n    const descriptor = t.getDescriptor(vertexState, VERTEX_SHADER_CODE_WITH_NO_INPUT);\n    t.device.createRenderPipeline(descriptor);\n  }\n  {\n    // Test attribute offset out of bounds\n    vertexState.vertexBuffers[0].attributes[0].offset = MAX_VERTEX_BUFFER_END - 4;\n    const descriptor = t.getDescriptor(vertexState, VERTEX_SHADER_CODE_WITH_NO_INPUT);\n\n    t.expectValidationError(() => {\n      t.device.createRenderPipeline(descriptor);\n    });\n  }\n});\n\ng.test('check_multiple_of_4_bytes_constraint_on_offset').fn(async t => {\n  const vertexState = {\n    vertexBuffers: [\n      {\n        arrayStride: 0,\n        attributes: [\n          { format: 'float' as GPUVertexFormat, offset: SIZEOF_FLOAT, shaderLocation: 0 },\n        ],\n      },\n    ],\n  };\n  {\n    // Control case, setting offset 4 bytes\n    const descriptor = t.getDescriptor(vertexState, VERTEX_SHADER_CODE_WITH_NO_INPUT);\n    t.device.createRenderPipeline(descriptor);\n  }\n  {\n    // Test offset of 2 bytes with uchar2 format\n    vertexState.vertexBuffers[0].attributes[0].offset = 2;\n    vertexState.vertexBuffers[0].attributes[0].format = 'uchar2';\n    const descriptor = t.getDescriptor(vertexState, VERTEX_SHADER_CODE_WITH_NO_INPUT);\n    t.expectValidationError(() => {\n      t.device.createRenderPipeline(descriptor);\n    });\n  }\n  {\n    // Test offset of 2 bytes with float format\n    vertexState.vertexBuffers[0].attributes[0].offset = 2;\n    vertexState.vertexBuffers[0].attributes[0].format = 'float';\n    const descriptor = t.getDescriptor(vertexState, VERTEX_SHADER_CODE_WITH_NO_INPUT);\n\n    t.expectValidationError(() => {\n      t.device.createRenderPipeline(descriptor);\n    });\n  }\n});\n\ng.test('check_attribute_offset_overflow').fn(async t => {\n  const vertexState: GPUVertexStateDescriptor = {\n    vertexBuffers: [\n      {\n        arrayStride: 0,\n        attributes: [{ format: 'float', offset: Number.MAX_SAFE_INTEGER, shaderLocation: 0 }],\n      },\n    ],\n  };\n  const descriptor = t.getDescriptor(vertexState, VERTEX_SHADER_CODE_WITH_NO_INPUT);\n\n  t.expectValidationError(() => {\n    t.device.createRenderPipeline(descriptor);\n  });\n});\n"],"file":"vertex_state.spec.js"}