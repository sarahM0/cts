{"version":3,"sources":["../../../src/webgpu/web_platform/copyImageBitmapToTexture.spec.ts"],"names":["description","poptions","params","makeTestGroup","unreachable","kUncompressedTextureFormatInfo","GPUTest","kTexelRepresentationInfo","calculateRowPitch","width","bytesPerPixel","bytesPerRow","Color","generatedPixelCache","Map","F","checkCopyImageBitmapResult","src","expected","height","exp","Uint8Array","buffer","byteOffset","byteLength","rowPitch","dst","createCopyForMapRead","eventualAsyncExpectation","niceStack","mapAsync","GPUMapMode","READ","actual","getMappedRange","check","checkBufferWithRowPitch","undefined","message","rec","expectationFailed","destroy","failedByteIndices","failedByteExpectedValues","failedByteActualValues","iLoop","i","j","indexExp","indexActual","length","push","toString","join","doTestAndCheckResult","imageBitmapCopyView","dstTextureCopyView","copySize","expectedData","device","defaultQueue","copyImageBitmapToTexture","imageBitmap","dstTexture","texture","testBuffer","createBuffer","size","usage","GPUBufferUsage","COPY_SRC","COPY_DST","encoder","createCommandEncoder","copyTextureToBuffer","mipLevel","origin","x","y","z","depth","submit","finish","generatePixel","color","format","entry","get","set","has","rep","pixels","Red","pack","encode","R","G","B","A","Green","Blue","White","OpaqueBlack","TransparentBlack","g","test","combine","fn","t","alpha","orientation","dstColorFormat","srcBytesPerPixel","bytesPerBlock","imagePixels","Uint8ClampedArray","startPixel","currentPixel","imageData","ImageData","createImageBitmap","premultiplyAlpha","imageOrientation","createTexture","GPUTextureUsage","dstBytesPerPixel","dstPixels","expectedPixels","posImagePixel","posExpectedValue","imageCanvas","document","createElement","OffscreenCanvas","skip","imageCanvasContext","getContext","putImageData","getImageData","data"],"mappings":"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","sourcesContent":["export const description = `\ncopyImageBitmapToTexture from ImageBitmaps created from various sources.\n\nTODO: additional sources\n`;\n\nimport { poptions, params } from '../../common/framework/params_builder.js';\nimport { makeTestGroup } from '../../common/framework/test_group.js';\nimport { unreachable } from '../../common/framework/util/util.js';\nimport { kUncompressedTextureFormatInfo, UncompressedTextureFormat } from '../capability_info.js';\nimport { GPUTest } from '../gpu_test.js';\nimport { kTexelRepresentationInfo } from '../util/texture/texel_data.js';\n\nfunction calculateRowPitch(width: number, bytesPerPixel: number): number {\n  const bytesPerRow = width * bytesPerPixel;\n  // Rounds up to a multiple of 256 according to WebGPU requirements.\n  return (((bytesPerRow - 1) >> 8) + 1) << 8;\n}\n\nenum Color {\n  Red,\n  Green,\n  Blue,\n  White,\n  OpaqueBlack,\n  TransparentBlack,\n}\n// Cache for generated pixels.\nconst generatedPixelCache: Map<GPUTextureFormat, Map<Color, Uint8Array>> = new Map();\n\nclass F extends GPUTest {\n  checkCopyImageBitmapResult(\n    src: GPUBuffer,\n    expected: ArrayBufferView,\n    width: number,\n    height: number,\n    bytesPerPixel: number\n  ): void {\n    const exp = new Uint8Array(expected.buffer, expected.byteOffset, expected.byteLength);\n    const rowPitch = calculateRowPitch(width, bytesPerPixel);\n    const dst = this.createCopyForMapRead(src, 0, rowPitch * height);\n\n    this.eventualAsyncExpectation(async niceStack => {\n      await dst.mapAsync(GPUMapMode.READ);\n      const actual = new Uint8Array(dst.getMappedRange());\n      const check = this.checkBufferWithRowPitch(\n        actual,\n        exp,\n        width,\n        height,\n        rowPitch,\n        bytesPerPixel\n      );\n      if (check !== undefined) {\n        niceStack.message = check;\n        this.rec.expectationFailed(niceStack);\n      }\n      dst.destroy();\n    });\n  }\n\n  checkBufferWithRowPitch(\n    actual: Uint8Array,\n    exp: Uint8Array,\n    width: number,\n    height: number,\n    rowPitch: number,\n    bytesPerPixel: number\n  ): string | undefined {\n    const failedByteIndices: string[] = [];\n    const failedByteExpectedValues: string[] = [];\n    const failedByteActualValues: string[] = [];\n    iLoop: for (let i = 0; i < height; ++i) {\n      const bytesPerRow = width * bytesPerPixel;\n      for (let j = 0; j < bytesPerRow; ++j) {\n        const indexExp = j + i * bytesPerRow;\n        const indexActual = j + rowPitch * i;\n        if (actual[indexActual] !== exp[indexExp]) {\n          if (failedByteIndices.length >= 4) {\n            failedByteIndices.push('...');\n            failedByteExpectedValues.push('...');\n            failedByteActualValues.push('...');\n            break iLoop;\n          }\n          failedByteIndices.push(`(${i},${j})`);\n          failedByteExpectedValues.push(exp[indexExp].toString());\n          failedByteActualValues.push(actual[indexActual].toString());\n        }\n      }\n    }\n    if (failedByteIndices.length > 0) {\n      return `at [${failedByteIndices.join(', ')}], \\\nexpected [${failedByteExpectedValues.join(', ')}], \\\ngot [${failedByteActualValues.join(', ')}]`;\n    }\n    return undefined;\n  }\n\n  doTestAndCheckResult(\n    imageBitmapCopyView: GPUImageBitmapCopyView,\n    dstTextureCopyView: GPUTextureCopyView,\n    copySize: GPUExtent3D,\n    bytesPerPixel: number,\n    expectedData: Uint8ClampedArray\n  ): void {\n    this.device.defaultQueue.copyImageBitmapToTexture(\n      imageBitmapCopyView,\n      dstTextureCopyView,\n      copySize\n    );\n\n    const imageBitmap = imageBitmapCopyView.imageBitmap;\n    const dstTexture = dstTextureCopyView.texture;\n\n    const bytesPerRow = calculateRowPitch(imageBitmap.width, bytesPerPixel);\n    const testBuffer = this.device.createBuffer({\n      size: bytesPerRow * imageBitmap.height,\n      usage: GPUBufferUsage.COPY_SRC | GPUBufferUsage.COPY_DST,\n    });\n\n    const encoder = this.device.createCommandEncoder();\n\n    encoder.copyTextureToBuffer(\n      { texture: dstTexture, mipLevel: 0, origin: { x: 0, y: 0, z: 0 } },\n      { buffer: testBuffer, bytesPerRow },\n      { width: imageBitmap.width, height: imageBitmap.height, depth: 1 }\n    );\n    this.device.defaultQueue.submit([encoder.finish()]);\n\n    this.checkCopyImageBitmapResult(\n      testBuffer,\n      expectedData,\n      imageBitmap.width,\n      imageBitmap.height,\n      bytesPerPixel\n    );\n  }\n\n  generatePixel(color: Color, format: UncompressedTextureFormat): Uint8Array {\n    let entry = generatedPixelCache.get(format);\n    if (entry === undefined) {\n      entry = new Map();\n      generatedPixelCache.set(format, entry);\n    }\n\n    // None of the dst texture format is 'uint' or 'sint', so we can always use float value.\n    if (!entry.has(color)) {\n      const rep = kTexelRepresentationInfo[format];\n      let pixels;\n      switch (color) {\n        case Color.Red:\n          pixels = new Uint8Array(rep.pack(rep.encode({ R: 1.0, G: 0, B: 0, A: 1.0 })));\n          break;\n        case Color.Green:\n          pixels = new Uint8Array(rep.pack(rep.encode({ R: 0, G: 1.0, B: 0, A: 1.0 })));\n          break;\n        case Color.Blue:\n          pixels = new Uint8Array(rep.pack(rep.encode({ R: 0, G: 0, B: 1.0, A: 1.0 })));\n          break;\n        case Color.White:\n          pixels = new Uint8Array(rep.pack(rep.encode({ R: 0, G: 0, B: 0, A: 1.0 })));\n          break;\n        case Color.OpaqueBlack:\n          pixels = new Uint8Array(rep.pack(rep.encode({ R: 1.0, G: 1.0, B: 1.0, A: 1.0 })));\n          break;\n        case Color.TransparentBlack:\n          pixels = new Uint8Array(rep.pack(rep.encode({ R: 1.0, G: 1.0, B: 1.0, A: 0 })));\n          break;\n        default:\n          unreachable();\n      }\n      entry.set(color, pixels);\n    }\n\n    return entry.get(color)!;\n  }\n}\n\nexport const g = makeTestGroup(F);\n\ng.test('from_ImageData')\n  .params(\n    params()\n      .combine(poptions('width', [1, 2, 4, 15, 255, 256]))\n      .combine(poptions('height', [1, 2, 4, 15, 255, 256]))\n      .combine(poptions('alpha', ['none', 'premultiply']))\n      .combine(poptions('orientation', ['none', 'flipY']))\n      .combine(\n        poptions('dstColorFormat', [\n          'rgba8unorm',\n          'bgra8unorm',\n          'rgba8unorm-srgb',\n          'bgra8unorm-srgb',\n          'rgb10a2unorm',\n          'rgba16float',\n          'rgba32float',\n          'rg8unorm',\n          'rg16float',\n        ] as const)\n      )\n  )\n  .fn(async t => {\n    const { width, height, alpha, orientation, dstColorFormat } = t.params;\n\n    const format = 'rgba8unorm';\n    const srcBytesPerPixel = kUncompressedTextureFormatInfo[format].bytesPerBlock;\n\n    // Generate input contents by iterating 'Color' enum\n    const imagePixels = new Uint8ClampedArray(srcBytesPerPixel * width * height);\n    const startPixel = Color.Red;\n    for (let i = 0, currentPixel = startPixel; i < width * height; ++i) {\n      const pixels = t.generatePixel(currentPixel, format);\n      if (currentPixel === Color.TransparentBlack) {\n        currentPixel = Color.Red;\n      } else {\n        ++currentPixel;\n      }\n      for (let j = 0; j < srcBytesPerPixel; ++j) {\n        imagePixels[i * srcBytesPerPixel + j] = pixels[j];\n      }\n    }\n\n    // Generate correct expected values\n    const imageData = new ImageData(imagePixels, width, height);\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const imageBitmap = await (createImageBitmap as any)(imageData, {\n      premultiplyAlpha: alpha,\n      imageOrientation: orientation,\n    });\n\n    const dst = t.device.createTexture({\n      size: {\n        width: imageBitmap.width,\n        height: imageBitmap.height,\n        depth: 1,\n      },\n      format: dstColorFormat,\n      usage: GPUTextureUsage.COPY_DST | GPUTextureUsage.COPY_SRC,\n    });\n\n    // Construct expected value for different dst color format\n    const dstBytesPerPixel = kUncompressedTextureFormatInfo[dstColorFormat].bytesPerBlock!;\n    const dstPixels = new Uint8ClampedArray(dstBytesPerPixel * width * height);\n    let expectedPixels = new Uint8ClampedArray(dstBytesPerPixel * width * height);\n    for (let i = 0, currentPixel = startPixel; i < width * height; ++i) {\n      const pixels = t.generatePixel(currentPixel, dstColorFormat);\n      for (let j = 0; j < dstBytesPerPixel; ++j) {\n        // All pixels are 0 due to premultiply alpha\n        if (alpha === 'premultiply' && currentPixel === Color.TransparentBlack) {\n          dstPixels[i * dstBytesPerPixel + j] = 0;\n        } else {\n          dstPixels[i * dstBytesPerPixel + j] = pixels[j];\n        }\n      }\n\n      if (currentPixel === Color.TransparentBlack) {\n        currentPixel = Color.Red;\n      } else {\n        ++currentPixel;\n      }\n    }\n\n    if (orientation === 'flipY') {\n      for (let i = 0; i < height; ++i) {\n        for (let j = 0; j < width * dstBytesPerPixel; ++j) {\n          const posImagePixel = (height - i - 1) * width * dstBytesPerPixel + j;\n          const posExpectedValue = i * width * dstBytesPerPixel + j;\n          expectedPixels[posExpectedValue] = dstPixels[posImagePixel];\n        }\n      }\n    } else {\n      expectedPixels = dstPixels;\n    }\n\n    t.doTestAndCheckResult(\n      { imageBitmap, origin: { x: 0, y: 0 } },\n      { texture: dst },\n      { width: imageBitmap.width, height: imageBitmap.height, depth: 1 },\n      dstBytesPerPixel,\n      expectedPixels\n    );\n  });\n\ng.test('from_canvas')\n  .params(\n    params()\n      .combine(poptions('width', [1, 2, 4, 15, 255, 256]))\n      .combine(poptions('height', [1, 2, 4, 15, 255, 256]))\n  )\n  .fn(async t => {\n    const { width, height } = t.params;\n\n    // CTS sometimes runs on worker threads, where document is not available.\n    // In this case, OffscreenCanvas can be used instead of <canvas>.\n    // But some browsers don't support OffscreenCanvas, and some don't\n    // support '2d' contexts on OffscreenCanvas.\n    // In this situation, the case will be skipped.\n    let imageCanvas;\n    if (typeof document !== 'undefined') {\n      imageCanvas = document.createElement('canvas');\n      imageCanvas.width = width;\n      imageCanvas.height = height;\n    } else if (typeof OffscreenCanvas === 'undefined') {\n      t.skip('OffscreenCanvas is not supported');\n      return;\n    } else {\n      imageCanvas = new OffscreenCanvas(width, height);\n    }\n    const imageCanvasContext = imageCanvas.getContext('2d');\n    if (imageCanvasContext === null) {\n      t.skip('OffscreenCanvas \"2d\" context not available');\n      return;\n    }\n\n    // The texture format is rgba8unorm, so the bytes per pixel is 4.\n    const bytesPerPixel = 4;\n\n    // Generate original data.\n    const imagePixels = new Uint8ClampedArray(bytesPerPixel * width * height);\n    for (let i = 0; i < width * height * bytesPerPixel; ++i) {\n      imagePixels[i] = i % 4 === 3 ? 255 : i % 256;\n    }\n\n    const imageData = new ImageData(imagePixels, width, height);\n    imageCanvasContext.putImageData(imageData, 0, 0);\n\n    const imageBitmap = await createImageBitmap(imageCanvas);\n\n    const dst = t.device.createTexture({\n      size: {\n        width: imageBitmap.width,\n        height: imageBitmap.height,\n        depth: 1,\n      },\n      format: 'rgba8unorm',\n      usage: GPUTextureUsage.COPY_DST | GPUTextureUsage.COPY_SRC,\n    });\n\n    // This will get origin data and even it has premultiplied-alpha\n    const expectedData = imageCanvasContext.getImageData(\n      0,\n      0,\n      imageBitmap.width,\n      imageBitmap.height\n    ).data;\n\n    t.doTestAndCheckResult(\n      { imageBitmap, origin: { x: 0, y: 0 } },\n      { texture: dst },\n      { width: imageBitmap.width, height: imageBitmap.height, depth: 1 },\n      bytesPerPixel,\n      expectedData\n    );\n  });\n"],"file":"copyImageBitmapToTexture.spec.js"}