{"version":3,"sources":["../../src/webgpu/examples.spec.ts"],"names":["description","params","pbool","poptions","makeTestGroup","GPUTest","g","test","fn","t","unimplemented","desc","expect","shouldThrow","TypeError","shouldReject","Promise","reject","x","y","_result","combine","z","fence","queue","createFence","signal","onCompletion","getCompletedValue","data","Uint32Array","src","device","createBuffer","mappedAtCreation","size","usage","GPUBufferUsage","COPY_SRC","COPY_DST","getMappedRange","set","unmap","expectContents","textureCompressionBC","selectDeviceOrSkipTestCase","extensions","shouldError","expectGPUError","createTexture","format","GPUTextureUsage","SAMPLED","textureCompressionETC"],"mappings":";AAAA;AACA,GADA,OAAO,MAAMA,WAAW,GAAI;AAC5B;AACA;AACA;AACA,CAJO,CAMP,SAASC,MAAT,EAAiBC,KAAjB,EAAwBC,QAAxB,QAAwC,uCAAxC;AACA,SAASC,aAAT,QAA8B,mCAA9B;;AAEA,SAASC,OAAT,QAAwB,eAAxB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,MAAMC,CAAC,GAAGF,aAAa,CAACC,OAAD,CAAvB;;AAEP;;AAEAC,CAAC,CAACC,IAAF,CAAO,WAAP,EAAoBC,EAApB,CAAuBC,CAAC,IAAI,CAAE,CAA9B;;AAEAH,CAAC,CAACC,IAAF,CAAO,kCAAP,EAA2CG,aAA3C;AACAJ,CAAC,CAACC,IAAF,CAAO,+BAAP;AACGI,IADH;AAEK;AACL;AACA;AACA;AACA,CANA;;AAQGD,aARH;;AAUAJ,CAAC,CAACC,IAAF,CAAO,OAAP,EAAgBC,EAAhB,CAAmBC,CAAC,IAAI;AACtBA,EAAAA,CAAC,CAACG,MAAF,CAAS,IAAT;AACAH,EAAAA,CAAC,CAACG,MAAF,CAAS,IAAT,EAAe,qBAAf;;AAEAH,EAAAA,CAAC,CAACI,WAAF;AACE;AACA,aAFF;AAGE;AACA,QAAM;AACJ,UAAM,IAAIC,SAAJ,EAAN;AACD,GANH;AAOE;AACA,+BARF;;AAUD,CAdD;;AAgBAR,CAAC,CAACC,IAAF,CAAO,aAAP,EAAsBC,EAAtB,CAAyB,MAAMC,CAAN,IAAW;AAClC;AACAA,EAAAA,CAAC,CAACM,YAAF;AACE;AACA,aAFF;AAGE;AACAC,EAAAA,OAAO,CAACC,MAAR,CAAe,IAAIH,SAAJ,EAAf,CAJF;AAKE;AACA,gCANF;;;AASA;AACAL,EAAAA,CAAC,CAACM,YAAF;AACE,aADF;AAEE,GAAC,YAAY;AACX,UAAM,IAAID,SAAJ,EAAN;AACD,GAFD,GAFF;AAKE,gCALF;;AAOD,CAnBD;;AAqBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAR,CAAC,CAACC,IAAF,CAAO,cAAP;AACGN,MADH,CACU;AACN,EAAEiB,CAAC,EAAE,CAAL,EAAQC,CAAC,EAAE,CAAX,EAAcC,OAAO,EAAE,CAAvB,EADM,EACsB;AAC5B,EAAEF,CAAC,EAAE,CAAC,EAAN,EAAUC,CAAC,EAAE,EAAb,EAAiBC,OAAO,EAAE,CAA1B,EAFM,CADV;;AAKGZ,EALH,CAKMC,CAAC,IAAI;AACPA,EAAAA,CAAC,CAACG,MAAF,CAASH,CAAC,CAACR,MAAF,CAASiB,CAAT,GAAaT,CAAC,CAACR,MAAF,CAASkB,CAAtB,KAA4BV,CAAC,CAACR,MAAF,CAASmB,OAA9C;AACD,CAPH;AAQA;;AAEA;AACA;AACA;AACA;AACA;AACAd,CAAC,CAACC,IAAF,CAAO,sBAAP;AACGN,MADH;AAEIA,MAAM;AACHoB,OADH,CACWlB,QAAQ,CAAC,GAAD,EAAM,CAAC,CAAD,EAAI,CAAJ,CAAN,CADnB;AAEGkB,OAFH,CAEW,CAAC,EAAEF,CAAC,EAAE,CAAL,EAAD,EAAW,EAAEG,CAAC,EAAE,CAAL,EAAX,CAFX,CAFJ;;AAMGd,EANH,CAMM,MAAM,CAAE,CANd;;AAQAF,CAAC,CAACC,IAAF,CAAO,WAAP,EAAoBC,EAApB,CAAuB,MAAMC,CAAN,IAAW;AAChC,QAAMc,KAAK,GAAGd,CAAC,CAACe,KAAF,CAAQC,WAAR,EAAd;AACAhB,EAAAA,CAAC,CAACe,KAAF,CAAQE,MAAR,CAAeH,KAAf,EAAsB,CAAtB;AACA,QAAMA,KAAK,CAACI,YAAN,CAAmB,CAAnB,CAAN;AACAlB,EAAAA,CAAC,CAACG,MAAF,CAASW,KAAK,CAACK,iBAAN,OAA8B,CAAvC;AACD,CALD;;AAOAtB,CAAC,CAACC,IAAF,CAAO,aAAP,EAAsBC,EAAtB,CAAyB,MAAMC,CAAN,IAAW;AAClC,QAAMoB,IAAI,GAAG,IAAIC,WAAJ,CAAgB,CAAC,CAAD,EAAI,IAAJ,EAAU,CAAV,CAAhB,CAAb;AACA,QAAMC,GAAG,GAAGtB,CAAC,CAACuB,MAAF,CAASC,YAAT,CAAsB;AAChCC,IAAAA,gBAAgB,EAAE,IADc;AAEhCC,IAAAA,IAAI,EAAE,EAF0B;AAGhCC,IAAAA,KAAK,EAAEC,cAAc,CAACC,QAAf,GAA0BD,cAAc,CAACE,QAHhB,EAAtB,CAAZ;;AAKA,MAAIT,WAAJ,CAAgBC,GAAG,CAACS,cAAJ,EAAhB,EAAsCC,GAAtC,CAA0CZ,IAA1C;AACAE,EAAAA,GAAG,CAACW,KAAJ;;AAEA;AACA;AACAjC,EAAAA,CAAC,CAACkC,cAAF,CAAiBZ,GAAjB,EAAsBF,IAAtB;AACD,CAbD;;AAeA;;AAEAvB,CAAC,CAACC,IAAF,CAAO,iCAAP;AACGI,IADH;AAEK;AACL,qEAHA;;AAKGV,MALH,CAKUC,KAAK,CAAC,sBAAD,CALf;AAMGM,EANH,CAMM,MAAMC,CAAN,IAAW;AACb,QAAM,EAAEmC,oBAAF,KAA2BnC,CAAC,CAACR,MAAnC;;AAEA,MAAI2C,oBAAJ,EAA0B;AACxB,UAAMnC,CAAC,CAACoC,0BAAF,CAA6B,EAAEC,UAAU,EAAE,CAAC,wBAAD,CAAd,EAA7B,CAAN;AACD;;AAED,QAAMC,WAAW,GAAG,CAACH,oBAArB;AACAnC,EAAAA,CAAC,CAACuC,cAAF;AACE,cADF;AAEE,QAAM;AACJvC,IAAAA,CAAC,CAACuB,MAAF,CAASiB,aAAT,CAAuB;AACrBC,MAAAA,MAAM,EAAE,gBADa;AAErBf,MAAAA,IAAI,EAAE,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAFe;AAGrBC,MAAAA,KAAK,EAAEe,eAAe,CAACC,OAHF,EAAvB;;AAKD,GARH;AASEL,EAAAA,WATF;;AAWD,CAzBH;;AA2BAzC,CAAC,CAACC,IAAF,CAAO,kCAAP;AACGI,IADH;AAEK;AACL;AACA,4EAJA;;AAMGV,MANH,CAMUC,KAAK,CAAC,uBAAD,CANf;AAOGM,EAPH,CAOM,MAAMC,CAAN,IAAW;AACb,QAAM,EAAE4C,qBAAF,KAA4B5C,CAAC,CAACR,MAApC;;AAEA,MAAIoD,qBAAJ,EAA2B;AACzB,UAAM5C,CAAC,CAACoC,0BAAF,CAA6B;AACjCC,MAAAA,UAAU,EAAE,CAAC,yBAAD,CADqB,EAA7B,CAAN;;AAGD;;AAED;AACD,CAjBH","sourcesContent":["export const description = `\nExamples of writing CTS tests with various features.\n\nStart here when looking for examples of basic framework usage.\n`;\n\nimport { params, pbool, poptions } from '../common/framework/params_builder.js';\nimport { makeTestGroup } from '../common/framework/test_group.js';\n\nimport { GPUTest } from './gpu_test.js';\n\n// To run these tests in the standalone runner, run `grunt build` or `grunt pre` then open:\n// - http://localhost:8080/?runnow=1&q=webgpu:examples:\n// To run in WPT, copy/symlink the out-wpt/ directory as the webgpu/ directory in WPT, then open:\n// - (wpt server url)/webgpu/cts.html?q=webgpu:examples:\n//\n// Tests here can be run individually or in groups:\n// - ?q=webgpu:examples:basic/async=\n// - ?q=webgpu:examples:basic/\n// - ?q=webgpu:examples:\n\nexport const g = makeTestGroup(GPUTest);\n\n// Note: spaces in test names are replaced with underscores: webgpu:examples:test_name=\n/* eslint-disable-next-line  @typescript-eslint/no-unused-vars */\ng.test('test_name').fn(t => {});\n\ng.test('not_implemented_yet,without_plan').unimplemented();\ng.test('not_implemented_yet,with_plan')\n  .desc(\n    `\nPlan for this test. What it tests. Summary of how it tests that functionality.\n- Description of cases, by describing parameters {a, b, c}\n- x= more parameters {x, y, z}\n`\n  )\n  .unimplemented();\n\ng.test('basic').fn(t => {\n  t.expect(true);\n  t.expect(true, 'true should be true');\n\n  t.shouldThrow(\n    // The expected '.name' of the thrown error.\n    'TypeError',\n    // This function is run inline inside shouldThrow, and is expected to throw.\n    () => {\n      throw new TypeError();\n    },\n    // Log message.\n    'function should throw Error'\n  );\n});\n\ng.test('basic,async').fn(async t => {\n  // shouldReject must be awaited to ensure it can wait for the promise before the test ends.\n  t.shouldReject(\n    // The expected '.name' of the thrown error.\n    'TypeError',\n    // Promise expected to reject.\n    Promise.reject(new TypeError()),\n    // Log message.\n    'Promise.reject should reject'\n  );\n\n  // Promise can also be an IIFE.\n  t.shouldReject(\n    'TypeError',\n    (async () => {\n      throw new TypeError();\n    })(),\n    'Promise.reject should reject'\n  );\n});\n\n// A test can be parameterized with a simple array of objects.\n//\n// Parameters can be public (x, y) which means they're part of the case name.\n// They can also be private by starting with an underscore (_result), which passes\n// them into the test but does not make them part of the case name:\n//\n// - webgpu:examples:basic/params={\"x\":2,\"y\":4}    runs with t.params = {x: 2, y: 5, _result: 6}.\n// - webgpu:examples:basic/params={\"x\":-10,\"y\":18} runs with t.params = {x: -10, y: 18, _result: 8}.\ng.test('basic,params')\n  .params([\n    { x: 2, y: 4, _result: 6 }, //\n    { x: -10, y: 18, _result: 8 },\n  ])\n  .fn(t => {\n    t.expect(t.params.x + t.params.y === t.params._result);\n  });\n// (note the blank comment above to enforce newlines on autoformat)\n\n// Runs the following cases:\n// { x: 2, y: 2 }\n// { x: 2, z: 3 }\n// { x: 3, y: 2 }\n// { x: 3, z: 3 }\ng.test('basic,params_builder')\n  .params(\n    params()\n      .combine(poptions('x', [2, 3]))\n      .combine([{ y: 2 }, { z: 3 }])\n  )\n  .fn(() => {});\n\ng.test('gpu,async').fn(async t => {\n  const fence = t.queue.createFence();\n  t.queue.signal(fence, 2);\n  await fence.onCompletion(1);\n  t.expect(fence.getCompletedValue() === 2);\n});\n\ng.test('gpu,buffers').fn(async t => {\n  const data = new Uint32Array([0, 1234, 0]);\n  const src = t.device.createBuffer({\n    mappedAtCreation: true,\n    size: 12,\n    usage: GPUBufferUsage.COPY_SRC | GPUBufferUsage.COPY_DST,\n  });\n  new Uint32Array(src.getMappedRange()).set(data);\n  src.unmap();\n\n  // Use the expectContents helper to check the actual contents of a GPUBuffer.\n  // Like shouldReject, it must be awaited.\n  t.expectContents(src, data);\n});\n\n// One of the following two tests should be skipped on most platforms.\n\ng.test('gpu,with_texture_compression,bc')\n  .desc(\n    `Example of a test using a device descriptor.\nTests that a BC format passes validation iff the feature is enabled.`\n  )\n  .params(pbool('textureCompressionBC'))\n  .fn(async t => {\n    const { textureCompressionBC } = t.params;\n\n    if (textureCompressionBC) {\n      await t.selectDeviceOrSkipTestCase({ extensions: ['texture-compression-bc'] });\n    }\n\n    const shouldError = !textureCompressionBC;\n    t.expectGPUError(\n      'validation',\n      () => {\n        t.device.createTexture({\n          format: 'bc1-rgba-unorm',\n          size: [4, 4, 1],\n          usage: GPUTextureUsage.SAMPLED,\n        });\n      },\n      shouldError\n    );\n  });\n\ng.test('gpu,with_texture_compression,etc')\n  .desc(\n    `Example of a test using a device descriptor.\n\nTODO: Test that an ETC format passes validation iff the feature is enabled.`\n  )\n  .params(pbool('textureCompressionETC'))\n  .fn(async t => {\n    const { textureCompressionETC } = t.params;\n\n    if (textureCompressionETC) {\n      await t.selectDeviceOrSkipTestCase({\n        extensions: ['texture-compression-etc' as GPUExtensionName],\n      });\n    }\n\n    // TODO: Should actually test createTexture with an ETC format here.\n  });\n"],"file":"examples.spec.js"}