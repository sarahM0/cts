{"version":3,"sources":["../../../../src/common/runtime/helper/test_worker.ts"],"names":["LogMessageWithStack","TestWorker","resolvers","Map","constructor","debug","selfPath","import","meta","url","selfPathDir","substring","lastIndexOf","workerPath","worker","Worker","type","onmessage","ev","query","data","result","logs","l","Object","setPrototypeOf","prototype","get","run","rec","postMessage","workerResult","Promise","resolve","set","injectResult"],"mappings":";AAAA;AACA,GADA,SAASA,mBAAT,QAAoC,wCAApC;;AAIA,OAAO,MAAMC,UAAN,CAAiB;;;AAGLC,EAAAA,SAAjB,GAA6B,IAAIC,GAAJ,EAA7B;;AAEAC,EAAAA,WAAW,CAACC,KAAD,EAAiB;AAC1B,SAAKA,KAAL,GAAaA,KAAb;;AAEA,UAAMC,QAAQ,GAAGC,MAAM,CAACC,IAAP,CAAYC,GAA7B;AACA,UAAMC,WAAW,GAAGJ,QAAQ,CAACK,SAAT,CAAmB,CAAnB,EAAsBL,QAAQ,CAACM,WAAT,CAAqB,GAArB,CAAtB,CAApB;AACA,UAAMC,UAAU,GAAGH,WAAW,GAAG,wBAAjC;AACA,SAAKI,MAAL,GAAc,IAAIC,MAAJ,CAAWF,UAAX,EAAuB,EAAEG,IAAI,EAAE,QAAR,EAAvB,CAAd;AACA,SAAKF,MAAL,CAAYG,SAAZ,GAAwBC,EAAE,IAAI;AAC5B,YAAMC,KAAa,GAAGD,EAAE,CAACE,IAAH,CAAQD,KAA9B;AACA,YAAME,MAAiC,GAAGH,EAAE,CAACE,IAAH,CAAQC,MAAlD;AACA,UAAIA,MAAM,CAACC,IAAX,EAAiB;AACf,aAAK,MAAMC,CAAX,IAAgBF,MAAM,CAACC,IAAvB,EAA6B;AAC3BE,UAAAA,MAAM,CAACC,cAAP,CAAsBF,CAAtB,EAAyBvB,mBAAmB,CAAC0B,SAA7C;AACD;AACF;AACD,WAAKxB,SAAL,CAAeyB,GAAf,CAAmBR,KAAnB,EAA2BE,MAA3B;;AAEA;AACA;AACD,KAZD;AAaD;;AAED,QAAMO,GAAN,CAAUC,GAAV,EAAiCV,KAAjC,EAA+D;AAC7D,SAAKL,MAAL,CAAYgB,WAAZ,CAAwB,EAAEX,KAAF,EAASd,KAAK,EAAE,KAAKA,KAArB,EAAxB;AACA,UAAM0B,YAAY,GAAG,MAAM,IAAIC,OAAJ,CAAgCC,OAAO,IAAI;AACpE,WAAK/B,SAAL,CAAegC,GAAf,CAAmBf,KAAnB,EAA0Bc,OAA1B;AACD,KAF0B,CAA3B;AAGAJ,IAAAA,GAAG,CAACM,YAAJ,CAAiBJ,YAAjB;AACD,GAjCqB","sourcesContent":["import { LogMessageWithStack } from '../../framework/logging/log_message.js';\nimport { TransferredTestCaseResult, LiveTestCaseResult } from '../../framework/logging/result.js';\nimport { TestCaseRecorder } from '../../framework/logging/test_case_recorder.js';\n\nexport class TestWorker {\n  private readonly debug: boolean;\n  private readonly worker: Worker;\n  private readonly resolvers = new Map<string, (result: LiveTestCaseResult) => void>();\n\n  constructor(debug: boolean) {\n    this.debug = debug;\n\n    const selfPath = import.meta.url;\n    const selfPathDir = selfPath.substring(0, selfPath.lastIndexOf('/'));\n    const workerPath = selfPathDir + '/test_worker-worker.js';\n    this.worker = new Worker(workerPath, { type: 'module' });\n    this.worker.onmessage = ev => {\n      const query: string = ev.data.query;\n      const result: TransferredTestCaseResult = ev.data.result;\n      if (result.logs) {\n        for (const l of result.logs) {\n          Object.setPrototypeOf(l, LogMessageWithStack.prototype);\n        }\n      }\n      this.resolvers.get(query)!(result as LiveTestCaseResult);\n\n      // TODO(kainino0x): update the Logger with this result (or don't have a logger and update the\n      // entire results JSON somehow at some point).\n    };\n  }\n\n  async run(rec: TestCaseRecorder, query: string): Promise<void> {\n    this.worker.postMessage({ query, debug: this.debug });\n    const workerResult = await new Promise<LiveTestCaseResult>(resolve => {\n      this.resolvers.set(query, resolve);\n    });\n    rec.injectResult(workerResult);\n  }\n}\n"],"file":"test_worker.js"}