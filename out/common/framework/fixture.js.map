{"version":3,"sources":["../../../src/common/framework/fixture.ts"],"names":["assert","SkipTestCase","Error","Fixture","eventualExpectations","numOutstandingAsyncExpectations","constructor","rec","params","_params","init","debug","msg","skip","finalize","length","p","shift","ex","threw","warn","fail","expectationFailed","immediateAsyncExpectation","fn","ret","eventualAsyncExpectation","promise","push","expectErrorValue","expectedName","niceStack","message","actualName","name","shouldResolve","m","shouldReject","shouldThrow","expect","cond"],"mappings":"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","sourcesContent":["import { TestCaseRecorder } from './logging/test_case_recorder.js';\nimport { CaseParams } from './params_utils.js';\nimport { assert } from './util/util.js';\n\nexport class SkipTestCase extends Error {}\n\n// A Fixture is a class used to instantiate each test case at run time.\n// A new instance of the Fixture is created for every single test case\n// (i.e. every time the test function is run).\nexport class Fixture {\n  private _params: unknown;\n  protected rec: TestCaseRecorder;\n  private eventualExpectations: Array<Promise<unknown>> = [];\n  private numOutstandingAsyncExpectations = 0;\n\n  constructor(rec: TestCaseRecorder, params: CaseParams) {\n    this.rec = rec;\n    this._params = params;\n  }\n\n  get params(): unknown {\n    return this._params;\n  }\n\n  // This has to be a member function instead of an async `createFixture` function, because\n  // we need to be able to ergonomically override it in subclasses.\n  async init(): Promise<void> {}\n\n  debug(msg: string): void {\n    this.rec.debug(new Error(msg));\n  }\n\n  skip(msg: string): never {\n    throw new SkipTestCase(msg);\n  }\n\n  async finalize(): Promise<void> {\n    assert(\n      this.numOutstandingAsyncExpectations === 0,\n      'there were outstanding immediateAsyncExpectations (e.g. expectUncapturedError) at the end of the test'\n    );\n\n    // Loop to exhaust the eventualExpectations in case they chain off each other.\n    while (this.eventualExpectations.length) {\n      const p = this.eventualExpectations.shift()!;\n      try {\n        await p;\n      } catch (ex) {\n        this.rec.threw(ex);\n      }\n    }\n  }\n\n  warn(msg?: string): void {\n    this.rec.warn(new Error(msg));\n  }\n\n  fail(msg?: string): void {\n    this.rec.expectationFailed(new Error(msg));\n  }\n\n  protected async immediateAsyncExpectation<T>(fn: () => Promise<T>): Promise<T> {\n    this.numOutstandingAsyncExpectations++;\n    const ret = await fn();\n    this.numOutstandingAsyncExpectations--;\n    return ret;\n  }\n\n  protected eventualAsyncExpectation<T>(fn: (niceStack: Error) => Promise<T>): Promise<T> {\n    const promise = fn(new Error());\n    this.eventualExpectations.push(promise);\n    return promise;\n  }\n\n  private expectErrorValue(expectedName: string, ex: unknown, niceStack: Error): void {\n    if (!(ex instanceof Error)) {\n      niceStack.message = `THREW non-error value, of type ${typeof ex}: ${ex}`;\n      this.rec.expectationFailed(niceStack);\n      return;\n    }\n    const actualName = ex.name;\n    if (actualName !== expectedName) {\n      niceStack.message = `THREW ${actualName}, instead of ${expectedName}: ${ex}`;\n      this.rec.expectationFailed(niceStack);\n    } else {\n      niceStack.message = `OK: threw ${actualName}: ${ex.message}`;\n      this.rec.debug(niceStack);\n    }\n  }\n\n  shouldResolve(p: Promise<unknown>, msg?: string): void {\n    this.eventualAsyncExpectation(async niceStack => {\n      const m = msg ? ': ' + msg : '';\n      try {\n        await p;\n        niceStack.message = 'resolved as expected' + m;\n      } catch (ex) {\n        niceStack.message = `REJECTED${m}\\n${ex.message}`;\n        this.rec.expectationFailed(niceStack);\n      }\n    });\n  }\n\n  shouldReject(expectedName: string, p: Promise<unknown>, msg?: string): void {\n    this.eventualAsyncExpectation(async niceStack => {\n      const m = msg ? ': ' + msg : '';\n      try {\n        await p;\n        niceStack.message = 'DID NOT REJECT' + m;\n        this.rec.expectationFailed(niceStack);\n      } catch (ex) {\n        niceStack.message = 'rejected as expected' + m;\n        this.expectErrorValue(expectedName, ex, niceStack);\n      }\n    });\n  }\n\n  shouldThrow(expectedName: string, fn: () => void, msg?: string): void {\n    const m = msg ? ': ' + msg : '';\n    try {\n      fn();\n      this.rec.expectationFailed(new Error('DID NOT THROW' + m));\n    } catch (ex) {\n      this.expectErrorValue(expectedName, ex, new Error(m));\n    }\n  }\n\n  expect(cond: boolean, msg?: string): boolean {\n    if (cond) {\n      const m = msg ? ': ' + msg : '';\n      this.rec.debug(new Error('expect OK' + m));\n    } else {\n      this.rec.expectationFailed(new Error(msg));\n    }\n    return cond;\n  }\n}\n"],"file":"fixture.js"}